openapi: 3.0.3
info:
  title: Cobo Wallet as a Service 2.0
  description: |
    The Cobo Wallet-as-a-Service (WaaS) 2.0 API is the latest version of Cobo’s WaaS API offering. It enables you to access Cobo’s full suite of crypto wallet technologies with powerful and flexible access controls. By encapsulating complex security protocols and streamlining blockchain interactions, this API allows you to concentrate on your core business activities without worrying about the safety of your assets. The WaaS 2.0 API presents the following key features:

    - A unified API for Cobo’s [all four wallet types](https://manuals.cobo.com/en/portal/introduction#an-all-in-one-wallet-platform)
    - Support for 80+ chains and 3000+ tokens
    - A comprehensive selection of webhook events
    - Flexible usage models for MPC wallets, including [Organization-Controlled Wallets](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/introduction) and [User-Controlled Wallets](https://manuals.cobo.com/en/portal/mpc-wallets/ucw/introduction)
    - Programmatic control of smart contract wallets such as Safe{Wallet} with fine-grained access controls
    - Seamlessly transfer funds across multiple exchanges, including Binance, OKX, Bybit, Deribit, and more

    For more information about the WaaS 2.0 API, see [Introduction to WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).
  termsOfService: 'https://cobo.com/waas/tos/'
  license:
    name: Apache 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'
  contact:
    name: Cobo WaaS
    url: 'https://www.cobo.com/waas'
    email: support@cobo.com
  version: 1.0.0
servers:
  - url: 'https://api.dev.cobo.com/v2'
    description: Development environment
  - url: 'https://api.cobo.com/v2'
    description: Production environment
tags:
  - name: Wallets
    description: Operations related to all wallets.
  - name: Wallets - MPC Wallets
    description: Operations related to mpc wallet.
  - name: Transactions
    description: Operations related to all transactions.
  - name: Developers - Webhooks
    description: Operations related to webhooks.
  - name: OAuth
    description: Operations related to OAuth.
paths:
  /wallets/chains:
    get:
      tags:
        - Wallets
      operationId: list_supported_chains
      summary: List supported chains
      description: |
        This operation retrieves all chains supported by a specific wallet type or subtype. 

        It provides details such as the chain ID, chain symbol, and other relevant information. If you do not specify a wallet type, this operation returns a combination of chains supported by each wallet type. You can filter the result by chain IDs. The chain metadata is publicly available without any permission restrictions.

        Cobo Portal currently supports over 80 blockchains and more than 3,000 tokens. In addition to this operation, you can also view the full list of supported chains [here](https://www.cobo.com/chains). We regularly update the list with new additions. If you want to request support for a specific chain or token, please [contact us](https://www.cobo.com/contact).
      security:
        - CoboAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/optionalWalletTypeParam'
        - $ref: '#/components/parameters/optionalWalletSubtypeParam'
        - $ref: '#/components/parameters/optionalChainIdListParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          $ref: '#/components/responses/getChainsResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/wallets/chains/{chain_id}':
    parameters:
      - $ref: '#/components/parameters/chainIdParam'
    get:
      tags:
        - Wallets
      operationId: get_chain_by_id
      summary: Get chain information
      description: |
        This operation retrieves the detailed information about a specified chain.
      security:
        - CoboAuth: [ ]
      responses:
        '200':
          $ref: '#/components/responses/getChainByIdResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /wallets/tokens:
    get:
      tags:
        - Wallets
      operationId: list_supported_tokens
      summary: List supported tokens
      description: |
        This operation retrieves all tokens supported by a specific wallet type or subtype. 

        It provides details such as token ID, token symbol, and other relevant information. If you do not specify a wallet type, this operation returns a combination of tokens supported by each wallet type. You can filter the result by token IDs or chain IDs. The token metadata is publicly available without any permission restrictions.

        Cobo Portal currently supports over 80 blockchains and more than 3,000 tokens. In addition to this operation, you can also view the full list of supported tokens [here](https://www.cobo.com/tokens). We regularly update the list with new additions. If you want to request support for a specific chain or token, please [contact us](https://www.cobo.com/contact).
      security:
        - CoboAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/optionalWalletTypeParam'
        - $ref: '#/components/parameters/optionalWalletSubtypeParam'
        - $ref: '#/components/parameters/optionalChainIdListParam'
        - $ref: '#/components/parameters/optionalTokenListIdParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          $ref: '#/components/responses/getTokensResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/wallets/tokens/{token_id}':
    parameters:
      - $ref: '#/components/parameters/tokenIdParam'
    get:
      tags:
        - Wallets
      operationId: get_token_by_id
      summary: Get token information
      description: |
        This operation retrieves the detailed information about a specified token.
      security:
        - CoboAuth: [ ]
      responses:
        '200':
          $ref: '#/components/responses/getTokenByIdResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /wallets/enabled_chains:
    get:
      tags:
        - Wallets
      operationId: list_enabled_chains
      summary: List enabled chains
      description: |
        This operation retrieves all the chains that can be used by your organization. 

        You can filter the result by wallet type or subtype. If you do not specify a wallet type, this operation returns a combination of chains that can be used by your organization for each wallet type.
      security:
        - CoboAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/optionalWalletTypeParam'
        - $ref: '#/components/parameters/optionalWalletSubtypeParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          $ref: '#/components/responses/getChainsResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /wallets/enabled_tokens:
    get:
      tags:
        - Wallets
      operationId: list_enabled_tokens
      summary: List enabled tokens
      description: |
        This operation retrieves all the tokens that can be used by your organization. 

        You can filter the result by wallet type, subtype, and chain IDs. If you do not specify a wallet type, this operation returns a combination of tokens that can be used by your organization for each wallet type.
      security:
        - CoboAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/optionalWalletTypeParam'
        - $ref: '#/components/parameters/optionalWalletSubtypeParam'
        - $ref: '#/components/parameters/optionalChainIdListParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          $ref: '#/components/responses/getTokensResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /wallets:
    post:
      tags:
        - Wallets
      operationId: create_wallet
      summary: Create wallet
      description: |
        This operation creates a wallet with the provided information.

        <Note>This operation is not applicable to Smart Contract Wallets.</Note>
      security:
        - CoboAuth: [ ]
        - OAuth2:
            - 'custodial_asset_wallet:create'
            - 'mpc_organization_controlled_wallet:create'
            - 'mpc_user_controlled_wallet:create'
      requestBody:
        $ref: '#/components/requestBodies/createWalletBody'
      responses:
        '201':
          $ref: '#/components/responses/createWalletResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
    get:
      tags:
        - Wallets
      operationId: list_wallets
      summary: List all wallets
      description: |
        This operation retrieves the information of all wallets under your organization. You can filter the result by wallet type and subtype. For MPC Wallets, you can also filter by project ID and vault ID.

        <Note>You must specify either the wallet type or subtype, or both.</Note>
      security:
        - CoboAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/optionalWalletTypeParam'
        - $ref: '#/components/parameters/optionalWalletSubtypeParam'
        - $ref: '#/components/parameters/optionalProjectIdQueryParam'
        - $ref: '#/components/parameters/optionalVaultIdQueryParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          $ref: '#/components/responses/getWalletsResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/wallets/{wallet_id}':
    parameters:
      - $ref: '#/components/parameters/walletIdParam'
    get:
      tags:
        - Wallets
      operationId: get_wallet_by_id
      summary: Get wallet information
      description: |
        This operation retrieves the detailed information about a specified wallet.
      security:
        - CoboAuth: [ ]
      responses:
        '200':
          $ref: '#/components/responses/getWalletByIdResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
    put:
      tags:
        - Wallets
      operationId: update_wallet_by_id
      summary: Update wallet
      description: |
        This operation updates the information of a specified wallet.

        For Exchange Wallets, you can update the API key, API secret, and other information about your exchange accounts with this operation. For other wallet types, you can only update the wallet name.
      security:
        - CoboAuth: [ ]
        - OAuth2:
            - 'custodial_asset_wallet:edit'
            - 'mpc_organization_controlled_wallet:edit'
            - 'mpc_user_controlled_wallet:edit'
      requestBody:
        $ref: '#/components/requestBodies/updateWalletBody'
      responses:
        '200':
          $ref: '#/components/responses/updateWalletResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/wallets/{wallet_id}/delete':
    parameters:
      - $ref: '#/components/parameters/walletIdParam'
    post:
      tags:
        - Wallets
      operationId: delete_wallet_by_id
      summary: Delete wallet
      description: |
        This operation deletes a specified wallet.

        <Note>This operation is applicable to Exchange Wallets only.</Note>
      security:
        - CoboAuth: [ ]
      responses:
        '201':
          $ref: '#/components/responses/deleteWalletResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/wallets/{wallet_id}/utxos':
    parameters:
      - $ref: '#/components/parameters/walletIdParam'
    get:
      tags:
        - Wallets
      operationId: list_utxos
      summary: List UTXOs
      description: |
        The operation retrieves a list of unspent transaction outputs (UTXOs) for a specified wallet and token.

        <Note>This operation is applicable to MPC Wallets only.</Note>
      security:
        - CoboAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/requiredTokenIdParam'
        - $ref: '#/components/parameters/optionalAddressParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          $ref: '#/components/responses/listUtxoResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/wallets/{wallet_id}/utxos/lock':
    parameters:
      - $ref: '#/components/parameters/walletIdParam'
    post:
      tags:
        - Wallets
      operationId: lock_utxos
      summary: Lock UTXOs
      description: |
        This operation locks the UTXOs with specified transaction hashes. Locked UTXOs cannot be transferred until unlocked.

        <Note>This operation is applicable to MPC Wallets only.</Note>
      security:
        - CoboAuth: [ ]
        - OAuth2:
            - 'mpc_organization_controlled_wallet:withdraw'
            - 'mpc_user_controlled_wallet:withdraw'
      requestBody:
        $ref: '#/components/requestBodies/lockUtxosBody'
      responses:
        '201':
          $ref: '#/components/responses/lockUtxoResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/wallets/{wallet_id}/utxos/unlock':
    parameters:
      - $ref: '#/components/parameters/walletIdParam'
    post:
      tags:
        - Wallets
      operationId: unlock_utxos
      summary: Unlock UTXOs
      description: |
        This operation unlocks the UTXOs with specified transaction hashes. Locked UTXOs cannot be transferred until unlocked.

        <Note>This operation is applicable to MPC Wallets only.</Note>
      security:
        - CoboAuth: [ ]
        - OAuth2:
            - 'mpc_organization_controlled_wallet:withdraw'
            - 'mpc_user_controlled_wallet:withdraw'
      requestBody:
        $ref: '#/components/requestBodies/lockUtxosBody'
      responses:
        '201':
          $ref: '#/components/responses/lockUtxoResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/wallets/{wallet_id}/max_transferable_value':
    get:
      tags:
        - Wallets
      operationId: get_max_transferable_value
      summary: Get maximum transferable value
      description: |
        This operation retrieves the maximum amount that you can transfer from a wallet or a specified wallet address, along with the corresponding transaction fee.

        You must specify `to_address` in your query because it affects the transaction fee.
      security:
        - CoboAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/walletIdParam'
        - $ref: '#/components/parameters/requiredTokenIdParam'
        - $ref: '#/components/parameters/requiredFeeRateParam'
        - $ref: '#/components/parameters/requiredToAddressParam'
        - $ref: '#/components/parameters/optionalFromAddressParam'
      responses:
        '200':
          $ref: '#/components/responses/maxTransferableValueResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/wallets/{wallet_id}/addresses':
    parameters:
      - $ref: '#/components/parameters/walletIdParam'
    post:
      tags:
        - Wallets
      operationId: create_address
      summary: Create addresses in wallet
      description: |
        This operation generates one or more addresses within a specified wallet.

        <Note>This operation is applicable to Custodial Wallets and MPC Wallets only.</Note>
      security:
        - CoboAuth: [ ]
        - OAuth2:
            - 'custodial_asset_wallet:add'
            - 'mpc_organization_controlled_wallet:add'
            - 'mpc_user_controlled_wallet:add'
      requestBody:
        $ref: '#/components/requestBodies/createAddressBody'
      responses:
        '201':
          $ref: '#/components/responses/createAddressResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
    get:
      tags:
        - Wallets
      operationId: list_addresses
      summary: List wallet addresses
      description: |
        This operation retrieves a list of addresses within a specified wallet.
      security:
        - CoboAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/optionalChainIdListParam'
        - $ref: '#/components/parameters/optionalAddressListParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          $ref: '#/components/responses/getAddressesResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/wallets/{wallet_id}/addresses/{address}':
    parameters:
      - $ref: '#/components/parameters/walletIdParam'
      - $ref: '#/components/parameters/addressParam'
    get:
      tags:
        - Wallets
      operationId: get_address
      summary: Get address information
      description: |
        This operation retrieves the detailed information about a specified address within a wallet.
      security:
        - CoboAuth: [ ]
      responses:
        '200':
          $ref: '#/components/responses/getAddressResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/wallets/{wallet_id}/addresses/{address}/tokens':
    parameters:
      - $ref: '#/components/parameters/walletIdParam'
      - $ref: '#/components/parameters/addressParam'
    get:
      tags:
        - Wallets
      operationId: list_token_balances_for_address
      summary: List token balances by address
      description: |
        The operation retrieves a list of token balances for a specified address within a wallet. 

        <Note>This operation is applicable to MPC Wallets and Smart Contract Wallets only.</Note>
      security:
        - CoboAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/optionalTokenListIdParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          $ref: '#/components/responses/getTokenBalancesResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/wallets/{wallet_id}/tokens':
    get:
      tags:
        - Wallets
      operationId: list_token_balances_for_wallet
      summary: List token balances by wallet
      description: |
        The operation retrieves a list of token balances within a specified wallet.

        <Note>This operation is not applicable to Exchange Wallets.</Note>
      security:
        - CoboAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/walletIdParam'
        - $ref: '#/components/parameters/optionalTokenListIdParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          $ref: '#/components/responses/getTokenBalancesResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /wallets/check_address_validity:
    get:
      tags:
        - Wallets
      operationId: check_address_validity
      summary: Check address validity
      description: |
        This operation verifies if a given address is valid for a specific chain.
      security:
        - CoboAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/requiredChainIdParam'
        - $ref: '#/components/parameters/requiredAddressParam'
      responses:
        '200':
          $ref: '#/components/responses/checkAddressValidityResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /wallets/check_addresses_validity:
    get:
      tags:
        - Wallets
      operationId: check_addresses_validity
      summary: Check addresses validity
      description: |
        This operation verifies if given addresses are valid for a specific chain.
      security:
        - CoboAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/requiredChainIdParam'
        - $ref: '#/components/parameters/requiredAddressListParam'
      responses:
        '200':
          $ref: '#/components/responses/checkAddressesValidityResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /wallets/check_loop_transfers:
    get:
      tags:
        - Wallets
      operationId: check_loop_transfers
      summary: Check Loop transfers
      description: |
        This operation verifies if the transactions from a given source wallet to a list of destination addresses can be executed as Loop transfers. 

        For more information about Loop, see [Loop's website](https://loop.top/).
      security:
        - CoboAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/requiredTokenIdParam'
        - $ref: '#/components/parameters/requiredSourceWalletIdParam'
        - $ref: '#/components/parameters/requiredDestinationAddressesParam'
      responses:
        '200':
          $ref: '#/components/responses/checkLoopTransfersResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /wallets/mpc/cobo_key_share_holders:
    get:
      tags:
        - Wallets - MPC Wallets
      operationId: list_cobo_key_holders
      summary: List all Cobo key share holders
      description: |
        This operation retrieves a list of all Cobo key share holders and their information. 

        <Info>When using this operation, `type` will only return `Cobo` and will never return `Mobile` or `API`.</Info>
      security:
        - CoboAuth: [ ]
      responses:
        '200':
          $ref: '#/components/responses/getCoboKeyHoldersResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /wallets/mpc/projects:
    post:
      tags:
        - Wallets - MPC Wallets
      operationId: create_mpc_project
      summary: Create project
      description: |
        This operation creates a project.

        <Note>This operation applies to MPC Wallets (User-Controlled Wallets) only.</Note>
      security:
        - CoboAuth: [ ]
        - OAuth2:
            - 'mpc_user_controlled_project:manage'
      requestBody:
        $ref: '#/components/requestBodies/createMpcProjectBody'
      responses:
        '201':
          $ref: '#/components/responses/createMpcProjectResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
    get:
      tags:
        - Wallets - MPC Wallets
      operationId: list_mpc_projects
      summary: List all projects
      description: |
        This operation retrieves a list of all projects.

        <Note>This operation applies to MPC Wallets (User-Controlled Wallets) only.</Note>
      security:
        - CoboAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          $ref: '#/components/responses/getMpcProjectsResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/wallets/mpc/projects/{project_id}':
    get:
      tags:
        - Wallets - MPC Wallets
      operationId: get_mpc_project_by_id
      summary: Get project information
      description: |
        This operation retrieves detailed information about a project.
        <Note>This operation applies to MPC Wallets (User-Controlled Wallets) only.</Note>
      security:
        - CoboAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/projectIdParam'
      responses:
        '200':
          $ref: '#/components/responses/getMpcProjectResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
    put:
      tags:
        - Wallets - MPC Wallets
      operationId: update_mpc_project_by_id
      summary: Update project name
      description: |
        This operation updates a project's name.

        <Note>This operation applies to MPC Wallets (User-Controlled Wallets) only.</Note>
      security:
        - CoboAuth: [ ]
        - OAuth2:
            - 'mpc_user_controlled_project:manage'
      parameters:
        - $ref: '#/components/parameters/projectIdParam'
      requestBody:
        $ref: '#/components/requestBodies/updateProjectBody'
      responses:
        '200':
          $ref: '#/components/responses/getMpcProjectResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /wallets/mpc/vaults:
    post:
      tags:
        - Wallets - MPC Wallets
      operationId: create_mpc_vault
      summary: Create vault
      description: |
        This operation creates a vault.
      security:
        - CoboAuth: [ ]
        - OAuth2:
            - 'mpc_organization_controlled_vault:manage'
            - 'mpc_user_controlled_vault:manage'
      requestBody:
        $ref: '#/components/requestBodies/createMpcVaultBody'
      responses:
        '201':
          $ref: '#/components/responses/createMpcVaultResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
    get:
      tags:
        - Wallets - MPC Wallets
      operationId: list_mpc_vaults
      summary: List all vaults
      description: |
        This operation retrieves a list of all vaults. You can filter the result by project ID.

        **Notes for query parameters**:
        1. `project_id` is required when `vault_type` is set to `User-Controlled`.
        2. `project_id` must be left blank when `vault_type` is set to `Org-Controlled`.
      security:
        - CoboAuth: [ ]
      parameters:
        - name: vault_type
          in: query
          description: |
            The vault type. Possible values include:
            - `Org-Controlled`: This vault is a collection of [Organization-Controlled Wallets](https://manuals.cobo.com/en/portal/mpc-wallets/introduction#organization-controlled-wallets).

            - `User-Controlled`: This vault is a collection of [User-Controlled Wallets](https://manuals.cobo.com/en/portal/mpc-wallets/introduction#user-controlled-wallets).
          required: true
          schema:
            $ref: '#/components/schemas/MPCVaultType'
        - $ref: '#/components/parameters/optionalProjectIdQueryParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          $ref: '#/components/responses/getMpcVaultsResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/wallets/mpc/vaults/{vault_id}':
    get:
      tags:
        - Wallets - MPC Wallets
      operationId: get_mpc_vault_by_id
      summary: Get vault information
      description: |
        This operation retrieves detailed information about a vault.
      security:
        - CoboAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/vaultIdParam'
      responses:
        '200':
          $ref: '#/components/responses/getMpcVaultResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
    put:
      tags:
        - Wallets - MPC Wallets
      operationId: update_mpc_vault_by_id
      summary: Update vault name
      description: |
        This operation updates a vault's name.
      security:
        - CoboAuth: [ ]
        - OAuth2:
            - 'mpc_organization_controlled_vault:manage'
            - 'mpc_user_controlled_vault:manage'
      parameters:
        - $ref: '#/components/parameters/vaultIdParam'
      requestBody:
        $ref: '#/components/requestBodies/updateVaultBody'
      responses:
        '200':
          $ref: '#/components/responses/putVaultResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/wallets/mpc/vaults/{vault_id}/key_share_holder_groups':
    post:
      tags:
        - Wallets - MPC Wallets
      operationId: create_key_share_holder_group
      summary: Create key share holder group
      description: |
        This operation creates a key share holder group for a specified vault.
      security:
        - CoboAuth: [ ]
        - OAuth2:
            - 'mpc_organization_controlled_key_group:manage'
            - 'mpc_user_controlled_key_group:manage'
      parameters:
        - $ref: '#/components/parameters/vaultIdParam'
      requestBody:
        $ref: '#/components/requestBodies/createKeyShareHolderGroupBody'
      responses:
        '201':
          $ref: '#/components/responses/createKeyShareHolderGroupsResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
    get:
      tags:
        - Wallets - MPC Wallets
      operationId: list_key_share_holder_groups
      summary: List all key share holder groups
      description: |
        This operation retrieves all key share holder groups under a specified vault. You can filter the result by group type.
      security:
        - CoboAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/vaultIdParam'
        - $ref: '#/components/parameters/optionalKeyShareHolderGroupTypeParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          $ref: '#/components/responses/getKeyShareHolderGroupsResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/wallets/mpc/vaults/{vault_id}/key_share_holder_groups/{key_share_holder_group_id}':
    get:
      tags:
        - Wallets - MPC Wallets
      operationId: get_key_share_holder_group_by_id
      summary: Get key share holder group information
      description: |
        This operation retrieves detailed information about a specified key share holder group.
      security:
        - CoboAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/vaultIdParam'
        - $ref: '#/components/parameters/keyShareHolderGroupIdParam'
      responses:
        '200':
          $ref: '#/components/responses/getKeyShareHolderGroupResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
    put:
      tags:
        - Wallets - MPC Wallets
      operationId: update_key_share_holder_group_by_id
      summary: Update key share holder group
      description: |
        This operation updates a specified active [Signing Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups). For example, you can use this operation to upgrade a Signing Group to the [Main Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups).
      security:
        - CoboAuth: [ ]
        - OAuth2:
            - 'mpc_organization_controlled_key_group:manage'
            - 'mpc_user_controlled_key_group:manage'
      parameters:
        - $ref: '#/components/parameters/vaultIdParam'
        - $ref: '#/components/parameters/keyShareHolderGroupIdParam'
      requestBody:
        $ref: '#/components/requestBodies/updateGroupBody'
      responses:
        '200':
          $ref: '#/components/responses/putKeyShareHolderGroupResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/wallets/mpc/vaults/{vault_id}/key_share_holder_groups/{key_share_holder_group_id}/delete':
    post:
      tags:
        - Wallets - MPC Wallets
      operationId: delete_key_share_holder_group_by_id
      summary: Delete key share holder group
      description: This operation deletes a specified key share holder group.
      security:
        - CoboAuth: [ ]
        - OAuth2:
            - 'mpc_organization_controlled_key_group:manage'
            - 'mpc_user_controlled_key_group:manage'
      parameters:
        - $ref: '#/components/parameters/vaultIdParam'
        - $ref: '#/components/parameters/keyShareHolderGroupIdParam'
      responses:
        '201':
          $ref: '#/components/responses/deleteKeyShareHolderGroupResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/wallets/mpc/vaults/{vault_id}/tss_requests':
    post:
      tags:
        - Wallets - MPC Wallets
      operationId: create_tss_request
      summary: Create TSS request
      description: |
        This operation creates a TSS request under a specified vault. You can use this operation to perform actions such as key generation and recovery.
      security:
        - CoboAuth: [ ]
        - OAuth2:
            - 'mpc_organization_controlled_tss_request:manage'
            - 'mpc_user_controlled_tss_request:manage'
      parameters:
        - $ref: '#/components/parameters/vaultIdParam'
      requestBody:
        $ref: '#/components/requestBodies/createTssRequestBody'
      responses:
        '201':
          description: mpc vault successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TSSRequest'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
    get:
      tags:
        - Wallets - MPC Wallets
      operationId: list_tss_requests
      summary: List TSS requests
      description: |
        This operation retrieves a list of TSS requests and their details.
      security:
        - CoboAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/vaultIdParam'
        - $ref: '#/components/parameters/requiredKeyShareHolderGroupIdParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          description: Successfully retrieved TSS request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/TSSRequest'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/wallets/mpc/vaults/{vault_id}/tss_requests/{tss_request_id}':
    get:
      tags:
        - Wallets - MPC Wallets
      operationId: get_tss_request_by_id
      summary: Get TSS request
      description: |
        This operation retrieves detailed information about a TSS request.
      security:
        - CoboAuth: [ ]
        - OAuth2:
            - 'mpc_organization_controlled_tss_request:manage'
            - 'mpc_user_controlled_tss_request:manage'
      parameters:
        - $ref: '#/components/parameters/vaultIdParam'
        - $ref: '#/components/parameters/tssRequestIdParam'
      responses:
        '200':
          $ref: '#/components/responses/getTssRequestResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/wallets/mpc/vaults/{vault_id}/tss_requests/{tss_request_id}/cancel':
    post:
      tags:
        - Wallets - MPC Wallets
      operationId: cancel_tss_request_by_id
      summary: Cancel TSS request
      description: |
        This operation cancels a TSS request.
      security:
        - CoboAuth: [ ]
        - OAuth2:
            - 'mpc_organization_controlled_tss_request:manage'
            - 'mpc_user_controlled_tss_request:manage'
      parameters:
        - $ref: '#/components/parameters/vaultIdParam'
        - $ref: '#/components/parameters/tssRequestIdParam'
      responses:
        '200':
          $ref: '#/components/responses/putTssRequestResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /wallets/exchanges:
    get:
      tags:
        - Wallets - Exchange Wallet
      operationId: list_exchanges
      summary: List supported exchanges
      description: 'This operation retrieves the information about the exchanges supported by Cobo''s Exchange Wallets, including exchange IDs and trading account types.'
      security:
        - CoboAuth: [ ]
      responses:
        '200':
          $ref: '#/components/responses/getExchangeSettingsResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/wallets/exchanges/{exchange_id}/assets':
    parameters:
      - $ref: '#/components/parameters/exchangeIdParam'
    get:
      tags:
        - Wallets - Exchange Wallet
      operationId: list_supported_assets_for_exchange
      summary: List supported assets
      description: This operation retrieves all the assets supported by a specified exchange.
      security:
        - CoboAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          $ref: '#/components/responses/getAssetsResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/wallets/exchanges/{exchange_id}/assets/{asset_id}/chains':
    parameters:
      - $ref: '#/components/parameters/exchangeIdParam'
      - name: asset_id
        in: path
        required: true
        description: '(This concept applies to Exchange Wallets only) The asset ID. An asset ID is the unique identifier of the asset held within your linked exchange account. You can get the ID of the assets supported by an exchanges by calling [List supported assets](https://www.cobo.com/developers/v2/api-references/wallets--exchange-wallet/list-supported-assets).'
        schema:
          type: string
        example: USDT
    get:
      tags:
        - Wallets - Exchange Wallet
      operationId: list_supported_chains_for_exchange
      summary: List supported chains
      description: |
        This operation retrieves all the chains supported by a specified exchange for a given asset. 

        You can use this operation to confirm whether you can transfer an asset from or to your Exchange Wallet when using a specific chain.
      security:
        - CoboAuth: [ ]
      responses:
        '200':
          $ref: '#/components/responses/getChainsByAssetIdResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/wallets/{wallet_id}/exchanges/assets':
    parameters:
      - $ref: '#/components/parameters/walletIdParam'
    get:
      tags:
        - Wallets - Exchange Wallet
      operationId: list_asset_balances_for_exchange_wallet
      summary: List asset balances
      description: |
        This operation retrieves the asset balances in a specified Exchange Wallet. You can filter the results by trading account type or asset ID.
      security:
        - CoboAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/optionalTradingAccountTypeListParam'
        - $ref: '#/components/parameters/optionalAssetIdListParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          $ref: '#/components/responses/getAssetBalancesResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /transactions/estimate_fee:
    post:
      tags:
        - Transactions
      operationId: estimate_fee
      summary: Estimate transaction fee
      description: |
        This operation estimates the transaction fee rates of a token transfer or a contract call based on three different transaction speeds (slow, recommended, and fast), considering factors such as network congestion and transaction complexity.

        You need to specify the transaction information, including the request ID, request type, source address, destination address, and token ID of the transaction fee.

        The response can contain different properties based on the transaction fee model used by the chain, including EIP-1559 fee model, legacy fee model, UTXO fee model, and fixed fee model.
      security:
        - CoboAuth: [ ]
      requestBody:
        $ref: '#/components/requestBodies/estimateFeeBody'
      responses:
        '201':
          $ref: '#/components/responses/estimateFeeResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /transactions/transfer:
    post:
      tags:
        - Transactions
      operationId: create_transfer_transaction
      summary: Transfer token
      description: |
        The operation transfers your assets from a wallet created on Cobo Protal to another address.

        You need to specify details such as the sender address and recipient address, token ID, and the amount to transfer. You can specify the fee-related properties to limit the transaction fee. A transaction request for tracking is returned upon successful operation.

        <Note>You can transfer tokens to multiple addresses only if you use MPC Wallets as the transaction source. You should use the <code>utxo_outputs</code> property to specify the destination addresses.</Note>

        <Info>If you initiate a transaction from a Smart Contract Wallet, a relevant transaction will be triggered from the Delegate to the Cobo Safe's address of the Smart Contract Wallet, with a transfer amount of <code>0</code>.</Info>
      security:
        - CoboAuth: [ ]
        - OAuth2:
            - 'custodial_asset_wallet:withdraw'
            - 'mpc_organization_controlled_wallet:withdraw'
            - 'mpc_user_controlled_wallet:withdraw'
      requestBody:
        $ref: '#/components/requestBodies/createTransferBody'
      responses:
        '201':
          $ref: '#/components/responses/createTransactionRequestResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /transactions/contract_call:
    post:
      tags:
        - Transactions
      operationId: create_contract_call_transaction
      summary: Call smart contract
      description: |
        This operation creates a transaction to interact with a smart contract on the blockchain.

        You need to provide details such as the source address, destination address, and the calldata. You can specify the fee-related properties to limit the transaction fee. A transaction request for tracking is returned upon successful operation.

        <Note>Currently, this operation only applies to the transactions from MPC Wallets or Smart Contract Wallets on the blockchains that have a similar architecture to Ethereum.</Note>

        <Info>If you initiate a transaction from a Smart Contract Wallet, a relevant transaction will be triggered from the Delegate to the Cobo Safe's address of the Smart Contract Wallet, with a transfer amount of <code>0</code>.</Info>
      security:
        - CoboAuth: [ ]
        - OAuth2:
            - 'mpc_organization_controlled_wallet:contract_call'
            - 'mpc_user_controlled_wallet:contract_call'
      requestBody:
        $ref: '#/components/requestBodies/createSmartContractCallBody'
      responses:
        '201':
          $ref: '#/components/responses/createTransactionRequestResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /transactions/message_sign:
    post:
      tags:
        - Transactions
      operationId: create_message_sign_transaction
      summary: Sign message
      description: |
        This operation creates a transaction to sign the provided message using cryptographic techniques.

        In some scenarios, you want to sign a message for identity authentication or transaction approval. You need to provide details such as the source address, destination address, and the message to be signed. A transaction request for tracking is returned upon successful operation.

        You can get the signature result by calling [Get transaction information](https://www.cobo.com/developers/v2/api-references/transactions/get-transaction-information). 

        <Note>This operation only applies to transactions from MPC Wallets.</Note>
      security:
        - CoboAuth: [ ]
        - OAuth2:
            - 'mpc_organization_controlled_wallet:message_sign'
            - 'mpc_user_controlled_wallet:message_sign'
      requestBody:
        $ref: '#/components/requestBodies/createMessageSignBody'
      responses:
        '201':
          $ref: '#/components/responses/createTransactionRequestResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /transactions:
    get:
      tags:
        - Transactions
      operationId: list_transactions
      summary: List all transactions
      description: |
        This operation retrieves all the transactions under your organization.

        You can filter the results by request ID, Cobo ID, transaction ID, transaction hash, type, status, and timestamps. You can also paginate and sort your query results.
      security:
        - CoboAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/optionalRequestIdParam'
        - $ref: '#/components/parameters/optionalCoboIdParam'
        - name: transaction_ids
          in: query
          required: false
          description: 'A list of transaction IDs, separated by comma.'
          schema:
            type: string
            format: uuid
          example: 'f47ac10b-58cc-4372-a567-0e02b2c3d479,557918d2-632a-4fe1-932f-315711f05fe3'
        - name: transaction_hashes
          in: query
          required: false
          description: 'A list of transaction hashes, separated by comma.'
          schema:
            type: string
          example: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
        - $ref: '#/components/parameters/optionalTransactionTypeListParam'
        - $ref: '#/components/parameters/optionalTransactionStatusListParam'
        - $ref: '#/components/parameters/optionalWalletListIdParam'
        - $ref: '#/components/parameters/optionalChainIdListParam'
        - $ref: '#/components/parameters/optionalTokenListIdParam'
        - $ref: '#/components/parameters/optionalAssetIdListParam'
        - $ref: '#/components/parameters/optionalVaultIdQueryParam'
        - $ref: '#/components/parameters/optionalProjectIdQueryParam'
        - $ref: '#/components/parameters/optionalMinCreatedTimestampParam'
        - $ref: '#/components/parameters/optionalMaxCreatedTimestampParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          $ref: '#/components/responses/getTransactionsResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/transactions/{transaction_id}':
    parameters:
      - $ref: '#/components/parameters/transactionIdParam'
    get:
      tags:
        - Transactions
      operationId: get_transaction_by_id
      summary: Get transaction information
      description: |
        This operation retrieves detailed information about a specified transaction, such as the transaction status, source address, destination address, and timestamp.
      security:
        - CoboAuth: [ ]
      responses:
        '200':
          $ref: '#/components/responses/getTransactionByIdResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/transactions/{transaction_id}/resend':
    parameters:
      - $ref: '#/components/parameters/transactionIdParam'
    post:
      tags:
        - Transactions
      operationId: resend_transaction_by_id
      summary: Resend transaction
      description: |
        This operation resends a specified transaction. Resending a transaction initiates a new attempt to process the transaction that failed previously. A transaction can be resent if its status is `failed`.

        A transaction request for tracking is returned upon successful operation.
        <Note>This operation only applies to transactions from MPC Wallets in the SOL token.</Note>
      security:
        - CoboAuth: [ ]
      requestBody:
        $ref: '#/components/requestBodies/resendTransactionBody'
      responses:
        '201':
          $ref: '#/components/responses/createTransactionRequestResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/transactions/{transaction_id}/cancel':
    parameters:
      - $ref: '#/components/parameters/transactionIdParam'
    post:
      tags:
        - Transactions
      operationId: cancel_transaction_by_id
      summary: Cancel transaction
      description: |
        This operation cancels a specified transaction. A transaction can be cancelled if its status is either of the following:
        - `Submitted`
        - `PendingScreening`
        - `PendingAuthorization`
        - `PendingSignature` 

        A transaction request for tracking is returned upon successful operation.
        <Note>This operation only applies to transactions from MPC Wallets and Smart Contract Wallets.</Note>
      security:
        - CoboAuth: [ ]
      responses:
        '201':
          $ref: '#/components/responses/createTransactionRequestResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/transactions/{transaction_id}/drop':
    parameters:
      - $ref: '#/components/parameters/transactionIdParam'
    post:
      tags:
        - Transactions
      operationId: drop_transaction_by_id
      summary: Drop transaction
      description: |
        This operation drops a specified transaction. 

        Dropping a transaction will trigger an Replace-By-Fee (RBF) transaction which is a new version of the original transaction. It has a higher transaction fee to incentivize miners to prioritize its confirmation over the original one. A transaction can be dropped if its status is `Broadcasting`.

        <ul>
        <li>For EVM chains, this RBF transaction has a transfer amount of `0` and the sending address is the same as the receiving address.</li>
        <li>For UTXO chains, this RBF transaction has a transfer amount of `0` and the destination address is the same as the change address in the original transaction.</li>
        </ul>

        A transaction request for tracking is returned upon successful operation.

        <Note>This operation only applies to transactions from MPC Wallets and Smart Contract Wallets. It does not apply to transactions on the following chains: VET, TRON, TVET, SOL, and TON.</Note>

        <Info>If you drop a transaction from a Smart Contract Wallet, two RBF transactions will be triggered, one for the transaction from the Smart Contract Wallet, and the other for the transaction from the Delegate.</Info>
      security:
        - CoboAuth: [ ]
      requestBody:
        $ref: '#/components/requestBodies/feeRequestBody'
      responses:
        '201':
          $ref: '#/components/responses/createTransactionRequestResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/transactions/{transaction_id}/speedup':
    parameters:
      - $ref: '#/components/parameters/transactionIdParam'
    post:
      tags:
        - Transactions
      operationId: speedup_transaction_by_id
      summary: Speed up transaction
      description: |
        This operation accelerates a specified transaction. 

        Speeding up a transaction will trigger an Replace-By-Fee (RBF) transaction which is a new version of the original transaction. It shares the same inputs but has a higher transaction fee to incentivize miners to prioritize its confirmation over the previous one. A transaction can be accelerated if its status is `Broadcasting`.

        A transaction request for tracking is returned upon successful operation.

        <Note>This operation only applies to transactions from MPC Wallets and Smart Contract Wallets. It does not apply to transactions on the following chains: VET, TRON, TVET, SOL, and TON.</Note>

        <Info>If you speed up a transaction from a Smart Contract Wallet, two RBF transactions will be triggered, one for the transaction from the Smart Contract Wallet, and the other for the transaction from the Delegate.</Info>
      security:
        - CoboAuth: [ ]
      requestBody:
        $ref: '#/components/requestBodies/feeRequestBody'
      responses:
        '201':
          $ref: '#/components/responses/createTransactionRequestResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /oauth/token:
    get:
      tags:
        - OAuth
      operationId: get_token
      summary: Get access token
      description: |
        <Note>This operation is only applicable to Cobo Portal App developers. To call this operation, you need to use the OAuth authentication method that requires an app key.</Note>
        This operation allows Cobo Portal Apps to get an access token and a refresh token with a specified App ID, Organization ID, and grant type. 

        Access tokens allow the app to signal to the WaaS service that it has received permission to access specific resources of the app user's [organization](https://manuals.cobo.com/en/portal/organization/introduction). Once the app has been granted permission by the organization's admin, it can use this operation to obtain both an access token and a refresh token.

        For security purposes, access tokens expire after a certain period. Once they expire, the app needs to call [Refresh token](https://www.cobo.com/developers/v2/api-references/oauth/refresh-access-token) to get a new access token and a new refresh token. 
      security:
        - CoboAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/ClientIdRequiredParam'
        - $ref: '#/components/parameters/OrgIdRequiredParam'
        - $ref: '#/components/parameters/GrantTypeRequiredParam'
      responses:
        '200':
          $ref: '#/components/responses/getTokenResponse'
        4XX:
          $ref: '#/components/responses/oauthErrorResponse'
        5XX:
          $ref: '#/components/responses/internalServerError'
    post:
      tags:
        - OAuth
      operationId: refresh_token
      summary: Refresh access token
      description: |
        <Note>This operation is only applicable to Cobo Portal Apps developers. To call this operation, you need to use the OAuth authentication method that requires an app key.</Note>
        This operation allows Cobo Portal Apps to obtain a new access token with a specified App ID, grant type and a refresh token. 

        For security purposes, access tokens expire after a certain period. Once they expire, the app needs to call this operation to get a new access token and a new refresh token. 
      security:
        - CoboAuth: [ ]
      requestBody:
        $ref: '#/components/requestBodies/tokenEndpointBody'
      responses:
        '200':
          $ref: '#/components/responses/refreshTokenResponse'
        4XX:
          $ref: '#/components/responses/oauthErrorResponse'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /webhooks/endpoints:
    get:
      tags:
        - Developers - Webhooks
      summary: List webhook endpoints
      description: This operation retrieves the information of all webhook endpoints registered under your organization. You can filter the result by endpoint status and the subscribed event type.
      operationId: list_webhook_endpoints
      parameters:
        - in: query
          name: status
          schema:
            $ref: '#/components/schemas/WebhookEndpointStatus'
          required: false
        - in: query
          name: event_type
          schema:
            $ref: '#/components/schemas/WebhookEventType'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          $ref: '#/components/responses/listWebhookEndpointsResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
    post:
      tags:
        - Developers - Webhooks
      summary: Register webhook endpoint
      description: This operation registers a new webhook endpoint for your organization.
      operationId: create_webhook_endpoint
      security:
        - CoboAuth: [ ]
        - OAuth2:
            - 'webhook_url:edit'
      requestBody:
        $ref: '#/components/requestBodies/createWebhookEndpointBody'
      responses:
        '201':
          $ref: '#/components/responses/createWebhookEndpointResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/webhooks/endpoints/{endpoint_id}':
    parameters:
      - $ref: '#/components/parameters/endpointIdParam'
    get:
      tags:
        - Developers - Webhooks
      summary: Get webhook endpoint information
      description: This operation retrieves the information of a specified webhook endpoint.
      operationId: get_webhook_endpoint_by_id
      responses:
        '200':
          $ref: '#/components/responses/getWebhookEndpointResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
    put:
      tags:
        - Developers - Webhooks
      summary: Update webhook endpoint
      description: This operation updates the information of a specified webhook endpoint.
      operationId: update_webhook_endpoint_by_id
      security:
        - CoboAuth: [ ]
        - OAuth2:
            - 'webhook_url:edit'
      requestBody:
        $ref: '#/components/requestBodies/updateWebhookBody'
      responses:
        '200':
          $ref: '#/components/responses/updateWebhookEndpointResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /webhooks/events/definitions:
    get:
      tags:
        - Developers - Webhooks
      summary: Get webhook event types
      description: This operation retrieves all supported webhook event types.
      operationId: list_webhook_event_definitions
      responses:
        '200':
          $ref: '#/components/responses/getWebhookEventDefinitionsResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/webhooks/endpoints/{endpoint_id}/events':
    get:
      tags:
        - Developers - Webhooks
      summary: List all webhook events
      description: |
        This operation retrieves a list of webhook events that have occurred within the last 30 days.

        <Note>The request will only return webhook events that have occurred to the wallets associated with your current API key. For example, if the current API key is only associated with Custodial Wallets, any webhook events that have occurred to an MPC Wallet will not be retrieved with the current API key.</Note>
      operationId: list_webhook_events
      parameters:
        - $ref: '#/components/parameters/endpointIdParam'
        - in: query
          name: status
          schema:
            $ref: '#/components/schemas/WebhookEventStatus'
          required: false
          example: Success
        - in: query
          name: type
          schema:
            $ref: '#/components/schemas/WebhookEventType'
          required: false
          example: wallets.transaction.updated
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          $ref: '#/components/responses/listWebhookEventsResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/webhooks/endpoints/{endpoint_id}/events/{event_id}':
    parameters:
      - $ref: '#/components/parameters/webhookEventIdParam'
      - $ref: '#/components/parameters/endpointIdParam'
    get:
      tags:
        - Developers - Webhooks
      summary: Retrieve event information
      description: |
        This operation retrieves the information of a webhook event by the event ID.
      operationId: get_webhook_event_by_id
      responses:
        '200':
          $ref: '#/components/responses/getWebhookEventResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/webhooks/endpoints/{endpoint_id}/events/{event_id}/logs':
    parameters:
      - $ref: '#/components/parameters/webhookEventIdParam'
      - $ref: '#/components/parameters/endpointIdParam'
      - $ref: '#/components/parameters/limitParam'
      - $ref: '#/components/parameters/beforeParam'
      - $ref: '#/components/parameters/afterParam'
    get:
      tags:
        - Developers - Webhooks
      summary: List webhook event logs
      description: |
        This operation retrieves a list of webhook event logs by event ID. Each retry will generate a separate event log.
      operationId: list_webhook_event_logs
      responses:
        '200':
          $ref: '#/components/responses/getWebhookEventLogsResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/webhooks/endpoints/{endpoint_id}/events/{event_id}/retry':
    parameters:
      - $ref: '#/components/parameters/webhookEventIdParam'
      - $ref: '#/components/parameters/endpointIdParam'
    post:
      tags:
        - Developers - Webhooks
      summary: Retry event
      description: |
        This operation retries delivering a webhook event with the specified event ID. You can only retry delivering a webhook event in the `Retrying` or `Failed` status.
      operationId: retry_webhook_event_by_id
      security:
        - CoboAuth: [ ]
        - OAuth2:
            - 'webhook:resend'
      responses:
        '201':
          $ref: '#/components/responses/retryWebhookEventResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
components:
  schemas:
    Pagination:
      type: object
      description: The pagination information of the returned data.
      required:
        - before
        - after
        - total_count
      properties:
        before:
          type: string
          example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
          description: |
            An object ID that serves as a starting point for retrieving data in reverse chronological order for the next request. 

            If this property is empty, it means that you have reached the start of the data records.
        after:
          type: string
          example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
          description: |
            An object ID that acts as a starting point for retrieving data in chronological order for the next request.

            If this property is empty, it means that you have reached the end of the data records.
        total_count:
          type: integer
          example: 10000
          description: 'The total number of records that match the query, across all pages.'
    ErrorResponse:
      type: object
      description: The response of a failed request.
      required:
        - error_code
        - error_message
        - error_id
      properties:
        error_code:
          type: integer
          description: The error code.
        error_message:
          type: string
          description: The error description.
        error_id:
          type: string
          description: The error log ID. You can provide the error ID when submitting a ticket to help Cobo to locate the issue.
          example: 0b6ddf19083c4bd1a9ca01bec44b24dd
    AssetInfo:
      type: object
      description: The asset information.
      required:
        - asset_id
      properties:
        asset_id:
          type: string
          description: The asset ID. An asset ID is the unique identifier of the asset held within your linked exchange account.
          example: USDT
        display_code:
          type: string
          description: The asset symbol. You can use the value for display purposes.
          example: USDT
        description:
          type: string
          description: The description of the asset.
          example: Tether USDT
        icon_url:
          type: string
          description: The URL of the asset icon.
          example: 'https://d.cobo.com/public/logos/USDT.png'
    TokenInfo:
      type: object
      description: The token information.
      required:
        - token_id
        - chain_id
      properties:
        token_id:
          type: string
          description: 'The token ID, which is the unique identifier of a token. You can retrieve the IDs of all the tokens you can use by calling [List enabled tokens](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-tokens).'
          example: ETH_USDT
        chain_id:
          type: string
          description: The ID of the chain on which the token operates.
          example: ETH
        asset_id:
          type: string
          description: (This concept applies to Exchange Wallets only) The asset ID. An asset ID is the unique identifier of the asset held within your linked exchange account.
          example: USDT
        symbol:
          type: string
          description: 'The token symbol, which is the abbreviated name of a token.'
          example: USDT
        name:
          type: string
          description: 'The token name, which is the full name of a token.'
          example: Tether USDT
        decimal:
          type: integer
          description: The token decimal.
          example: 18
        icon_url:
          type: string
          description: The URL of the token icon.
          example: 'https://d.cobo.com/public/logos/USDT.png'
        token_address:
          type: string
          description: 'The token address, if applicable.'
          example: '0xdAC17F958D2ee523a2206206994597C13D831ec7'
        fee_token_id:
          type: string
          description: The fee token ID. A fee token is the token with which you pay transaction fees.
          example: ETH
        can_deposit:
          type: boolean
          description: Whether deposits are enabled for this token.
          example: true
        can_withdraw:
          type: boolean
          description: Whether withdrawals are enabled for this token.
          example: true
    ExtendedTokenInfo:
      type: object
      description: 'The token information, including whether the token can be deposited or withdrawn.'
      allOf:
        - type: object
          properties:
            can_deposit:
              type: boolean
              description: |
                Whether the token can be deposited.

                - `true`: The token can be deposited.

                - `false`: The token cannot be deposited.
              default: false
              example: false
            can_withdraw:
              type: boolean
              description: |
                Whether the token can be withdrawn.

                - `true`: The token can be withdrawn.

                - `false`: The token cannot be withdrawn.
              default: false
              example: false
        - $ref: '#/components/schemas/TokenInfo'
    ChainInfo:
      type: object
      description: The chain information.
      required:
        - chain_id
      properties:
        chain_id:
          type: string
          description: 'The chain ID, which is the unique identifier of a blockchain. You can retrieve the IDs of all the chains you can use by calling [List enabled chains](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-chains).'
          example: ETH
        symbol:
          type: string
          description: 'The chain symbol, which is the abbreviated name of a chain.'
          example: ETH
        icon_url:
          type: string
          description: The URL of the chain icon.
          example: 'https://d.cobo.com/public/logos/ETH.png'
        explorer_tx_url:
          type: string
          description: The transaction URL pattern on the blockchain explorer. You can use it to concatenate the transaction URLs.
          example: 'https://etherscan.io/tx/{txn_id}'
        explorer_address_url:
          type: string
          description: The address URL pattern on the blockchain explorer. You can use it to concatenate the address URLs.
          example: 'https://etherscan.io/address/{address}'
        require_memo:
          type: boolean
          description: Whether the chain requires a memo.
          example: false
    WalletType:
      type: string
      enum:
        - Custodial
        - MPC
        - SmartContract
        - Exchange
      example: Custodial
      description: |
        The wallet type.

        - `Custodial`: [Custodial Wallets](https://manuals.cobo.com/en/portal/custodial-wallets/introduction)

        - `MPC`: [MPC Wallets](https://manuals.cobo.com/en/portal/mpc-wallets/introduction)

        - `SmartContract`: [Smart Contract Wallets](https://manuals.cobo.com/en/portal/smart-contract-wallets/introduction)

        - `Exchange`: [Exchange Wallets](https://manuals.cobo.com/en/portal/exchange-wallets/introduction)
    WalletSubtype:
      type: string
      enum:
        - Asset
        - Web3
        - Org-Controlled
        - User-Controlled
        - 'Safe{Wallet}'
        - Main
        - Sub
      example: Asset
      description: |
        The wallet subtype. Possible values include:
        - `Asset`: Custodial Wallets (Asset Wallets).
        - `Web3`: Custodial Wallets (Web3  Wallets).
        - `Org-Controlled`: MPC Wallets (Organization-Controlled Wallets).
        - `User-Controlled`: MPC Wallets (User-Controlled Wallets).
        - `Safe{Wallet}`: Smart Contract Wallets (Safe{Wallet}).
        - `Main`: Exchange Wallets (Main Account).
        - `Sub`: Exchange Wallets (Sub Account).
    SmartContractWalletType:
      type: string
      enum:
        - 'Safe{Wallet}'
      example: 'Safe{Wallet}'
      default: 'Safe{Wallet}'
      description: The Smart Contract Wallet type.
    SmartContractWalletOperationType:
      type: string
      enum:
        - CoboSafe
      example: CoboSafe
      default: CoboSafe
      description: The way you interact with the Smart Contract Wallet.
    SmartContractInitiator:
      title: Initiator Wallets
      description: The information about the initiator.
      type: object
      required:
        - wallet_id
        - address
      properties:
        wallet_id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
          description: The initiator's wallet ID.
        address:
          type: string
          example: '0x1234567890123456789012345678901234567890'
          description: 'The initiator''s wallet address. '
    ExchangeId:
      type: string
      enum:
        - binance
        - okx
        - deribit
        - bybit
        - gate
        - bitget
      description: |
        The ID of the exchange. Possible values include:
          - `binance`: Binance.
          - `okx`: OKX.
          - `deribit`: Deribit.
          - `bybit`: Bybit.
          - `gate`: Gate.io
          - `bitget`: Bitget
      example: binance
    TokenBalance:
      type: object
      description: The balance information.
      required:
        - token_id
        - balance
      properties:
        token_id:
          type: string
          description: 'The token ID, which is the unique identifier of a token. You can retrieve the IDs of all the tokens you can use by calling [List enabled tokens](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-tokens).'
          example: BTC
        balance:
          type: object
          description: The balance details.
          required:
            - total
            - available
          properties:
            total:
              type: string
              description: 'The total balance, which is the sum of the available, pending, and locked balances.'
              example: '100.0'
            available:
              type: string
              description: The balance free to use.
              example: '80.5'
            pending:
              type: string
              description: The balance that is currently pending confirmation.
              default: '0'
              example: '10.5'
            locked:
              type: string
              description: The balance that is currently not accessible to transactions.
              default: '0'
              example: '3.0'
    AssetBalance:
      type: object
      description: The data for asset balance information.
      required:
        - asset_id
        - balance
      properties:
        asset_id:
          type: string
          description: (This concept applies to Exchange Wallets only) The asset ID. An asset ID is the unique identifier of the asset held within your linked exchange account.
          example: USDT
        balance:
          $ref: '#/components/schemas/TokenBalance/properties/balance'
    SubWalletAssetBalance:
      type: object
      description: The information about the asset balance of a trading account.
      required:
        - asset_id
        - balance
      properties:
        trading_account_type:
          type: string
          description: The trading account type.
          example: Spot
        asset_id:
          type: string
          description: The asset ID. An asset ID is the unique identifier of the asset held within your linked exchange account.
          example: USDT
        balance:
          $ref: '#/components/schemas/TokenBalance/properties/balance'
    SafeWallet:
      allOf:
        - allOf:
            - $ref: '#/components/schemas/CustodialWalletInfo'
            - type: object
              properties:
                chain_id:
                  type: string
                  description: The ID of the chain on which the wallet operates.
                  example: ETH
        - type: object
          title: Safe Wallets
          required:
            - smart_contract_wallet_type
          properties:
            smart_contract_wallet_type:
              $ref: '#/components/schemas/SmartContractWalletType'
            safe_address:
              type: string
              format: address
              pattern: '^0x[a-fA-F0-9]{40}$'
              example: '0x1234567890123456789012345678901234567890'
              description: The Smart Contract Wallet address.
            signers:
              type: array
              items:
                type: string
                format: address
                pattern: '^0x[a-fA-F0-9]{40}$'
                example: '0x1234567890123456789012345678901234567890'
              description: The signers of the Smart Contract Wallet.
            threshold:
              type: integer
              minimum: 1
              example: 2
              description: 'The minimum number of confirmations required for the Smart Contract Wallet. '
            cobo_safe_address:
              type: string
              format: address
              pattern: '^0x[a-fA-F0-9]{40}$'
              example: '0x1234567890123456789012345678901234567890'
              description: The address of Cobo Safe.
            initiator:
              $ref: '#/components/schemas/SmartContractInitiator'
    CustodialWalletInfo:
      type: object
      title: Custodial Wallets
      description: The basic information of a wallet.
      required:
        - wallet_id
        - wallet_type
        - wallet_subtype
        - name
        - org_id
      properties:
        wallet_id:
          type: string
          format: uuid
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          description: The wallet ID.
        wallet_type:
          $ref: '#/components/schemas/WalletType'
        wallet_subtype:
          $ref: '#/components/schemas/WalletSubtype'
        name:
          type: string
          example: Example Wallet
          description: The wallet name.
        org_id:
          type: string
          description: The ID of the owning organization.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    MPCWalletInfo:
      title: MPC Wallets
      allOf:
        - $ref: '#/components/schemas/CustodialWalletInfo'
        - type: object
          required:
            - vault_id
          properties:
            project_id:
              type: string
              example: 0111039d-27fb-49ba-b172-6e0aa80e37ec
              description: The project ID.
            project_name:
              type: string
              example: Project name
              description: The project name.
            vault_id:
              type: string
              description: The ID of the owning vault.
            vault_name:
              type: string
              example: Vault name
              description: The vault name.
    SmartContractWalletInfo:
      title: Smart Contract Wallets
      oneOf:
        - $ref: '#/components/schemas/SafeWallet'
      discriminator:
        propertyName: smart_contract_wallet_type
        mapping:
          Safe: '#/components/schemas/SafeWallet'
    ExchangeWalletInfo:
      title: Exchange Wallets
      allOf:
        - $ref: '#/components/schemas/CustodialWalletInfo'
        - type: object
          required:
            - apikey
            - exchange_id
          properties:
            apikey:
              type: string
              description: The API key of your exchange account.
              example: d8f062da-39f4-4a11-8b9d-12595854237f
            exchange_id:
              $ref: '#/components/schemas/ExchangeId'
            main_wallet_id:
              type: string
              description: The wallet ID of the Main Account associated with the Sub Account. This property is returned only if you are creating or querying an Exchange Wallet (Sub Account).
              format: uuid
              example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    WalletInfo:
      oneOf:
        - $ref: '#/components/schemas/CustodialWalletInfo'
        - $ref: '#/components/schemas/MPCWalletInfo'
        - $ref: '#/components/schemas/SmartContractWalletInfo'
        - $ref: '#/components/schemas/ExchangeWalletInfo'
      discriminator:
        propertyName: wallet_type
        mapping:
          Custodial: '#/components/schemas/CustodialWalletInfo'
          MPC: '#/components/schemas/MPCWalletInfo'
          SmartContract: '#/components/schemas/SmartContractWalletInfo'
          Exchange: '#/components/schemas/ExchangeWalletInfo'
    UTXO:
      type: object
      description: The UTXO information.
      properties:
        tx_hash:
          type: string
          description: The transaction hash of the UTXO.
          example: dd7e1cecf6bbde1844ee1815b780711a1e306a718bcd23cd64401b48ef88eb83
        vout_n:
          type: integer
          description: The output index of the UTXO.
          example: 0
        address:
          type: string
          description: The address of the UTXO.
          example: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
        token_id:
          type: string
          description: 'The token ID, which is the unique identifier of a token.'
          example: BTC
        value:
          type: string
          description: The value of the UTXO.
          example: '0.5'
        is_coinbase:
          type: boolean
          description: Whether the UTXO comes from a coinbase transaction.
          example: false
        is_locked:
          type: boolean
          description: Whether the UTXO is locked.
          example: false
        confirmed_number:
          type: integer
          description: The number of confirmations for the UTXO.
          example: 66716
    MaxTransferableValue:
      type: object
      description: 'The maximum amount you can transfer from the wallet or the specified wallet address, along with the corresponding transaction fee.'
      properties:
        token_id:
          type: string
          description: 'The token ID, which is the unique identifier of a token. You can retrieve the IDs of all the tokens you can use by calling [List enabled tokens](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-tokens).'
          example: ETH
        max_transferable_value:
          type: string
          description: The maximum amount you can transfer from the wallet or the specified wallet address.
          example: '3.0'
        fee:
          $ref: '#/components/schemas/TransactionRequestFee'
    AddressInfo:
      type: object
      description: The address information.
      required:
        - address
        - chain_id
      properties:
        address:
          type: string
          description: The wallet address.
          example: '0x0000000000000000000000000000000000000000'
        chain_id:
          type: string
          description: 'The chain ID, which is the unique identifier of a blockchain. You can retrieve the IDs of all the chains you can use by calling [List enabled chains](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-chains).'
          example: ETH
        memo:
          type: string
          description: The memo code.
          example: '82840924'
        path:
          type: string
          description: 'The derivation path of the address. This property applies to MPC Wallets only. To learn the meaning of each level in the path, see [Path levels](https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki#path-levels).'
          example: m/44'/60'/0'/0
        encoding:
          $ref: '#/components/schemas/AddressEncoding'
        pubkey:
          type: string
          description: The public key of the address. This property applies to MPC Wallets only.
          example: xpub661MyMwAqRbcG4vPNi58VQJrXW8D9VzmauuRq2rTY3oUVnKGuLTxQxvvoEXgLvZ7N9GQXQkWVgKn1rzEUUEm4NdvrBKUqjpNJEnn2UL4rYq
    AddressEncoding:
      type: string
      enum:
        - ENCODING_P2PKH
        - ENCODING_P2SH_P2WPKH
        - ENCODING_BECH32
        - ENCODING_P2PKH_UNCOMPRESSED
        - ENCODING_P2SH_P2MS
        - ENCODING_P2SH_P2WSH_P2MS
        - ENCODING_P2TR
      description: The address encoding formats. This property only applies to blockchains that have a similar architecture to Bitcoin.
      example: ENCODING_P2PKH
    CreateCustodialWalletParams:
      type: object
      title: Custodial Wallets
      required:
        - name
        - wallet_type
        - wallet_subtype
      description: The information of Custodial Wallets.
      properties:
        name:
          type: string
          example: My WaaS 2.0 Wallet
          description: The wallet name.
        wallet_type:
          $ref: '#/components/schemas/WalletType'
        wallet_subtype:
          $ref: '#/components/schemas/WalletSubtype'
    CreateMpcWalletParams:
      title: MPC Wallets
      allOf:
        - $ref: '#/components/schemas/CreateCustodialWalletParams'
        - type: object
          required:
            - vault_id
          properties:
            vault_id:
              type: string
              description: 'The ID of the owning vault. You can call [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults) to retrieve all vault IDs under your organization.'
    CreateSmartContractWalletParams:
      title: Smart Contract Wallets
      oneOf:
        - $ref: '#/components/schemas/CreateSafeWalletParams'
      discriminator:
        propertyName: smart_contract_wallet_type
        mapping:
          Safe: '#/components/schemas/CreateSafeWalletParams'
    CreateSafeWalletParams:
      allOf:
        - allOf:
            - $ref: '#/components/schemas/CreateCustodialWalletParams'
            - type: object
              required:
                - chain_id
              properties:
                chain_id:
                  type: string
                  description: The ID of the chain that the wallet operates on.
                  example: ETH
        - type: object
          required:
            - smart_contract_wallet_type
          properties:
            smart_contract_wallet_type:
              $ref: '#/components/schemas/SmartContractWalletType'
            safe_address:
              type: string
              format: address
              pattern: '^0x[a-fA-F0-9]{40}$'
              example: '0x1234567890123456789012345678901234567890'
              description: 'The address of the Smart Contract Wallet. If this is not provided, Cobo will create a new Safe{Wallet} and set up Cobo Safe for you. In that case, the `threshold` and `signers` properties are required.'
            signers:
              type: array
              items:
                type: string
                format: address
                pattern: '^0x[a-fA-F0-9]{40}$'
                example: '0x1234567890123456789012345678901234567890'
              description: 'The signers of the Smart Contract Wallet. This property is required when creating a new Safe{Wallet}.'
            threshold:
              type: integer
              minimum: 1
              example: 2
              description: 'The minimum number of confirmations required for the Smart Contract Wallet. This property is required when creating a new Safe{Wallet}.'
            cobo_safe_address:
              type: string
              format: address
              pattern: '^0x[a-fA-F0-9]{40}$'
              example: '0x1234567890123456789012345678901234567890'
              description: 'The address of Cobo Safe. If you are importing an existing Safe{Wallet}, Cobo Safe must have been created and enabled.'
            initiator:
              $ref: '#/components/schemas/SmartContractInitiator'
    CreateExchangeWalletParams:
      title: Exchange Wallets
      allOf:
        - $ref: '#/components/schemas/CreateCustodialWalletParams'
        - type: object
          required:
            - exchange_id
            - apikey
            - secret
          properties:
            exchange_id:
              $ref: '#/components/schemas/ExchangeId'
            apikey:
              type: string
              description: The API key of your exchange account.
              example: d8f062da-39f4-4a11-8b9d-12595854237f
            secret:
              type: string
              description: The API secret of your exchange account.
              example: 75B4F636193162488A3728B4A5797708
            passphrase:
              type: string
              description: The passphrase of your exchange account.
              example: sXASDKWKLLsWWEE
            memo:
              type: string
              description: The memo you use when applying for the API key of your exchange account.
              example: xxx@cobo.com
            account_identify:
              type: string
              description: |
                The identifier of your exchange account.
                - For Binance, this is email address of your exchange account.
                - For OKX, this is the user name of your exchange account.
              example: xxx@cobo.com
            ga_code:
              type: string
              description: The GA code for the exchange.
              example: sXASDKWKLLsWWEE75B4F636193162488A3728B4A5797708
            main_wallet_id:
              type: string
              description: The ID of the Exchange Wallet (Main Account).
              example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    CreateWalletParams:
      oneOf:
        - $ref: '#/components/schemas/CreateCustodialWalletParams'
        - $ref: '#/components/schemas/CreateMpcWalletParams'
        - $ref: '#/components/schemas/CreateExchangeWalletParams'
      discriminator:
        propertyName: wallet_type
        mapping:
          Custodial: '#/components/schemas/CreateCustodialWalletParams'
          MPC: '#/components/schemas/CreateMpcWalletParams'
          Exchange: '#/components/schemas/CreateExchangeWalletParams'
    CreatedWalletInfo:
      oneOf:
        - $ref: '#/components/schemas/CustodialWalletInfo'
        - $ref: '#/components/schemas/MPCWalletInfo'
        - $ref: '#/components/schemas/ExchangeWalletInfo'
      discriminator:
        propertyName: wallet_type
        mapping:
          Custodial: '#/components/schemas/CustodialWalletInfo'
          MPC: '#/components/schemas/MPCWalletInfo'
          Exchange: '#/components/schemas/ExchangeWalletInfo'
    UpdateCustodialWalletParams:
      type: object
      title: Custodial Wallets
      description: The information of Custodial Wallets.
      required:
        - wallet_type
      properties:
        wallet_type:
          $ref: '#/components/schemas/WalletType'
        name:
          type: string
          example: My WaaS 2.0 Wallet
          description: The wallet name.
    UpdateMpcWalletParams:
      type: object
      title: MPC Wallets
      description: The information of MPC Wallets.
      required:
        - wallet_type
      properties:
        wallet_type:
          $ref: '#/components/schemas/WalletType'
        name:
          type: string
          example: My WaaS 2.0 Wallet
          description: The wallet name.
    UpdateSmartContractWalletParams:
      type: object
      title: Smart Contract Wallets
      description: The information of Smart Contract Wallets.
      required:
        - wallet_type
      properties:
        wallet_type:
          $ref: '#/components/schemas/WalletType'
        name:
          type: string
          example: My WaaS 2.0 Wallet
          description: The wallet name.
    UpdateExchangeWalletParams:
      type: object
      title: Exchange Wallets
      description: The information of Exchange Wallets.
      required:
        - wallet_type
      properties:
        wallet_type:
          $ref: '#/components/schemas/WalletType'
        name:
          type: string
          example: Example Wallet
          description: The wallet name.
    UpdateWalletParams:
      oneOf:
        - $ref: '#/components/schemas/UpdateCustodialWalletParams'
        - $ref: '#/components/schemas/UpdateMpcWalletParams'
        - $ref: '#/components/schemas/UpdateSmartContractWalletParams'
        - $ref: '#/components/schemas/UpdateExchangeWalletParams'
      discriminator:
        propertyName: wallet_type
        mapping:
          Custodial: '#/components/schemas/UpdateCustodialWalletParams'
          MPC: '#/components/schemas/UpdateMpcWalletParams'
          SmartContract: '#/components/schemas/UpdateSmartContractWalletParams'
          Exchange: '#/components/schemas/UpdateExchangeWalletParams'
    CurveType:
      type: string
      enum:
        - SECP256K1
        - ED25519
      example: SECP256K1
      description: |
        The elliptic curve type of the [root extended public key](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/tss-node-deployment#tss-node-on-cobo-portal-and-mpc-root-extended-public-key). Possible values include:

        - `SECP256K1`: The secp256k1 elliptic curve.

        - `ED25519`: The Ed25519 elliptic curve.
    KeyShareHolderGroup:
      type: object
      description: The data for key share holder group information.
      properties:
        key_share_holder_group_id:
          type: string
          example: b33130a9-6e18-44a9-9e48-8b3b41921f0e
          description: The key share holder group ID.
        type:
          $ref: '#/components/schemas/KeyShareHolderGroupType'
        tss_key_share_groups:
          type: array
          items:
            $ref: '#/components/schemas/TSSGroups'
        key_share_holders:
          type: array
          items:
            $ref: '#/components/schemas/KeyShareHolder'
        participants:
          type: integer
          description: The number of key share holders in this key share holder group.
          example: 3
        threshold:
          type: integer
          description: The number of key share holders required to approve each operation in this key share holder group.
          example: 2
        status:
          $ref: '#/components/schemas/KeyShareHolderGroupStatus'
        created_timestamp:
          type: integer
          format: int64
          description: 'The key share holder group''s creation time in Unix timestamp format, measured in milliseconds.'
          example: 1718619403933
    KeyShareHolderGroupStatus:
      type: string
      enum:
        - New
        - Valid
        - Unavailable
      example: Valid
      description: |
        The status of the key share holder group. Possible values include:
        - `New`: The key share holder group has been newly created. The status will become `Valid` after you call [Create TSS request](/api-references/v2/wallets--mpc-wallet/create-a-tss-request-to-generate-key-secrets-for-a-tss-group) and specifying this key share holder group as the target key share holder group.

        - `Valid`: The key share holder group is valid.

        - `Unavailable`: The key share holder group is currently unavailable. This status appears when a key share holder uses [mobile co-signer](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/back-up-key-share-groups#mobile-co-signer) to change node. For example, when a key share holder changes to a new phone or loses their phone, and is in the process of setting up [Cobo Guard](https://manuals.cobo.com/en/guard/introduction) on their new phone.
    KeyShareHolderGroupType:
      type: string
      enum:
        - MainGroup
        - SigningGroup
        - RecoveryGroup
      example: MainGroup
      description: |
        The type of key share holder group. Possible values include:

        - `MainGroup`: A [Main Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups).

        - `SigningGroup`: A [Signing Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups).

        - `RecoveryGroup`: A [Recovery Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups).

        **Note:** For `MainGroup` and `SigningGroup`, a Cobo key share holder will be added automatically.
    CreateKeyShareHolder:
      type: object
      description: 'When creating MainKeyGroup and SigningKeyGroup, the Cobo key share holder will be added automatically.'
      properties:
        name:
          type: string
          description: Key share holder's name.
          example: Key share holder name
        type:
          $ref: '#/components/schemas/KeyShareHolderType'
        tss_node_id:
          type: string
          description: Key share holder's TSS Node ID.
          example: coboAbCdEfGhIjKlMnOpQrStUvWxYz1234567890abcdefghi
        signer:
          type: boolean
          example: true
          description: |
            Whether the key share holder's TSS Node is a designated transaction signer.
            - `true`: The TSS Node is a designated transaction signer.

            - `false`: The TSS Node is not a designated transaction signer.
    KeyShareHolder:
      type: object
      description: The data for MPC Wallets' key share holder information.
      properties:
        name:
          type: string
          description: The key share holder name.
          example: Key share holder name
        type:
          $ref: '#/components/schemas/KeyShareHolderType'
        tss_node_id:
          type: string
          description: The key share holder's TSS Node ID.
          example: coboAbCdEfGhIjKlMnOpQrStUvWxYz1234567890abcdefghi
        online:
          type: boolean
          description: |
            Whether the key share holder's TSS Node is online.
            - `true`: The TSS Node is online.

            - `false`: The TSS Node is offline.
        signer:
          type: boolean
          example: true
          description: |
            Whether the key share holder's TSS Node is a designated transaction signer.
            - `true`: The TSS Node is a designated transaction signer.

            - `false`: The TSS Node is not a designated transaction signer.
        status:
          $ref: '#/components/schemas/KeyShareHolderStatus'
        account_id:
          type: string
          description: The key share holder's Cobo Portal account ID.
          example: auth0|cobo|839305394802991371
    KeyShareHolderStatus:
      type: string
      enum:
        - Valid
        - NotConfigured
        - NotActivated
        - Changed
      example: Valid
      description: |
        The status of key share holder's TSS Node. Possible values include:
        - `Valid`: The TSS Node is configured and activated.

        - `NotConfigured`: The TSS Node has not been configured. This status is only applicable to [mobile co-signer](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/back-up-key-share-groups#mobile-co-signer) using the [Cobo Guard](https://manuals.cobo.com/en/guard/introduction).

        - `NotActivated`: The TSS Node has not been activated. This status is only applicable to [mobile co-signer](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/back-up-key-share-groups#mobile-co-signer) using the [Cobo Guard](https://manuals.cobo.com/en/guard/introduction).

        - `Changed`: The TSS Node has been changed. This happens when the key share holder sets up their [Cobo Guard](https://manuals.cobo.com/en/guard/introduction) on a new phone. This `Changed` status serves as a reminder for you to call [Create TSS request](/api-references/v2/wallets--mpc-wallet/create-a-tss-request-to-generate-key-secrets-for-a-tss-group) with the `KeyGenFromKeyGroup` and `Recovery` action `type` to finalize the setup of the key share holder's new phone. Once all set, the old TSS Node with the `Changed` status will be deleted.
    KeyShareHolderType:
      type: string
      enum:
        - Cobo
        - Mobile
        - API
      example: API
      description: |
        The key share holder's TSS Node type. Possible values include:

        - `Cobo`: The TSS Node is generated and held by Cobo.

        - `Mobile`: The TSS Node is generated and held by a [mobile co-signer](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups#create-a-main-group) using [Cobo Guard](https://manuals.cobo.com/en/guard/introduction).

        - `API`: The TSS Node is generated and held by an [API co-signer](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups#create-a-main-group) using the [TSS Node software package](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/tss-node-deployment).
    MPCVault:
      type: object
      description: The data for vault information.
      properties:
        vault_id:
          type: string
          example: YPdbyVaVGqXXjkUsohHw
          description: The vault ID.
        project_id:
          type: string
          example: 0111039d-27fb-49ba-b172-6e0aa80e37ec
          description: The project ID.
        name:
          type: string
          example: Vault name
          description: The vault name.
        type:
          $ref: '#/components/schemas/MPCVaultType'
        root_pubkeys:
          type: array
          items:
            $ref: '#/components/schemas/RootPubkey'
        created_timestamp:
          type: integer
          format: int64
          description: 'The vault''s creation time in Unix timestamp format, measured in milliseconds.'
          example: 1718619403933
    MPCVaultType:
      type: string
      enum:
        - Org-Controlled
        - User-Controlled
      example: Org-Controlled
      description: |
        The vault type. Possible values include:
        - `Org-Controlled`: This vault is a collection of [Organization-Controlled Wallets](https://manuals.cobo.com/en/portal/mpc-wallets/introduction#organization-controlled-wallets).

        - `User-Controlled`: This vault is a collection of [User-Controlled Wallets](https://manuals.cobo.com/en/portal/mpc-wallets/introduction#user-controlled-wallets).
    MPCProject:
      type: object
      description: The data for project information.
      properties:
        project_id:
          type: string
          example: 0111039d-27fb-49ba-b172-6e0aa80e37ec
          description: The project ID.
        org_id:
          type: string
          example: f3b4a616-9c43-462e-8cb4-343e304fee64
          description: 'The [organization](https://manuals.cobo.com/en/portal/organization/introduction) ID.'
        name:
          type: string
          example: Project name
          description: The project name.
        participants:
          type: integer
          example: 3
          description: The number of key share holders in the project.
        threshold:
          type: integer
          example: 2
          description: The number of key share holders required to sign an operation in the project.
        create_timestamp:
          type: integer
          format: int64
          example: 1718619403933
          description: 'The project''s creation time in Unix timestamp format, measured in milliseconds.'
    RootPubkey:
      type: object
      description: The data for MPC Root Extended Public Key information.
      properties:
        root_pubkey:
          type: string
          description: 'The vault''s [root extended public key](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/tss-node-deployment#tss-node-on-cobo-portal-and-mpc-root-extended-public-key).'
          example: xpub661MyMwAqRbcG4vPNi58VQJrXW8D9VzmauuRq2rTY3oUVnKGuLTxQxvvoEXgLvZ7N9GQXQkWVgKn1rzEUUEm4NdvrBKUqjpNJEnn2UL4rYq
        curve:
          $ref: '#/components/schemas/CurveType'
    TSSGroups:
      type: object
      description: The data for the TSS key share group ID.
      properties:
        tss_key_share_group_id:
          type: string
          description: The TSS key share group ID.
          example: mMedDioOKhTlhGyQRzMv
        curve:
          $ref: '#/components/schemas/CurveType'
        root_pubkey:
          type: string
          description: 'The vault''s [root extended public key](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/tss-node-deployment#tss-node-on-cobo-portal-and-mpc-root-extended-public-key).'
          example: xpub661MyMwAqRbcG4vPNi58VQJrXW8D9VzmauuRq2rTY3oUVnKGuLTxQxvvoEXgLvZ7N9GQXQkWVgKn1rzEUUEm4NdvrBKUqjpNJEnn2UL4rYq
    TSSRequest:
      type: object
      description: The information about the TSS request.
      properties:
        tss_request_id:
          type: string
          description: The TSS request ID.
          example: '20240711114129000132315000003970'
        source_key_share_holder_group:
          $ref: '#/components/schemas/SourceGroup'
        target_key_share_holder_group_id:
          type: string
          description: The target key share holder group ID.
          example: fd9519ae-507b-4605-b108-04d4e5ffcdd3
        type:
          $ref: '#/components/schemas/TSSRequestType'
        status:
          $ref: '#/components/schemas/TSSRequestStatus'
        description:
          type: string
          description: The description of the TSS request.
          example: This is a request to create key shares using the Recovery Group for a key share holder in the Main Group if their key share has been lost (e.g. by losing their phone).
        created_timestamp:
          description: 'The TSS request''s creation time in Unix timestamp format, measured in milliseconds.'
          type: integer
          format: int64
          example: 1701396866000
    TSSRequestStatus:
      type: string
      enum:
        - PendingKeyHolderConfirmation
        - KeyHolderConfirmationFailed
        - KeyGenerating
        - KeyGeneratingFailed
        - Success
      example: Success
      description: |
        The TSS request status. Possible values include:
        - `PendingKeyHolderConfirmation`: The action done to the TSS request is currently pending enough key share holders to approve.

        - `KeyHolderConfirmationFailed`: Key share holders failed to approve the the action to be done to the TSS request.

        - `KeyGenerating`: The key share is currently being generated for the action to be done to the TSS request.

        - `KeyGeneratingFailed`: The key share generation process has failed for the action to be done to the TSS request.

        - `Success`: The action done to the TSS request has been completed successfully. If you see this status while running [Cancel TSS request](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/cancel-tss-request), this mean the specified TSS request has been successfully canceled.
    TSSRequestType:
      type: string
      enum:
        - KeyGen
        - KeyGenFromKeyGroup
        - Recovery
      example: Recovery
      description: |
        The TSS request type. Possible values include:
        - `KeyGen`: This is a key generation request to create a [root extended public key](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/tss-node-deployment#tss-node-on-cobo-portal-and-mpc-root-extended-public-key) and key shares for your [Main Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups) after you've created the Main Group with [Create key share holder group](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/create-key-share-holder-group). You only need to do this once per [organization](https://manuals.cobo.com/en/portal/organization/introduction).

        - `KeyGenFromKeyGroup`: This is a request to use the [Main Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups) to create key shares for your [Signing Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups) or [Recovery Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups) after you've created these key share holder groups with [Create key share holder group](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/create-key-share-holder-group).

        - `Recovery`: This is a request to create key shares using the [Recovery Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups) for a key share holder in the [Main Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups) if their key share has been lost (e.g. by losing their phone).
    UpdateGroupAction:
      type: string
      enum:
        - UpgradeToMainGroup
      example: UpgradeToMainGroup
      description: |
        The available actions of key share holder group update. Possible values include:
        - `UpgradeToMainGroup`: This upgrades an active [Signing Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups) to the [Main Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups). The original Main Group will be permanently deleted.
    SourceGroup:
      type: object
      description: |
        The source key share holder group.

        **Note:** `source_key_share_holder_group` is used only when `type` is set to either `KeyGenfromKeyGroup` or `Recovery`. This is to specify the key share holder group to be used as the source key share holder group to create key shares for the `target_key_share_holder_group`.
      required:
        - key_share_holder_group_id
      properties:
        key_share_holder_group_id:
          type: string
          description: The source key share holder group ID.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        tss_node_ids:
          type: array
          items:
            type: string
            example: cobo5yb7BNEBwwp5XXedbhnzQfvQtp132W4dH4Jz4x4eDp4KA
          description: |
            The TSS Node IDs participating in creating a new key share holder group when `type` is set to either `KeyGenFromKeyGroup` or `Recovery`. 

            **Note:** In any [Threshold Signature Schemes (TSS)](https://manuals.cobo.com/en/portal/mpc-wallets/introduction#threshold-signature-scheme-tss) such as the 2-2, 2-3, and 3-3 schemes (in the "threshold - participants" format), for `tss_node_ids`, you only need to fill in 1 Cobo TSS Node ID and enough non-Cobo TSS Node IDs to satisfy the number of approvers specified in `threshold`. To obtain the Cobo TSS Node ID, run [List all Cobo key share holders](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-cobo-key-share-holders).
    FeeType:
      type: string
      enum:
        - Fixed
        - EVM_EIP_1559
        - EVM_Legacy
        - UTXO
      example: EVM_EIP_1559
      default: EVM_EIP_1559
      description: |
        The fee model. Possible values include:
        - `Fixed`: The fixed fee model. 
        - `EVM_EIP_1559`: The EIP-1559 fee model.
        - `EVM_Legacy`: The legacy fee model.
        - `UTXO`: The fee model used in UTXO-based blockchains, such as Bitcoin.
    FeeAmount:
      type: object
      description: The transaction fee.
      properties:
        fee_amount:
          type: string
          description: The fee that you need to pay for the transaction.
          example: '0.1'
    MaxFeeAmount:
      type: object
      description: The maximum transaction fee.
      properties:
        max_fee_amount:
          type: string
          description: The maximum fee that you are willing to pay for the transaction. The transaction will fail if the transaction fee exceeds the maximum fee.
          example: '0.1'
    FeeGasLimit:
      type: object
      properties:
        gas_limit:
          type: string
          description: The gas limit. It represents the maximum number of gas units that you are willing to pay for the execution of a transaction or Ethereum Virtual Machine (EVM) operation. The gas unit cost of each operation varies.
          default: '21000'
          example: '21000'
    EvmEip1559FeeBasePrice:
      type: object
      description: The transaction gas price based on the EIP-1559 fee model.
      properties:
        max_fee_per_gas:
          type: string
          description: 'The maximum gas fee per gas unit used on the chain, in wei.'
          example: '9000000000000'
        max_priority_fee_per_gas:
          type: string
          description: 'The maximum priority fee per gas unit used, in wei. The maximum priority fee represents the highest amount of miner tips that you are willing to pay for your transaction.'
          example: '1000000000000'
    EvmLegacyFeeBasePrice:
      type: object
      description: The transaction gas price based on the legacy fee model.
      properties:
        gas_price:
          type: string
          description: 'The gas price, in wei. The gas price represents the amount of ETH that must be paid to validators for processing transactions per gas unit used.'
          example: '100000000'
    UtxoFeeBasePrice:
      type: object
      description: The transaction fee rate for UTXO-based chains (such as Bitcoin).
      properties:
        fee_rate:
          type: string
          description: The fee rate in sat/vByte. The fee rate represents the satoshis you are willing to pay for each byte of data that your transaction will consume on the blockchain.
          example: '50'
    EvmEip1559FeeRate:
      type: object
      description: The transaction fee rate based on the EIP-1559 fee model.
      title: EIP-1559 Fee Rate
      required:
        - fee_type
        - token_id
        - recommended
      properties:
        fee_type:
          $ref: '#/components/schemas/FeeType'
        token_id:
          type: string
          description: The token ID of the transaction fee.
          example: ETH
        slow:
          required:
            - max_fee_per_gas
            - max_priority_fee_per_gas
          allOf:
            - $ref: '#/components/schemas/EvmEip1559FeeBasePrice'
        recommended:
          required:
            - max_fee_per_gas
            - max_priority_fee_per_gas
          allOf:
            - $ref: '#/components/schemas/EvmEip1559FeeBasePrice'
        fast:
          required:
            - max_fee_per_gas
            - max_priority_fee_per_gas
          allOf:
            - $ref: '#/components/schemas/EvmEip1559FeeBasePrice'
    EvmLegacyFeeRate:
      type: object
      description: The transaction fee rate based on the legacy fee model.
      title: Legacy Fee Rate
      required:
        - fee_type
        - token_id
        - recommended
      properties:
        fee_type:
          $ref: '#/components/schemas/FeeType'
        token_id:
          type: string
          description: The token ID of the transaction fee.
          example: ETH
        slow:
          required:
            - gas_price
          allOf:
            - $ref: '#/components/schemas/EvmLegacyFeeBasePrice'
        recommended:
          required:
            - gas_price
          allOf:
            - $ref: '#/components/schemas/EvmLegacyFeeBasePrice'
        fast:
          required:
            - gas_price
          allOf:
            - $ref: '#/components/schemas/EvmLegacyFeeBasePrice'
    UtxoFeeRate:
      type: object
      description: The transaction fee rate for UTXO-based chains.
      title: UTXO Fee Rate
      required:
        - fee_type
        - token_id
        - recommended
      properties:
        fee_type:
          $ref: '#/components/schemas/FeeType'
        token_id:
          type: string
          description: The token ID of the transaction fee.
          example: BTC
        slow:
          required:
            - fee_rate
          allOf:
            - $ref: '#/components/schemas/UtxoFeeBasePrice'
        recommended:
          required:
            - fee_rate
          allOf:
            - $ref: '#/components/schemas/UtxoFeeBasePrice'
        fast:
          required:
            - fee_rate
          allOf:
            - $ref: '#/components/schemas/UtxoFeeBasePrice'
    FixedFeeRate:
      type: object
      description: The transaction fee that you need to pay based on the fixed fee model for some blockchains. The fee can vary between different chains.
      title: Fixed
      required:
        - fee_type
        - token_id
      allOf:
        - type: object
          properties:
            fee_type:
              $ref: '#/components/schemas/FeeType'
            token_id:
              type: string
              description: The token ID of the transaction fee.
              example: TRON
        - $ref: '#/components/schemas/FeeAmount'
    FeeRate:
      oneOf:
        - $ref: '#/components/schemas/FixedFeeRate'
        - $ref: '#/components/schemas/EvmEip1559FeeRate'
        - $ref: '#/components/schemas/EvmLegacyFeeRate'
        - $ref: '#/components/schemas/UtxoFeeRate'
      discriminator:
        propertyName: fee_type
        mapping:
          Fixed: '#/components/schemas/FixedFeeRate:'
          EVM_EIP_1559: '#/components/schemas/EvmEip1559FeeRate:'
          EVM_Legacy: '#/components/schemas/EvmLegacyFeeRate:'
          UTXO: '#/components/schemas/UtxoFeeRate:'
    EstimatedFixedFee:
      type: object
      description: 'In the fixed fee model, the transaction fee is a fixed amount within a certain amount of period regardless of the transaction size or network congestion, which can vary between different chains.'
      title: Estimated Fixed
      required:
        - fee_type
        - token_id
        - fee_amount
      allOf:
        - type: object
          properties:
            fee_type:
              $ref: '#/components/schemas/FeeType'
            token_id:
              type: string
              description: The token ID of the transaction fee.
              example: TRON
            is_loop:
              type: boolean
              description: |
                Whether the transaction can be executed as a Loop transfer. For more information about Loop, see [Loop's website](https://loop.top/).
                - `true`: The transaction is a Loop transfer.
                - `false`: The transaction is not a Loop transfer.
              example: false
        - $ref: '#/components/schemas/FeeAmount'
    EstimatedEvmEip1559Fee:
      type: object
      description: The estimated transaction fee based on the EIP-1559 fee model.
      title: Estimated EIP-1559
      required:
        - fee_type
        - token_id
        - recommended
      properties:
        fee_type:
          $ref: '#/components/schemas/FeeType'
        token_id:
          type: string
          description: The token ID of the transaction fee.
          example: ETH
        slow:
          required:
            - max_fee_per_gas
            - max_priority_fee_per_gas
            - gas_limit
          allOf:
            - $ref: '#/components/schemas/EvmEip1559FeeBasePrice'
            - $ref: '#/components/schemas/FeeGasLimit'
        recommended:
          required:
            - max_fee_per_gas
            - max_priority_fee_per_gas
            - gas_limit
          allOf:
            - $ref: '#/components/schemas/EvmEip1559FeeBasePrice'
            - $ref: '#/components/schemas/FeeGasLimit'
        fast:
          required:
            - max_fee_per_gas
            - max_priority_fee_per_gas
            - gas_limit
          allOf:
            - $ref: '#/components/schemas/EvmEip1559FeeBasePrice'
            - $ref: '#/components/schemas/FeeGasLimit'
    EstimatedEvmLegacyFee:
      type: object
      description: The estimated transaction fee based on the legacy fee model.
      title: Estimated Legacy
      required:
        - fee_type
        - token_id
        - recommended
      properties:
        fee_type:
          $ref: '#/components/schemas/FeeType'
        token_id:
          type: string
          description: The token ID of the transaction fee.
          example: ETH
        slow:
          required:
            - gas_price
            - gas_limit
          allOf:
            - $ref: '#/components/schemas/EvmLegacyFeeBasePrice'
            - $ref: '#/components/schemas/FeeGasLimit'
        recommended:
          required:
            - gas_price
            - gas_limit
          allOf:
            - $ref: '#/components/schemas/EvmLegacyFeeBasePrice'
            - $ref: '#/components/schemas/FeeGasLimit'
        fast:
          required:
            - gas_price
            - gas_limit
          allOf:
            - $ref: '#/components/schemas/EvmLegacyFeeBasePrice'
            - $ref: '#/components/schemas/FeeGasLimit'
    EstimatedUtxoFee:
      type: object
      description: The estimated transaction fee for UTXO-based chains.
      title: Estimated UTXO
      required:
        - fee_type
        - token_id
        - recommended
      properties:
        fee_type:
          $ref: '#/components/schemas/FeeType'
        token_id:
          type: string
          description: The token ID of the transaction fee.
          example: BTC
        slow:
          required:
            - fee_rate
            - fee_amount
          allOf:
            - $ref: '#/components/schemas/UtxoFeeBasePrice'
            - $ref: '#/components/schemas/FeeAmount'
        recommended:
          required:
            - fee_rate
            - fee_amount
          allOf:
            - $ref: '#/components/schemas/UtxoFeeBasePrice'
            - $ref: '#/components/schemas/FeeAmount'
        fast:
          required:
            - fee_rate
            - fee_amount
          allOf:
            - $ref: '#/components/schemas/UtxoFeeBasePrice'
            - $ref: '#/components/schemas/FeeAmount'
    EstimatedFee:
      oneOf:
        - $ref: '#/components/schemas/EstimatedFixedFee'
        - $ref: '#/components/schemas/EstimatedEvmEip1559Fee'
        - $ref: '#/components/schemas/EstimatedEvmLegacyFee'
        - $ref: '#/components/schemas/EstimatedUtxoFee'
      discriminator:
        propertyName: fee_type
        mapping:
          Fixed: '#/components/schemas/EstimatedFixedFee'
          EVM_EIP_1559: '#/components/schemas/EstimatedEvmEip1559Fee'
          EVM_Legacy: '#/components/schemas/EstimatedEvmLegacyFee'
          UTXO: '#/components/schemas/EstimatedUtxoFee'
    TransactionRequestFixedFee:
      type: object
      description: |
        In the fixed fee model, the transaction fee is a fixed amount within a certain amount of period regardless of the transaction size or network congestion, which can vary between different chains.

        You can specify the maximum fee amount to limit the transaction fee. The transaction will fail if the transaction fee exceeds the specified maximum fee amount.
      title: Fixed in Request
      required:
        - fee_type
        - token_id
      allOf:
        - type: object
          properties:
            fee_type:
              $ref: '#/components/schemas/FeeType'
            token_id:
              type: string
              description: The token ID of the transaction fee.
              example: TRON
        - $ref: '#/components/schemas/MaxFeeAmount'
    TransactionRequestEvmEip1559Fee:
      type: object
      description: |
        In the EIP-1559 fee model, the transaction fee is calculated by multiplying the gas price and the gas units used by the transaction. This can be expressed as: Transaction fee = gas price * gas units used. 

        You can specify the maximum gas fee per gas unit, maximum priority fee per gas unit, and the gas limit to limit the gas price, priority fee per gas unit, gas units used in the transaction. 
      title: EIP-1559 in Request
      required:
        - fee_type
        - token_id
        - max_fee_per_gas
        - max_priority_fee_per_gas
      allOf:
        - type: object
          properties:
            fee_type:
              $ref: '#/components/schemas/FeeType'
            token_id:
              type: string
              description: The token ID of the transaction fee.
              example: ETH
            gas_limit:
              type: string
              description: The gas limit. It represents the maximum number of gas units that you are willing to pay for the execution of a transaction or Ethereum Virtual Machine (EVM) operation. The gas unit cost of each operation varies.
              default: '21000'
              example: '21000'
        - $ref: '#/components/schemas/EvmEip1559FeeBasePrice'
    TransactionRequestEvmLegacyFee:
      type: object
      description: |
        In the legacy fee model, the transaction fee is calculated by multiplying the gas price by the gas units used by the transaction. This can be expressed as: Transaction fee =  (gas price * gas units used). 

        You can specify the gas limit to limit the gas units used in the transaction.
      required:
        - fee_type
        - token_id
        - gas_price
      title: Legacy in Request
      allOf:
        - type: object
          properties:
            fee_type:
              $ref: '#/components/schemas/FeeType'
            token_id:
              type: string
              description: The token ID of the transaction fee.
              example: ETH
            gas_limit:
              type: string
              description: The gas limit. It represents the maximum number of gas units that you are willing to pay for the execution of a transaction or Ethereum Virtual Machine (EVM) operation. The gas unit cost of each operation varies.
              default: '21000'
              example: '21000'
        - $ref: '#/components/schemas/EvmLegacyFeeBasePrice'
    TransactionRequestUtxoFee:
      type: object
      description: |
        In the UTXO fee model, the transaction fee is calculated by multiplying the fee rate by the transaction size. This can be expressed as: Transaction fee = fee rate * transaction size. 

        You can specify the maximum fee amount to limit the transaction fee. The transaction will fail if the transaction fee exceeds the specified maximum fee amount.
      required:
        - fee_type
        - token_id
        - fee_rate
      title: UTXO in Request
      allOf:
        - type: object
          properties:
            fee_type:
              $ref: '#/components/schemas/FeeType'
            token_id:
              type: string
              description: The token ID of the transaction fee.
              example: BTC
            max_fee_amount:
              type: string
              description: The maximum fee that you are willing to pay for the transaction. The transaction will fail if the transaction fee exceeds the maximum fee.
              example: '0.1'
        - $ref: '#/components/schemas/UtxoFeeBasePrice'
    TransactionRequestFee:
      oneOf:
        - $ref: '#/components/schemas/TransactionRequestFixedFee'
        - $ref: '#/components/schemas/TransactionRequestEvmEip1559Fee'
        - $ref: '#/components/schemas/TransactionRequestEvmLegacyFee'
        - $ref: '#/components/schemas/TransactionRequestUtxoFee'
      discriminator:
        propertyName: fee_type
        mapping:
          Fixed: '#/components/schemas/TransactionRequestFixedFee'
          EVM_EIP_1559: '#/components/schemas/TransactionRequestEvmEip1559Fee'
          EVM_Legacy: '#/components/schemas/TransactionRequestEvmLegacyFee'
          UTXO: '#/components/schemas/TransactionRequestUtxoFee'
    Transaction:
      type: object
      description: The information about a transaction.
      required:
        - transaction_id
        - wallet_id
        - transaction_type
        - status
        - initiator_type
        - source
        - destination
        - created_time
        - updated_time
      properties:
        transaction_id:
          type: string
          description: The transaction ID.
          format: uuid
          example: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
        cobo_id:
          type: string
          description: 'The Cobo ID, which can be used to track a transaction.'
          example: '20231213122855000000000000000000'
        request_id:
          type: string
          description: The request ID that is used to track a transaction request. The request ID is provided by you and must be unique within your organization.
          example: web_send_by_user_327_1610444045047
        wallet_id:
          type: string
          description: 'For deposit transactions, this property represents the wallet ID of the transaction destination. For transactions of other types, this property represents the wallet ID of the transaction source.'
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        type:
          $ref: '#/components/schemas/TransactionType'
        status:
          $ref: '#/components/schemas/TransactionStatus'
        sub_status:
          $ref: '#/components/schemas/TransactionSubStatus'
        failed_reason:
          type: string
          description: (This property is applicable to approval failures and signature failures only) The reason why the transaction failed.
          example: Rejected by signer Cobo TSS
        chain_id:
          type: string
          description: 'The chain ID, which is the unique identifier of a blockchain. You can retrieve the IDs of all the chains you can use by calling [List enabled chains](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-chains).'
          example: ETH
        token_id:
          type: string
          description: 'The token ID, which is the unique identifier of a token. You can retrieve the IDs of all the tokens you can use by calling [List enabled tokens](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-tokens).'
          example: ETH_USDT
        asset_id:
          type: string
          description: (This concept applies to Exchange Wallets only) The asset ID. An asset ID is the unique identifier of the asset held within your linked exchange account.
          example: USDT
        source:
          oneOf:
            - $ref: '#/components/schemas/TransactionCustodialAssetWalletSource'
            - $ref: '#/components/schemas/TransactionMPCWalletSource'
            - $ref: '#/components/schemas/TransactionSmartContractSafeWalletSource'
            - $ref: '#/components/schemas/TransactionExchangeWalletSource'
            - $ref: '#/components/schemas/TransactionDepositFromAddressSource'
            - $ref: '#/components/schemas/TransactionDepositFromWalletSource'
            - $ref: '#/components/schemas/TransactionDepositFromLoopSource'
          discriminator:
            propertyName: source_type
            mapping:
              Asset: '#/components/schemas/TransactionCustodialAssetWalletSource'
              Org-Controlled: '#/components/schemas/TransactionMPCWalletSource'
              User-Controlled: '#/components/schemas/TransactionMPCWalletSource'
              SafeWallet: '#/components/schemas/TransactionSmartContractSafeWalletSource'
              Main: '#/components/schemas/TransactionExchangeWalletSource'
              Sub: '#/components/schemas/TransactionExchangeWalletSource'
              DepositFromAddress: '#/components/schemas/TransactionDepositFromAddressSource'
              DepositFromWallet: '#/components/schemas/TransactionDepositFromWalletSource'
              DepositFromLoop: '#/components/schemas/TransactionDepositFromLoopSource'
        destination:
          oneOf:
            - $ref: '#/components/schemas/TransactionTransferToAddressDestination'
            - $ref: '#/components/schemas/TransactionTransferToWalletDestination'
            - $ref: '#/components/schemas/TransactionEvmContractDestination'
            - $ref: '#/components/schemas/TransactionMessageSignEIP191Destination'
            - $ref: '#/components/schemas/TransactionMessageSignEIP712Destination'
            - $ref: '#/components/schemas/TransactionDepositToAddressDestination'
            - $ref: '#/components/schemas/TransactionDepositToWalletDestination'
          discriminator:
            propertyName: destination_type
            mapping:
              Address: '#/components/schemas/TransactionTransferToAddressDestination'
              ExchangeWallet: '#/components/schemas/TransactionTransferToWalletDestination'
              EVM_Contract: '#/components/schemas/TransactionEvmContractDestination'
              EVM_EIP_191_Signature: '#/components/schemas/TransactionMessageSignEIP191Destination'
              EVM_EIP_712_Signature: '#/components/schemas/TransactionMessageSignEIP712Destination'
              DepositToAddress: '#/components/schemas/TransactionDepositToAddressDestination'
              DepositToWallet: '#/components/schemas/TransactionDepositToWalletDestination'
        result:
          $ref: '#/components/schemas/TransactionResult'
        fee:
          $ref: '#/components/schemas/TransactionFee'
        initiator:
          type: string
          description: The transaction initiator.
          example: 'API Prod Key #1'
        initiator_type:
          $ref: '#/components/schemas/TransactionInitiatorType'
        confirmed_num:
          type: integer
          format: int32
          description: The number of confirmations this transaction has received.
          example: 12
        confirming_threshold:
          type: integer
          format: int32
          description: The minimum number of confirmations required to deem a transaction secure. The common threshold is 6 for a Bitcoin transaction.
          example: 15
        transaction_hash:
          type: string
          description: The transaction hash.
          example: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
        block_info:
          $ref: '#/components/schemas/TransactionBlockInfo'
        raw_tx_info:
          $ref: '#/components/schemas/TransactionRawTxInfo'
        replacement:
          type: object
          properties:
            replaced_by_type:
              $ref: '#/components/schemas/ReplaceType'
            replaced_by_transaction_id:
              type: string
              description: The ID of the transaction that this transaction was replaced by.
              format: uuid
              example: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
            replaced_by_transaction_hash:
              type: string
              description: The hash of the transaction that this transaction was replaced by.
              example: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
            replaced_type:
              $ref: '#/components/schemas/ReplaceType'
            replaced_transaction_id:
              type: string
              description: The ID of the transaction that this transaction replaced.
              format: uuid
              example: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
            replaced_transaction_hash:
              type: string
              description: The hash of the transaction that this transaction replaced.
              example: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
        category:
          type: array
          items:
            $ref: '#/components/schemas/TransactionCategory'
          description: A custom transaction category for you to identify your transfers more easily.
        description:
          type: string
          description: The description for your transaction.
          example: withdrawal to exchange trading account
        is_loop:
          type: boolean
          description: |
            Whether the transaction is a Loop transfer. For more information about Loop, see [Loop's website](https://loop.top/).

            - `true`: The transaction is a Loop transfer.
            - `false`: The transaction is not a Loop transfer.
          example: false
        created_timestamp:
          type: integer
          format: int64
          description: 'The time when the transaction was created, in Unix timestamp format, measured in milliseconds.'
          example: 1610445878970
        updated_timestamp:
          type: integer
          format: int64
          description: 'The time when the transaction was updated, in Unix timestamp format, measured in milliseconds.'
          example: 1610445878970
    TransactionDetail:
      allOf:
        - $ref: '#/components/schemas/Transaction'
        - type: object
          properties:
            timeline:
              type: array
              items:
                $ref: '#/components/schemas/TransactionTimeline'
    TransactionApprover:
      type: object
      description: The approver data for transaction.
      properties:
        name:
          type: string
          description: The approver name of the transaction.
          example: 'Approver #1'
        status:
          type: string
          description: The approval status.
          enum:
            - Pending
            - Approved
            - Rejected
          example: Pending
    TransactionTokenAmount:
      type: object
      description: The data for transaction asset information.
      required:
        - asset_id
        - amount
      properties:
        token_id:
          type: string
          description: 'The token ID, which is the unique identifier of a token. You can retrieve the IDs of all the tokens you can use by calling [List enabled tokens](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-tokens).'
          example: ETH_USDT
        asset_id:
          type: string
          description: (This concept applies to Exchange Wallets only) The asset ID. An asset ID is the unique identifier of the asset held within your linked exchange account.
          example: USDT
        amount:
          type: string
          description: |
            Transaction value (Note that this is an absolute value. If you trade 1.5 BTC, then the value is 1.5)
          format: float
          example: '1.5'
    TransactionCategory:
      type: string
      description: A custom transaction category for you to identify your transfers more easily.
      example: Payment
    TransactionDetails:
      allOf:
        - $ref: '#/components/schemas/Transaction'
        - type: object
          properties:
            initiator:
              type: string
              description: Transaction initiator
              example: 'API Prod Key #1'
            approvers:
              type: array
              items:
                $ref: '#/components/schemas/TransactionApprover'
            signers:
              type: array
              items:
                $ref: '#/components/schemas/TransactionSigner'
            nonce:
              type: integer
              description: Transaction nonce
              example: 9
            replaced_by:
              type: string
              description: Replace by transaction hash
              example: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
            fee:
              $ref: '#/components/schemas/TransactionRequestFee'
            fueled_by:
              type: string
              description: Fueled by address
              example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
            confirmed_num:
              type: integer
              description: Transaction confirmed number
              example: 12
            confirming_threshold:
              type: integer
              format: int32
              description: 'Number of confirmations required for a transaction, such as 15 for ETH chain.'
              example: 15
            token_approval:
              $ref: '#/components/schemas/TransactionTokeApproval'
            message:
              type: string
              description: Transaction raw message
              example: this to certify that am owner this wallet address
            algorithm:
              type: string
              description: Transaction message signing algorithm
            timeline:
              type: array
              items:
                $ref: '#/components/schemas/TransactionTimeline'
    TransactionInitiatorType:
      type: string
      enum:
        - API
        - Web
        - App
        - External
      example: API
      description: |
        The transaction initiator type. Possible values include:
          - `API`: An API initiator, who initiates the transaction by using the WaaS API.
          - `Web`: An web initiator, who initiates the transaction from Cobo Portal.
          - `App`: An App initiator, who initiates the transaction from Cobo Portal Apps.
          - `External`: An external initiator, who initiates the transaction outside Cobo.
    TransactionSigner:
      type: object
      description: The signer data for transaction.
      properties:
        signer:
          type: string
          description: The signer name of the transaction.
          example: Cobo TSS
        status:
          type: string
          description: The signing status.
          enum:
            - Pending
            - Signed
            - Timeout
            - Rejected
          example: Signed
        failed_reason:
          type: string
          description: Failed reason of signing process.
          example: Rejected by signer Cobo TSS
    TransactionStatus:
      type: string
      enum:
        - Submitted
        - PendingScreening
        - PendingAuthorization
        - Queued
        - PendingSignature
        - Broadcasting
        - Confirming
        - Completed
        - Failed
        - Rejected
        - Pending
      example: Submitted
      description: |
        The transaction status. Possible values include: 
          - `Submitted`: The transaction is submitted.
          - `PendingScreening`: The transaction is pending screening by Risk Control. 
          - `PendingAuthorization`: The transaction is pending approvals.
          - `PendingSignature`: The transaction is pending signature. 
          - `Broadcasting`: The transaction is being broadcast.
          - `Confirming`: The transaction is waiting for the required number of confirmations.
          - `Completed`: The transaction is completed.
          - `Failed`: The transaction failed.
          - `Rejected`: The transaction is rejected.
          - `Pending`: The transaction is waiting to be included in the next block of the blockchain.
    TransactionSubStatus:
      type: string
      enum:
        - RejectedKYT
        - RejectedTravelRule
        - PendingDoubleCheck
        - PendingSpenderCheck
        - PendingRiskControlCheck
        - PendingApproverCheck
        - RejectedCoboCheck
        - RejectedWhiteList
        - RejectedDoubleCheck
        - RejectedSpenderAuth
        - RejectedRiskControlCheck
        - RejectedApproverAuth
        - RejectedbyMobileCosigner
        - PendingWaitSigner
        - PendingApprovalStart
        - FailedBySigner
        - FailedBroadcasting
        - FailedOnChain
        - Queue
        - PendingBlockConfirmations
        - ReplacedByNewTransaction
        - CanceledBySpender
        - CanceledByAPI
        - OnchainRejection
      example: PendingDoubleCheck
      description: |
        The transaction sub-status. Possible values include: 
          - `PendingDoubleCheck`: The transaction is pending a double check. 
          - `RejectedDoubleCheck`: The transaction is rejected because it failed a double check.
          - `PendingSpenderCheck`: The transaction is pending a spender check.
          - `RejectedSpenderAuth`: The transaction is rejected because it is rejected by the spender.
          - `RejectedTravelRule`: The transaction is rejected because it failed to comply with the Travel Rule.
          - `RejectedKYT`: The transaction is rejected because it did not pass the Know Your Transaction (KYT) compliance checks.
          - `PendingRiskControlCheck`: The transaction is pending for a Risk Control check.
          - `RejectedRiskControlCheck`: The transaction is rejected because it failed the Risk Control check.
          - `PendingApproverCheck`: The transaction is pending approval from the approver.
          - `RejectedApproverAuth`: The transaction is rejected by the approver.
          - `RejectedbyMobileCosigner`: The transaction is rejected by a mobile cosigner.
          - `RejectedCoboCheck`: The transaction is rejected because it failed the internal check by Cobo.
          - `RejectedWhiteList`: The transaction is rejected because the sender or receiver is not included in a whitelist.
          - `PendingWaitSigner`: The transaction is pending signature.
          - `PendingApprovalStart`: The transaction approval is waiting to be started.      
            - For [MPC Wallets (User-Controlled Wallets)](https://manuals.cobo.com/en/portal/mpc-wallets/ucw/introduction), you need to use the Client App and call the UCW SDK to start the transaction approval process.
            - For [MPC Wallets (Organization-Controlled Wallets](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/introduction)):
              - If you are using the [API co-signer](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups), this status indicates that the TSS Node will soon request the callback server to start the [risk controls](https://manuals.cobo.com/en/portal/risk-controls/introduction) check. No further action is required from you at this stage.
              - If you are using the [mobile co-signer](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups), key share holders need to use their [Cobo Guard](https://manuals.cobo.com/en/guard/introduction) to approve the transaction and participate in the signing process.
          - `FailedBySigner`: The transaction failed during the signing process.
          - `FailedBroadcasting`: The transaction failed to be broadcast to the blockchain network.
          - `CanceledBySpender`: The transaction is canceled by a Spender.
          - `CanceledByAPI`: The transaction is canceled by a [Cancel transaction](https://www.cobo.com/developers/v2/api-references/transactions/cancel-transaction) operation.
          - `Queue`: The transaction is queued to be processed by Cobo Portal.
          - `OnchainRejection`: The transaction is rejected from being added to the blockchain.
          - `FailedOnChain`: The transaction failed on the blockchain.
          - `PendingBlockConfirmations`: The transaction is awaiting the required number of confirmations.
          - `ReplacedByNewTransaction`: The transaction has been replaced by a new transaction.
    TransactionTimeline:
      type: object
      description: 'The information about transaction timeline, which lists all statuses that the transaction passes through with timestamps indicating when each status is completed.'
      properties:
        status:
          $ref: '#/components/schemas/TransactionStatus'
        finished:
          type: boolean
          description: |
            Whether the transaction status is completed:
              - `true`: The transaction status is completed.
              - `false`: The transaction is currently in the status.
          example: true
        finished_timestamp:
          type: integer
          format: int64
          description: 'The time when the transaction status is completed in Unix timestamp format, measured in milliseconds.'
          example: 1610445878970
    TransactionTokeApproval:
      allOf:
        - $ref: '#/components/schemas/TokenInfo'
        - type: object
          description: The data for transaction token approval information.
          properties:
            amount:
              type: number
              description: |
                Transaction value (Note that this is an absolute value. If you trade 1.5 BTC, then the value is 1.5)
              format: float
              example: 1.5
            spender:
              type: string
              description: Spender address
              example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
    TransactionType:
      type: string
      enum:
        - Deposit
        - Withdrawal
        - ContractCall
        - MessageSign
        - ExternalSafeTx
      example: Deposit
      description: |
        The transaction type. Possible values include: 
          - `Deposit`: A deposit transaction.
          - `Withdrawal`: A withdrawal transaction.
          - `ContractCall`: A transaction that interacts with a smart contract.
          - `MessageSign`: A transaction that signs a message. 
          - `ExternalSafeTx`: A transaction to a Smart Contract Wallet (Safe{Wallet}) that requires one or multiple signatures to be executed.
    MpcSigningGroup:
      type: object
      description: The information about the Signing Group of an MPC Wallet.
      properties:
        used_key_share_holder_group_id:
          type: string
          description: The ID of the Signing Group.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        used_tss_node_ids:
          type: array
          items:
            type: string
            example: cobo5yb7BNEBwwp5XXedbhnzQfvQtp132W4dH4Jz4x4eDp4KA
          description: The ID of the TSS Nodes that are required to participate in the signature.
    TransactionSourceType:
      type: string
      enum:
        - Asset
        - Org-Controlled
        - User-Controlled
        - 'Safe{Wallet}'
        - Main
        - Sub
        - DepositFromAddress
        - DepositFromWallet
        - DepositFromLoop
      example: DepositFromAddress
      description: |
        The transaction source. Possible values include:
          - `Asset`: A Custodial Wallet (Asset Wallet).
          - `Org-Controlled`: An MPC Wallet (Organization-Controlled Wallet).
          - `User-Controlled`: An MPC Wallet (User-Controlled Wallet).
          - `Safe{Wallet}`: A Smart Contract Wallet (Safe{Wallet}).
          - `Main`: An Exchange Wallet (Main Account).
          - `Sub`: An Exchange Wallet (Sub Account).
          - `DepositFromAddress`: An address that can be a Cobo's wallet address or an external address.
          - `DepositFromWallet`: An Exchange Wallet.
          - `DepositFromLoop`: A transfer sender through the Loop transfer network.

        For the same transaction, the transaction source varies depending on whether you are the initiator or the receiver of the transaction. 

          - As the initiator, you will see detailed information about the transaction source, and the `source` will be displayed as one of the following wallet sub-types: `Asset`, `Org-Controlled`, `User-Controlled`, `Safe{Wallet}`, `Main`, or `Sub`.
          - As the receiver, you will see the `source` as either `DepositFromAddress`, `DepositFromWallet`, or `DepositFromLoop`. If the transaction is from the Loop transfer network, the source will be `DepositFromLoop`. Otherwise, it will be either `DepositFromWallet` (indicating an Exchange Wallet) or `DepositFromAddress` (indicating other wallet type than an Exchange Wallet or an external address).
    TransactionCustodialAssetWalletSource:
      type: object
      description: |
        Information about the transaction source type `Asset`.
      title: Custodial Wallet (Asset)
      required:
        - source_type
        - wallet_id
      properties:
        source_type:
          $ref: '#/components/schemas/TransactionSourceType'
        wallet_id:
          type: string
          description: The wallet ID.
          format: uuid
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    TransactionMPCWalletSource:
      type: object
      description: |
        Information about the transaction source type `Org-Controlled` and `User-Controlled`.
      title: MPC Wallet
      required:
        - source_type
        - wallet_id
      properties:
        source_type:
          $ref: '#/components/schemas/TransactionSourceType'
        wallet_id:
          type: string
          description: The wallet ID.
          format: uuid
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        address:
          type: string
          description: The wallet address.
          example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
        included_utxos:
          type: array
          items:
            $ref: '#/components/schemas/TransactionUtxo'
        excluded_utxos:
          type: array
          items:
            $ref: '#/components/schemas/TransactionUtxo'
        signer_key_share_holder_group_id:
          type: string
          description: The ID of the key share holder group that is selected to sign the transaction.
          example: b33130a9-6e18-44a9-9e48-8b3b41921f0e
    TransactionSmartContractSafeWalletSource:
      type: object
      description: |
        Information about the transaction source type `Safe{Wallet}`.
      title: Smart Contract Wallet
      required:
        - source_type
        - wallet_id
        - address
        - delegate
      properties:
        source_type:
          $ref: '#/components/schemas/TransactionSourceType'
        wallet_id:
          type: string
          description: The wallet ID.
          format: uuid
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        address:
          type: string
          description: The wallet address.
          example: '0x1234567890123456789012345678901234567890'
        delegate:
          $ref: '#/components/schemas/CoboSafeDelegate'
    TransactionExchangeWalletSource:
      type: object
      description: |
        Information about the transaction source types `Main` and `Sub`.
      title: Exchange Wallet
      required:
        - source_type
        - exchange_id
        - wallet_id
      properties:
        source_type:
          $ref: '#/components/schemas/TransactionSourceType'
        exchange_id:
          $ref: '#/components/schemas/ExchangeId'
        wallet_id:
          type: string
          description: The wallet ID.
          format: uuid
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        trading_account_type:
          type: string
          description: The exchange trading account or a sub-wallet ID.
          example: Asset
    TransactionDepositFromAddressSource:
      type: object
      description: |
        Information about the transaction source type `DepositFromAddress`.
      title: Deposit from Address
      required:
        - source_type
        - addresses
      properties:
        source_type:
          $ref: '#/components/schemas/TransactionSourceType'
        wallet_id:
          type: string
          description: The wallet ID.
          format: uuid
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        wallet_type:
          $ref: '#/components/schemas/WalletType'
        wallet_subtype:
          $ref: '#/components/schemas/WalletSubtype'
        addresses:
          type: array
          items:
            type: string
            example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
          description: A list of addresses.
    TransactionDepositFromWalletSource:
      type: object
      description: |
        Information about the transaction source type `DepositFromWallet`.
      title: Deposit from Wallet
      required:
        - source_type
        - wallet_id
        - wallet_type
        - wallet_subtype
      properties:
        source_type:
          $ref: '#/components/schemas/TransactionSourceType'
        wallet_id:
          type: string
          description: The wallet ID.
          format: uuid
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        wallet_type:
          $ref: '#/components/schemas/WalletType'
        wallet_subtype:
          $ref: '#/components/schemas/WalletSubtype'
        trading_account_type:
          type: string
          description: The exchange trading account or a sub-wallet ID.
          example: Asset
    TransactionDepositFromLoopSource:
      type: object
      description: |
        Information about the transaction source type `DepositFromLoop`.
      title: Deposit from Loop
      required:
        - source_type
      properties:
        source_type:
          $ref: '#/components/schemas/TransactionSourceType'
    TransactionFeeStationWalletSource:
      type: object
      description: The information about the transaction source.
      title: Fee Station
      required:
        - source_type
        - wallet_id
      properties:
        source_type:
          $ref: '#/components/schemas/TransactionSourceType'
        wallet_id:
          type: string
          description: The Wallet ID.
          format: uuid
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    TransactionDestinationType:
      type: string
      enum:
        - Address
        - ExchangeWallet
        - EVM_Contract
        - EVM_EIP_191_Signature
        - EVM_EIP_712_Signature
        - DepositToAddress
        - DepositToWallet
      example: Address
      description: |
        The transaction destination type. Possible values include:
          - `Address`: An address transfer destination, including an address of Custodial Wallets, MPC Wallets, or Smart Contract Wallets (Safe{Wallet}) and an external address.
          - `ExchangeWallet`: An Exchange Wallet transfer destination.
          - `EVM_Contract`: An EVM compatible contract.
          - `EVM_EIP_191_Signature`: An EVM EIP-191 signature. For more details, see [Signed Data Standard](https://eips.ethereum.org/EIPS/eip-191).
          - `EVM_EIP_712_Signature`: An EVM EIP-712 signature. For more details, see [Typed structured data hashing and signing](https://eips.ethereum.org/EIPS/eip-712).
          - `DepositToAddress`: An address that can be a Cobo's wallet address or an external address.
          - `DepositToWallet`: An Exchange Wallet.

        For the same transaction, the transaction destination varies depending on whether you are the initiator or the receiver of the transaction. 

          - As the initiator, you will see detailed information about the transaction destination, and the `destination` will be displayed as one of the following types: `EVM_Contract`, `EVM_EIP_191_Signature`, `EVM_EIP_712_Signature`, `DepositToAddress`, or `DepositToWallet`. `DepositToWallet` indicates the destination is an Exchange Wallet, while `DepositToAddress` indicates the destination is a wallet of other wallet types or an external address.
          - As the receiver, you will see the `destination` as the type `Address` or `ExchangeWallet`. `Address` indicates the destination is a wallet of other wallet types than Exchange Wallets or an external address.
    TransactionDepositToAddressDestination:
      type: object
      description: |
        Information about the transaction destination type `DepositToAddress`.
      title: Deposit to Address
      required:
        - destination_type
        - wallet_id
        - wallet_type
        - address
        - amount
      properties:
        destination_type:
          $ref: '#/components/schemas/TransactionDestinationType'
        wallet_id:
          type: string
          description: The wallet ID.
          format: uuid
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        wallet_type:
          $ref: '#/components/schemas/WalletType'
        wallet_subtype:
          $ref: '#/components/schemas/WalletSubtype'
        address:
          type: string
          description: The destination address.
          example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
        memo:
          type: string
          description: 'The memo that identifies a transaction in order to credit the correct account. For transfers out of Cobo Portal, it is highly recommended to include a memo for the chains such as XRP, EOS, XLM, IOST, BNB_BNB, ATOM, LUNA, and TON.'
          example: '82840924'
        amount:
          type: string
          description: |
            The transfer amount. For example, if you trade 1.5 ETH, then the value is `1.5`.
          example: '1.5'
    TransactionDepositToWalletDestination:
      type: object
      description: |
        Information about the transaction destination type `DepositToWallet`.
      title: Deposit to Wallet
      required:
        - destination_type
        - wallet_id
        - wallet_type
        - wallet_subtype
        - amount
      properties:
        destination_type:
          $ref: '#/components/schemas/TransactionDestinationType'
        wallet_id:
          type: string
          description: The wallet ID.
          format: uuid
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        wallet_type:
          $ref: '#/components/schemas/WalletType'
        wallet_subtype:
          $ref: '#/components/schemas/WalletSubtype'
        trading_account_type:
          type: string
          description: The trading account type.
          example: Asset
        exchange_id:
          $ref: '#/components/schemas/ExchangeId'
        amount:
          type: string
          description: |
            The transfer amount. For example, if you trade 1.5 ETH, then the value is `1.5`.
          example: '1.5'
    TransactionEvmContractDestination:
      title: EVM Contract
      type: object
      description: |
        Information about the transaction destination type `EVM_Contract`.
      required:
        - destination_type
        - address
        - calldata
      properties:
        destination_type:
          $ref: '#/components/schemas/TransactionDestinationType'
        address:
          type: string
          description: The destination address.
          example: '0x0406db8351aa6839169bb363f63c2c808fee8f99'
        value:
          type: string
          description: |
            The transfer amount. For example, if you trade 1.5 ETH, then the value is `1.5`.
          example: '1.5'
        calldata:
          type: string
          description: |
            The data that is used to invoke a specific function or method within the specified contract at the destination address.
          format: byte
          example: 0xa22cb4650000000000000000000000001e0049783f008a0085193e00003d00cd54003c71000000000000000000000000000000000000000000000000000000000000DEMO
    TransactionMessageSignEIP191Destination:
      title: EIP-191 Signature
      description: |
        Information about the transaction destination type `EVM_EIP_191_Signature`.
      type: object
      required:
        - destination_type
        - message
      properties:
        destination_type:
          $ref: '#/components/schemas/TransactionDestinationType'
        message:
          type: string
          description: 'The raw data of the message to be signed, encoded in Base64 format.'
          example: YWFhYQ==
    TransactionMessageSignEIP712Destination:
      title: EIP-712 Signature
      description: |
        Information about the transaction destination type `EVM_EIP_712_Signature`.
      type: object
      required:
        - destination_type
        - structured_data
      properties:
        destination_type:
          $ref: '#/components/schemas/TransactionDestinationType'
        structured_data:
          type: object
          additionalProperties: true
          description: 'The structured data to be signed, formatted as a JSON object according to the EIP-712 standard.'
          example: |
            {"types": {"EIP712Domain": [{"name": "name", "type": "string"}, {"name": "version", "type": "string"}, {"name": "chainId", "type": "uint256"}, {"name": "verifyingContract", "type": "address"}], "Person": [{"name": "name", "type": "string"}, {"name": "wallet", "type": "address"}], "Mail": [{"name": "from", "type": "Person"}, {"name": "to", "type": "Person"}, {"name": "contents", "type": "string"}]}, "primaryType": "Mail", "domain": {"name": "Ether Mail", "version": "1", "chainId": 1, "verifyingContract": "0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC"}, "message": {"from": {"name": "Cow", "wallet": "0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826"}, "to": {"name": "Bob", "wallet": "0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB"}, "contents": "Hello, Bob!"}}
    TransactionTransferToAddressDestination:
      type: object
      description: |
        Information about the transaction destination type `Address`.
      title: Address
      required:
        - destination_type
      properties:
        destination_type:
          $ref: '#/components/schemas/TransactionDestinationType'
        account_output:
          type: object
          properties:
            address:
              type: string
              description: The destination address.
              example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
            memo:
              type: string
              description: 'The memo that identifies a transaction in order to credit the correct account. For transfers out of Cobo Portal, it is highly recommended to include a memo for the chains such as XRP, EOS, XLM, IOST, BNB_BNB, ATOM, LUNA, and TON.'
              example: '82840924'
            amount:
              type: string
              description: |
                The transfer amount. For example, if you trade 1.5 ETH, then the value is `1.5`.
              example: '1.5'
        utxo_outputs:
          type: array
          items:
            type: object
            properties:
              address:
                type: string
                description: The destination address.
                example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
              amount:
                type: string
                description: |
                  The transfer amount. For example, if you trade 1.5 ETH, then the value is `1.5`.
                example: '1.5'
              script:
                type: string
                description: The script of the output. It is a programmable code fragment that defines the conditions under which the UTXO can be spent.
                example: 76a914fb37342f6275b13936799def06f2DEMO
        change_address:
          type: string
          description: The address used to receive the remaining funds or change from the transaction.
          example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
        force_internal:
          type: boolean
          description: |
            Whether the transaction request must be executed as a Loop transfer. For more information about Loop, see [Loop's website](https://loop.top/).
              - `true`: The transaction request must be executed as a Loop transfer.
              - `false`: The transaction request may not be executed as a Loop transfer.
          example: false
        force_external:
          type: boolean
          description: |
            Whether the transaction request must not be executed as a Loop transfer. For more information about Loop, see [Loop's website](https://loop.top/).
              - `true`: The transaction request must not be executed as a Loop transfer.
              - `false`: The transaction request can be executed as a Loop transfer.
          example: false
    TransactionTransferToWalletDestination:
      type: object
      description: |
        Information about the transaction destination type `ExchangeWallet`.
      title: Exchange Wallet
      required:
        - destination_type
        - wallet_id
        - amount
      properties:
        destination_type:
          $ref: '#/components/schemas/TransactionDestinationType'
        wallet_id:
          type: string
          description: The wallet ID.
          format: uuid
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        trading_account_type:
          type: string
          description: The trading account type.
          example: Asset
        exchange_id:
          $ref: '#/components/schemas/ExchangeId'
        amount:
          type: string
          description: |
            The transfer amount. For example, if you trade 1.5 ETH, then the value is `1.5`.
          example: '1.5'
    TransactionResultType:
      type: string
      enum:
        - Signature
      example: Address
      description: |
        The transaction result type. Possible values include:
          - `Signature`: An EVM EIP-191 or EVM EIP-712 signature.
    TransactionSignatureResult:
      title: Signature
      description: The result of a message sign transaction.
      type: object
      required:
        - signature
      properties:
        result_type:
          $ref: '#/components/schemas/TransactionResultType'
        signature:
          type: string
          description: The raw data of the signature.
          example: '0x6a8d82c2b080c18e7c1d187a95b3d9b0b9b20454d5e1d784b8a4625d16772d3f'
    TransactionResult:
      oneOf:
        - $ref: '#/components/schemas/TransactionSignatureResult'
      discriminator:
        propertyName: result_type
        mapping:
          Signature: '#/components/schemas/TransactionSignatureResult'
    TransactionBlockInfo:
      type: object
      description: The information about the transaction block.
      properties:
        block_number:
          type: integer
          format: int64
          description: The block number.
          example: 123
        block_timestamp:
          type: integer
          format: int64
          description: 'The time when the block was created, in Unix timestamp format, measured in milliseconds.'
          example: 1717740319
        block_hash:
          type: string
          description: The block hash.
          example: '0xc9ee947f8bb6027c161888bf0d004bec05e7c2beec7e6b187dc512174e438735'
    TransactionRawTxInfo:
      type: object
      description: The raw transaction information.
      properties:
        used_nonce:
          type: integer
          description: The transaction nonce.
          example: 9
        selected_utxos:
          type: array
          description: The selected UTXOs to be consumed in the transaction.
          items:
            $ref: '#/components/schemas/TransactionUtxo'
        raw_tx:
          type: string
          description: The raw transaction data.
          example: 0xa22cb4650000000000000000000000001e0049783f008a0085193e00003d00cd54003c71000000000000000000000000000000000000000000000000000000000000DEMO
    TransactionUtxo:
      type: object
      description: The UTXO information.
      properties:
        tx_hash:
          type: string
          description: The transaction hash of the UTXO.
          example: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
        vout_n:
          type: integer
          description: The output index of the UTXO.
          example: 0
    TransactionFixedFee:
      type: object
      description: The transaction fee actually charged by the chain that uses the fixed fee model.
      required:
        - fee_type
      title: Fixed from Receipt
      allOf:
        - type: object
          properties:
            fee_type:
              $ref: '#/components/schemas/FeeType'
            token_id:
              type: string
              description: The token ID of the transaction fee.
              example: TRON
            fee_used:
              type: string
              description: The transaction fee.
              example: '0.1'
        - $ref: '#/components/schemas/MaxFeeAmount'
    TransactionEvmEip1559Fee:
      type: object
      description: |
        The transaction fee actually charged by the chain that uses the EIP-1559 fee model. 
        The transaction fee is calculated by multiplying the gas price by the used gas units. This can be expressed as: Transaction fee = gas price * used gas units.
      title: EIP-1559 from Receipt
      required:
        - fee_type
      allOf:
        - type: object
          properties:
            fee_type:
              $ref: '#/components/schemas/FeeType'
            token_id:
              type: string
              description: The token ID of the transaction fee.
              example: ETH
            effective_gas_price:
              type: string
              description: 'The gas price (gas fee per gas unit) on the chain, in wei. The gas price represents the amount of ETH that must be paid to validators for processing transactions.'
              example: '100000000'
            fee_used:
              type: string
              description: The transaction fee.
              example: '0.1'
            gas_used:
              type: string
              description: The number of gas units used in the transaction.
              example: '100000000'
        - $ref: '#/components/schemas/EvmEip1559FeeBasePrice'
        - $ref: '#/components/schemas/FeeGasLimit'
    TransactionEvmLegacyFee:
      type: object
      description: |
        The transaction fee actually charged by the chain that uses the legacy fee model. 
        The transaction fee is calculated by multiplying the gas price by the used gas. This can be expressed as: Transaction fee = gas price * used gas units.
      title: Legacy from Receipt
      required:
        - fee_type
      allOf:
        - type: object
          properties:
            fee_type:
              $ref: '#/components/schemas/FeeType'
            token_id:
              type: string
              description: The token ID of the transaction fee.
              example: ETH
            fee_used:
              type: string
              description: The transaction fee.
              example: '0.1'
            gas_used:
              type: string
              description: The gas units used in the transaction.
              example: '100000000'
        - $ref: '#/components/schemas/EvmLegacyFeeBasePrice'
        - $ref: '#/components/schemas/FeeGasLimit'
    TransactionUtxoFee:
      type: object
      description: |
        The transaction fee actually charged by the chain that uses the UTXO fee model, such as Bitcoin.
        The transaction fee is calculated by multiplying the fee rate by the transaction size. This can be expressed as: Transaction fee = fee rate * transaction size.
      title: UTXO from Receipt
      required:
        - fee_type
      allOf:
        - type: object
          properties:
            fee_type:
              $ref: '#/components/schemas/FeeType'
            token_id:
              type: string
              description: The token ID of the transaction fee.
              example: BTC
            fee_used:
              type: string
              description: The transaction fee.
              example: '0.1'
            max_fee_amount:
              type: string
              description: The maximum fee that you are willing to pay for the transaction. The transaction will fail if the transaction fee exceeds the maximum fee.
              example: '0.1'
        - $ref: '#/components/schemas/UtxoFeeBasePrice'
    TransactionFee:
      oneOf:
        - $ref: '#/components/schemas/TransactionEvmEip1559Fee'
        - $ref: '#/components/schemas/TransactionEvmLegacyFee'
        - $ref: '#/components/schemas/TransactionUtxoFee'
        - $ref: '#/components/schemas/TransactionFixedFee'
      discriminator:
        propertyName: fee_type
        mapping:
          EVM_EIP_1559: '#/components/schemas/TransactionEvmEip1559Fee'
          EVM_Legacy: '#/components/schemas/TransactionEvmLegacyFee'
          UTXO: '#/components/schemas/TransactionUtxoFee'
          Fixed: '#/components/schemas/TransactionFixedFee'
    TransactionRbf:
      type: object
      description: The information about the request to drop or to speed up transactions.
      required:
        - request_id
        - fee
      properties:
        request_id:
          type: string
          description: The request ID that is used to track a transaction request. The request ID is provided by you and must be unique within your organization.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        fee:
          $ref: '#/components/schemas/TransactionRequestFee'
        source:
          oneOf:
            - $ref: '#/components/schemas/MpcTransferSource'
          discriminator:
            propertyName: source_type
            mapping:
              Org-Controlled: '#/components/schemas/MpcTransferSource'
              User-Controlled: '#/components/schemas/MpcTransferSource'
        category_names:
          type: array
          description: The custom category for you to identify your transactions.
          items:
            type: string
            example: Trading
        description:
          type: string
          description: The description of the RBF transaction.
          example: Speedup transaction
    TransactionResend:
      type: object
      description: The information about the request to resend transactions.
      required:
        - request_id
      properties:
        request_id:
          type: string
          description: The request ID that is used to track a transaction request. The request ID is provided by you and must be unique within your organization.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    ReplaceType:
      type: string
      enum:
        - Drop
        - Resend
        - SpeedUp
      example: Resend
      description: |
        The `replaced_by_type` property indicates the replacement type of the transaction that this transaction was replaced by, and the `replaced_type` property indicates the replacement type of the transaction that this transaction replaced.
        Possible values include: 
          - `Drop`: To drop a transaction.
          - `Resend`: To resend a transaction.
          - `SpeedUp`: To speed up a transaction.
    CustodialTransferSource:
      type: object
      description: The information about the transaction source types `Asset` and `Web3`.
      title: Transfer from Custodial Wallet
      required:
        - source_type
        - wallet_id
      properties:
        source_type:
          $ref: '#/components/schemas/WalletSubtype'
        wallet_id:
          type: string
          description: The wallet ID.
          format: uuid
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    MpcTransferSource:
      type: object
      description: |
        The information about the transaction source types `Org-Controlled` and `User-Controlled`. 

        If you specify both the `address` or `included_utxos` properties, the specified included UTXOs must belong to the address.
      title: Transfer from MPC Wallet
      required:
        - source_type
        - wallet_id
      properties:
        source_type:
          $ref: '#/components/schemas/WalletSubtype'
        wallet_id:
          type: string
          description: The wallet ID.
          format: uuid
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        address:
          type: string
          description: The wallet address.
          example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
        included_utxos:
          type: array
          items:
            $ref: '#/components/schemas/TransactionUtxo'
        excluded_utxos:
          type: array
          items:
            $ref: '#/components/schemas/TransactionUtxo'
    SafeTransferSource:
      type: object
      description: 'The information about the transaction source type `Safe{Wallet}`.'
      title: Transfer from Smart Contract Wallet
      required:
        - source_type
        - wallet_id
        - address
        - delegate
      properties:
        source_type:
          $ref: '#/components/schemas/WalletSubtype'
        wallet_id:
          type: string
          description: The wallet ID.
          format: uuid
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        address:
          type: string
          description: The wallet address.
          example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
        delegate:
          $ref: '#/components/schemas/CoboSafeDelegate'
    CoboSafeDelegateType:
      type: string
      enum:
        - Org-Controlled
        - User-Controlled
      example: Org-Controlled
      default: Org-Controlled
      description: |
        The wallet subtype of the Delegate. Possible values include:
        - `Org-Controlled`: MPC Wallets (Organization-Controlled Wallets).
        - `User-Controlled`: MPC Wallets (User-Controlled Wallets).
    CoboSafeDelegate:
      oneOf:
        - $ref: '#/components/schemas/MPCDelegate'
      discriminator:
        propertyName: delegate_type
        mapping:
          Org-Controlled: '#/components/schemas/MPCDelegate'
          User-Controlled: '#/components/schemas/MPCDelegate'
    MPCDelegate:
      title: MPC Wallet Delegate
      description: The information about the MPC Wallet as the Delegate.
      type: object
      required:
        - delegate_type
        - wallet_id
        - address
      properties:
        delegate_type:
          $ref: '#/components/schemas/CoboSafeDelegateType'
        wallet_id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
          description: 'The wallet ID of the Delegate. This is required when initiating a transfer from Smart Contract Wallets (Safe{Wallet}).'
        address:
          type: string
          example: '0x1234567890123456789012345678901234567890'
          description: 'The wallet address of the Delegate. This is required when initiating a transfer from Smart Contract Wallets (Safe{Wallet}).'
    ExchangeTransferSource:
      type: object
      description: |
        The information about the transaction source types `Main` and `Sub`. 

        Assets in an Exchange Wallet (Sub Account) can only be transferred to another Exchange Wallet.
      title: Transfer from Exchange Wallet
      required:
        - source_type
        - wallet_id
        - trading_account_type
      properties:
        source_type:
          $ref: '#/components/schemas/WalletSubtype'
        wallet_id:
          type: string
          description: The wallet ID.
          format: uuid
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        trading_account_type:
          type: string
          description: The trading account type.
          example: Asset
    TransferSource:
      oneOf:
        - $ref: '#/components/schemas/CustodialTransferSource'
        - $ref: '#/components/schemas/MpcTransferSource'
        - $ref: '#/components/schemas/SafeTransferSource'
        - $ref: '#/components/schemas/ExchangeTransferSource'
      discriminator:
        propertyName: source_type
        mapping:
          Asset: '#/components/schemas/CustodialTransferSource'
          Org-Controlled: '#/components/schemas/MpcTransferSource'
          User-Controlled: '#/components/schemas/MpcTransferSource'
          'Safe{Wallet}': '#/components/schemas/SafeTransferSource'
          Main: '#/components/schemas/ExchangeTransferSource'
          Sub: '#/components/schemas/ExchangeTransferSource'
    AddressTransferDestination:
      type: object
      description: |
        The information about the transaction destination type `Address`. 

        Specify either the `account_output` property or the `utxo_outputs` property. You can transfer tokens to multiple addresses only if you use MPC Wallets as the transaction source. You should use the `utxo_outputs` property to specify the destination addresses.
      title: Transfer to Address
      required:
        - destination_type
      properties:
        destination_type:
          $ref: '#/components/schemas/TransferDestinationType'
        account_output:
          type: object
          required:
            - address
            - amount
          properties:
            address:
              type: string
              description: The destination address.
              example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
            memo:
              type: string
              description: 'The memo that identifies a transaction in order to credit the correct account. For transfers out of Cobo Portal, it is highly recommended to include a memo for the chains such as XRP, EOS, XLM, IOST, BNB_BNB, ATOM, LUNA, and TON.'
              example: '82840924'
            amount:
              type: string
              description: |
                The transfer amount. For example, if you trade 1.5 ETH, then the value is `1.5`.
              example: '1.5'
        utxo_outputs:
          type: array
          items:
            type: object
            required:
              - address
            properties:
              address:
                type: string
                description: The destination address.
                example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
              amount:
                type: string
                description: |
                  The transfer amount. For example, if you trade 1.5 ETH, then the value is `1.5`.
                example: '1.5'
              script:
                type: string
                description: The script of the output. It is a programmable code fragment that defines the conditions under which the UTXO can be spent.
                example: 76a914fb37342f6275b13936799def06f2DEMO
        change_address:
          type: string
          description: The address used to receive the remaining funds or change from the transaction.
          example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
        force_internal:
          type: boolean
          description: |
            Whether the transaction request must be executed as a Loop transfer. For more information about Loop, see [Loop's website](https://loop.top/).
              - `true`: The transaction request must be executed as a Loop transfer.
              - `false`: The transaction request may not be executed as a Loop transfer.
            <Note>Please do not set both `force_internal` and `force_internal` as `true`.</Note>
          example: false
        force_external:
          type: boolean
          description: |
            Whether the transaction request must not be executed as a Loop transfer. For more information about Loop, see [Loop's website](https://loop.top/).
              - `true`: The transaction request must not be executed as a Loop transfer.
              - `false`: The transaction request can be executed as a Loop transfer.
            <Note>Please do not set both `force_internal` and `force_internal` as `true`.</Note>
          example: false
    ExchangeTransferDestination:
      type: object
      description: |
        The information about the transaction destination type `ExchangeWallet`. 

        An Exchange Wallet (Sub Account) can only receive asset transfers from another Exchange Wallet.
      title: Transfer to Exchange Wallet
      required:
        - destination_type
        - wallet_id
        - trading_account_type
        - amount
      properties:
        destination_type:
          $ref: '#/components/schemas/TransferDestinationType'
        wallet_id:
          type: string
          description: The wallet ID.
          format: uuid
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        trading_account_type:
          type: string
          description: The trading account type.
          example: Asset
        amount:
          type: string
          description: |
            The transfer amount. For example, if you trade 1.5 ETH, then the value is `1.5`.
          example: '1.5'
    TransferDestinationType:
      type: string
      enum:
        - Address
        - ExchangeWallet
      example: Address
      description: |
        The transaction destination type. Possible values include:
        - `Address`: An address, including an address of Custodial Wallets, MPC Wallets, or Smart Contract Wallets (Safe{Wallet}) and an external address.
        - `ExchangeWallet`: An Exchange Wallet.
    TransferDestination:
      oneOf:
        - $ref: '#/components/schemas/AddressTransferDestination'
        - $ref: '#/components/schemas/ExchangeTransferDestination'
      discriminator:
        propertyName: destination_type
        mapping:
          Address: '#/components/schemas/AddressTransferDestination'
          ExchangeWallet: '#/components/schemas/ExchangeTransferDestination'
    TransferParams:
      type: object
      description: The information about a token transfer.
      required:
        - request_id
        - request_type
        - source
        - token_id
        - destination
      properties:
        request_id:
          type: string
          description: The request ID that is used to track a transaction request. The request ID is provided by you and must be unique within your organization.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        source:
          $ref: '#/components/schemas/TransferSource'
        token_id:
          type: string
          description: 'The token ID of the transferred token. You can retrieve the IDs of all the tokens you can use by calling [List enabled tokens](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-tokens). For transfers from Exchange Wallets, this property value represents the asset ID.'
          example: ETH_USDT
        destination:
          $ref: '#/components/schemas/TransferDestination'
        category_names:
          type: array
          description: The custom category for you to identify your transactions.
          items:
            type: string
            example: Trading
        description:
          type: string
          description: The description of the transfer.
          example: Transfer from wallet
        fee:
          $ref: '#/components/schemas/TransactionRequestFee'
    EstimateFeeRequestType:
      type: string
      enum:
        - Transfer
        - ContractCall
      example: Transfer
      description: |
        The request type. Possible values include:
          - `Transfer`: A request to transfer tokens.
          - `ContractCall`: A request to interact with a smart contract.
    EstimateFeeParams:
      oneOf:
        - $ref: '#/components/schemas/EstimateTransferFeeParams'
        - $ref: '#/components/schemas/EstimateContractCallFeeParams'
      discriminator:
        propertyName: request_type
        mapping:
          Transfer: '#/components/schemas/EstimateTransferFeeParams:'
          Call: '#/components/schemas/EstimateContractCallFeeParams:'
    EstimateTransferFeeParams:
      type: object
      description: The information about a token transfer.
      title: Transfer
      required:
        - request_id
        - request_type
        - source
        - token_id
        - destination
      properties:
        request_id:
          type: string
          description: The request ID that is used to track a transaction request. The request ID is provided by you and must be unique within your organization.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        request_type:
          $ref: '#/components/schemas/EstimateFeeRequestType'
        source:
          $ref: '#/components/schemas/TransferSource'
        token_id:
          type: string
          description: 'The token ID of the transferred token. You can retrieve the IDs of all the tokens you can use by calling [List enabled tokens](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-tokens).'
          example: ETH_USDT
        destination:
          $ref: '#/components/schemas/TransferDestination'
        fee_type:
          $ref: '#/components/schemas/FeeType'
    EstimateContractCallFeeParams:
      type: object
      description: The information about a transaction that interacts with a smart contract
      title: Contract Call
      required:
        - request_id
        - request_type
        - chain_id
        - source
        - destination
      properties:
        request_id:
          type: string
          description: The request ID that is used to track a transaction request. The request ID is provided by you and must be unique within your organization.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        request_type:
          $ref: '#/components/schemas/EstimateFeeRequestType'
        chain_id:
          type: string
          description: 'The chain ID, which is the unique identifier of a blockchain. You can retrieve the IDs of all the chains you can use by calling [List enabled chains](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-chains).'
          example: ETH
        source:
          $ref: '#/components/schemas/ContractCallSource'
        destination:
          $ref: '#/components/schemas/ContractCallDestination'
        fee_type:
          $ref: '#/components/schemas/FeeType'
    BaseContractCallSource:
      type: object
      description: The information about the transaction source type `Org-Controlled` and `User-Controlled`.
      required:
        - source_type
        - wallet_id
        - address
      properties:
        source_type:
          $ref: '#/components/schemas/ContractCallSourceType'
        wallet_id:
          type: string
          description: The wallet ID.
          format: uuid
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        address:
          type: string
          description: The wallet address.
          example: '0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045'
    MpcContractCallSource:
      title: Contract Call from MPC Wallet
      allOf:
        - $ref: '#/components/schemas/BaseContractCallSource'
        - type: object
          properties:
            nonce:
              type: integer
              description: The transaction nonce.
              example: 9
    SafeContractCallSource:
      title: Contract Call from Smart Contract Wallet
      description: 'The information about the transaction source type `Safe{Wallet}`.'
      allOf:
        - $ref: '#/components/schemas/BaseContractCallSource'
        - type: object
          required:
            - delegate
          properties:
            delegate:
              $ref: '#/components/schemas/CoboSafeDelegate'
    ContractCallSourceType:
      type: string
      enum:
        - Org-Controlled
        - User-Controlled
        - 'Safe{Wallet}'
      example: Org-Controlled
      description: |
        The type of the wallet. Possible values include:
        - `Org-Controlled`: MPC Wallets (Organization-Controlled).
        - `User-Controlled`: MPC Wallets (User-Controlled).
        - `Safe{Wallet}`: Smart Contract Wallets (Safe{Wallet}).
    ContractCallSource:
      oneOf:
        - $ref: '#/components/schemas/MpcContractCallSource'
        - $ref: '#/components/schemas/SafeContractCallSource'
      discriminator:
        propertyName: source_type
        mapping:
          Org-Controlled: '#/components/schemas/MpcContractCallSource'
          User-Controlled: '#/components/schemas/MpcContractCallSource'
          'Safe{Wallet}': '#/components/schemas/SafeContractCallSource'
    ContractCallDestinationType:
      type: string
      enum:
        - EVM_Contract
      example: EVM_Contract
      description: |
        The type of the contract format. Possible values include:
        - `EVM_Contract`: EVM compatible contracts.
    EvmContractCallDestination:
      title: EVM Contract
      type: object
      description: The information about the transaction destination.
      required:
        - destination_type
        - address
        - calldata
      properties:
        destination_type:
          $ref: '#/components/schemas/ContractCallDestinationType'
        address:
          type: string
          description: The destination address.
          example: '0x0406db8351aa6839169bb363f63c2c808fee8f99'
        value:
          type: string
          description: |
            The transfer amount. For example, if you trade 1.5 ETH, then the value is `1.5`.
          example: '1.5'
        calldata:
          type: string
          description: |
            The data that is used to invoke a specific function or method within the specified contract at the destination address.
          format: byte
          example: 0xa22cb4650000000000000000000000001e0049783f008a0085193e00003d00cd54003c71000000000000000000000000000000000000000000000000000000000000DEMO
    ContractCallDestination:
      oneOf:
        - $ref: '#/components/schemas/EvmContractCallDestination'
      discriminator:
        propertyName: destination_type
        mapping:
          EVM: '#/components/schemas/EvmContractCallDestination'
    ContractCallParams:
      type: object
      description: The information about a transaction that interacts with a smart contract
      title: Contract call
      required:
        - request_id
        - request_type
        - chain_id
        - source
        - destination
      properties:
        request_id:
          type: string
          description: The request ID that is used to track a transaction request. The request ID is provided by you and must be unique within your organization.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        chain_id:
          type: string
          description: 'The chain ID, which is the unique identifier of a blockchain. You can retrieve the IDs of all the chains you can use by calling [List enabled chains](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-chains).'
          example: ETH
        source:
          $ref: '#/components/schemas/ContractCallSource'
        destination:
          $ref: '#/components/schemas/ContractCallDestination'
        description:
          type: string
          description: The description of the contract call transaction.
          example: Transaction to call a smart contract initiated from a wallet
        category_names:
          type: array
          description: The custom category for you to identify your transactions.
          items:
            type: string
            example: Trading
        fee:
          $ref: '#/components/schemas/TransactionRequestFee'
    MpcMessageSignSource:
      title: Message Sign from MPC Wallet
      type: object
      required:
        - source_type
        - wallet_id
        - address
      properties:
        source_type:
          $ref: '#/components/schemas/MessageSignSourceType'
        wallet_id:
          type: string
          description: The wallet ID.
          format: uuid
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        address:
          type: string
          description: The wallet address.
          example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
    MessageSignSourceType:
      type: string
      enum:
        - Org-Controlled
        - User-Controlled
      example: Org-Controlled
      description: |
        The wallet subtype. Possible values include:
        - `Org-Controlled`: MPC Wallets (Organization-Controlled).
        - `User-Controlled`: MPC Wallets (User-Controlled).
    MessageSignSource:
      oneOf:
        - $ref: '#/components/schemas/MpcMessageSignSource'
      discriminator:
        propertyName: source_type
        mapping:
          Org-Controlled: '#/components/schemas/MpcMessageSignSource'
          User-Controlled: '#/components/schemas/MpcMessageSignSource'
    EvmEIP191MessageSignDestination:
      title: EIP-191 Signature
      description: The information about the destination `EVM_EIP_191_Signature`.
      type: object
      required:
        - destination_type
        - message
      properties:
        destination_type:
          $ref: '#/components/schemas/MessageSignDestinationType'
        message:
          type: string
          description: 'The raw data of the message to be signed, encoded in Base64 format.'
          example: YWFhYQ==
    EvmEIP712MessageSignDestination:
      title: EIP-712 Signature
      description: The information about the destination `EVM_EIP_712_Signature`.
      type: object
      required:
        - destination_type
        - structured_data
      properties:
        destination_type:
          $ref: '#/components/schemas/MessageSignDestinationType'
        structured_data:
          type: object
          additionalProperties: true
          description: 'The structured data to be signed, formatted as a JSON object according to the EIP-712 standard.'
          example: |
            {"types": {"EIP712Domain": [{"name": "name", "type": "string"}, {"name": "version", "type": "string"}, {"name": "chainId", "type": "uint256"}, {"name": "verifyingContract", "type": "address"}], "Person": [{"name": "name", "type": "string"}, {"name": "wallet", "type": "address"}], "Mail": [{"name": "from", "type": "Person"}, {"name": "to", "type": "Person"}, {"name": "contents", "type": "string"}]}, "primaryType": "Mail", "domain": {"name": "Ether Mail", "version": "1", "chainId": 1, "verifyingContract": "0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC"}, "message": {"from": {"name": "Cow", "wallet": "0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826"}, "to": {"name": "Bob", "wallet": "0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB"}, "contents": "Hello, Bob!"}}
    MessageSignDestinationType:
      type: string
      enum:
        - EVM_EIP_191_Signature
        - EVM_EIP_712_Signature
      example: EVM_EIP_191_Signature
      description: |
        The type of the signature format. Possible values include:
        - `EVM_EIP_191`: [EIP-191: Signed Data Standard](https://eips.ethereum.org/EIPS/eip-191).
        - `EVM_EIP_712`: [EIP-712: Typed structured data hashing and signing](https://eips.ethereum.org/EIPS/eip-712).
    MessageSignDestination:
      oneOf:
        - $ref: '#/components/schemas/EvmEIP191MessageSignDestination'
        - $ref: '#/components/schemas/EvmEIP712MessageSignDestination'
      discriminator:
        propertyName: destination_type
        mapping:
          EVM_EIP_191: '#/components/schemas/EvmEIP191MessageSignDestination'
          EVM_EIP_712: '#/components/schemas/EvmEIP712MessageSignDestination'
    MessageSignParams:
      type: object
      description: The information about a transaction that signs a message. You can provide the message either as raw data or as structured data.
      required:
        - request_id
        - request_type
        - chain_id
        - source
        - destination
      properties:
        request_id:
          type: string
          description: The request ID that is used to track a transaction request. The request ID is provided by you and must be unique within your organization.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        chain_id:
          type: string
          description: 'The chain ID, which is the unique identifier of a blockchain. You can retrieve the IDs of all the chains you can use by calling [List enabled chains](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-chains).'
          example: ETH
        source:
          $ref: '#/components/schemas/MessageSignSource'
        destination:
          $ref: '#/components/schemas/MessageSignDestination'
        description:
          type: string
          description: The description of the message sign transaction.
          example: Transaction to sign a message initiated from a wallet
        category_names:
          type: array
          description: The custom category for you to identify your transactions.
          items:
            type: string
            example: Trading
    WebhookEvent:
      type: object
      description: The webhook event payload.
      required:
        - id
        - url
        - created_timestamp
        - type
        - data
      properties:
        event_id:
          description: The event ID.
          type: string
          format: uuid
          example: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
        url:
          description: The webhook endpoint URL.
          maxLength: 500
          type: string
          format: url
          example: 'https://example.com/webhook'
        created_timestamp:
          description: 'The time when the event occurred, in Unix timestamp format, measured in milliseconds.'
          type: integer
          format: int64
          example: 1701396866000
        type:
          $ref: '#/components/schemas/WebhookEventType'
        data:
          $ref: '#/components/schemas/WebhookEventData'
        status:
          $ref: '#/components/schemas/WebhookEventStatus'
        next_retry_timestamp:
          description: |
            The timestamp indicating the next scheduled retry to deliver this event, in Unix timestamp format, measured in milliseconds. This field is only present if the event status is `Retrying`.
          type: integer
          format: int64
          example: 1701396866000
        retries_left:
          description: The number of retries left. This field is only present if the event status is `Retrying`.
          type: integer
          example: 3
    WebhookEventDataType:
      type: object
      description: The data type of the event.
      required:
        - data_type
      properties:
        data_type:
          type: string
          enum:
            - Transaction
            - TSSRequest
          description: |-

            The data type of the event.
            - `Transaction`: The transaction event data.
            - `TSSRequest`: The TSS request event data.
          example: Transaction
    WebhookEventData:
      oneOf:
        - $ref: '#/components/schemas/TransactionWebhookEventData'
        - $ref: '#/components/schemas/TSSRequestWebhookEventData'
      discriminator:
        propertyName: data_type
        mapping:
          Transaction: '#/components/schemas/TransactionWebhookEventData'
          TSSRequest: '#/components/schemas/TSSRequestWebhookEventData'
    TransactionWebhookEventData:
      title: Transaction Event Data
      allOf:
        - $ref: '#/components/schemas/WebhookEventDataType'
        - $ref: '#/components/schemas/Transaction'
    TSSRequestWebhookEventData:
      title: TSS Request Event Data
      allOf:
        - $ref: '#/components/schemas/WebhookEventDataType'
        - $ref: '#/components/schemas/TSSRequest'
    WebhookEventType:
      type: string
      enum:
        - wallets.transaction.created
        - wallets.transaction.updated
        - wallets.transaction.failed
        - wallets.transaction.succeeded
        - wallets.mpc.tss_request.created
        - wallets.mpc.tss_request.updated
        - wallets.mpc.tss_request.failed
        - wallets.mpc.tss_request.succeeded
      example: wallets.transaction.created
      description: 'The event type. To learn the trigger condition of each event type, refer to [Webhook event types and event data](/v2/guides/webhooks-callbacks/webhook-event-type).'
    WebhookEventStatus:
      type: string
      enum:
        - Success
        - Retrying
        - Failed
      example: Success
      description: |-
        The event status. Possible values include:
        - `Success`: The event has been delivered, and the webhook endpoint has responded to the event.
        - `Retrying`: The event has been delivered, but the webhook endpoint has not responded. In this case, Cobo will retry delivering the event.
        - `Failed`: The event cannot be delivered and Cobo will stop retrying. This may occur if the number of retries reaches 10, or if the event has been delivered but the webhook endpoint responded with an error.
    WebhookEventLog:
      type: object
      description: The webhook event log.
      required:
        - id
        - created_timestamp
        - status
        - request_headers
        - request_body
        - success
      properties:
        id:
          description: The event log ID.
          type: string
          format: uuid
          example: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
        created_timestamp:
          description: 'The time when the log was created, in Unix timestamp format, measured in milliseconds.'
          type: integer
          format: int64
          example: 1701396866000
        request_headers:
          type: object
          description: The request headers of the webhook event.
          example: '{"Content-Type": "application/json"}'
        request_body:
          $ref: '#/components/schemas/WebhookEvent'
        response_body:
          type: string
          description: The response body of the webhook event.
        response_status_code:
          type: integer
          description: The response status code of the webhook event.
          example: 200
        response_time:
          type: integer
          description: 'The response time of the webhook event, in milliseconds.'
          example: 100
        success:
          type: boolean
          description: Whether the webhook event has been successfully delivered.
          example: true
        failure_reason:
          type: string
          description: The reason why the webhook event fails to be delivered.
          example: Connect Timeout
    WebhookEndpoint:
      type: object
      description: The information about a webhook endpoint.
      required:
        - url
        - subscribed_events
        - created_timestamp
        - id
        - status
      properties:
        url:
          description: The webhook endpoint URL.
          maxLength: 500
          type: string
          format: url
          example: 'https://example.com/webhook'
        subscribed_events:
          description: The event types subscribed by a webhook endpoint.
          items:
            $ref: '#/components/schemas/WebhookEventType'
          type: array
        created_timestamp:
          description: 'The time when the endpoint was registered, in Unix timestamp format, measured in seconds.'
          type: integer
          format: int64
          example: 1701396866000
        endpoint_id:
          description: The webhook endpoint ID.
          type: string
          format: uuid
          example: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
        status:
          $ref: '#/components/schemas/WebhookEndpointStatus'
        description:
          description: The description of the webhook endpoint.
          type: string
          example: My webhook endpoint
    WebhookEndpointStatus:
      type: string
      enum:
        - STATUS_ACTIVE
        - STATUS_INACTIVE
        - STATUS_PENDING_ACTIVE
        - STATUS_PENDING_INACTIVE
        - STATUS_PENDING_UPDATE
        - STATUS_REJECT_ACTIVE
      example: STATUS_ACTIVE
      description: |
        The webhook endpoint status. Possible values include:
        - `STATUS_ACTIVE`: The endpoint is currently in use.
        - `STATUS_INACTIVE`: The endpoint has been revoked and can no longer receive webhook events.
        - `STATUS_PENDING_ACTIVE`: The request to create the endpoint is awaiting approval. After the approval, the endpoint will be available for use.
        - `STATUS_PENDING_INACTIVE`: The request to revoke the endpoint is awaiting approval. After the approval,the endpoint will no longer receive webhook events.
        - `STATUS_PENDING_UPDATE`: The request to update the endpoint is awaiting approval. After the approval, the endpoint will be updated.
        - `STATUS_REJECT_ACTIVE`: The request to create the endpoint has been rejected.
    StakingSource:
      oneOf:
        - $ref: '#/components/schemas/MpcContractCallSource'
        - $ref: '#/components/schemas/SafeContractCallSource'
      discriminator:
        propertyName: source_type
        mapping:
          Org-Controlled: '#/components/schemas/MpcContractCallSource'
          User-Controlled: '#/components/schemas/MpcContractCallSource'
          'Safe{Wallet}': '#/components/schemas/SafeContractCallSource'
    BaseStakeExtra:
      type: object
      description: Base stake extra.
      required:
        - pool_type
      properties:
        pool_type:
          $ref: '#/components/schemas/StakingPoolType'
    BabylonStakeExtra:
      allOf:
        - $ref: '#/components/schemas/BaseStakeExtra'
        - type: object
          description: The stake extra for babylon.
          required:
            - finality_provider_public_key
            - stake_block_time
          properties:
            finality_provider_public_key:
              description: The public key of finality provider.
              type: string
              pattern: '^[0-9a-fA-F]{64}$'
              example: '0000000000000000000000000000000000000000000000000000000000000000'
            stake_block_time:
              description: The stake block time.
              type: integer
              format: int64
              example: 2000
            only_sign:
              description: |
                Whether to only sign transactions. Default is `false`, if set to `true`, 
                the transaction will not be submitted to the blockchain automatically.
                You can call `Broadcast transactions` to submit the transaction to the blockchain, 
                Or you can find the signed raw_tx by `Get transaction information` and broadcast it yourself.
              type: boolean
              example: true
    EigenLayerLstStakeExtra:
      allOf:
        - $ref: '#/components/schemas/BaseStakeExtra'
        - type: object
          description: The stake extra of eigen layer lst token.
          required:
            - id
          properties:
            operator:
              description: The operator address.
              type: string
              example: '0xdAC17F958D2ee523a2206206994597C13D831ec7'
    EigenLayerNativeStakeExtra:
      allOf:
        - $ref: '#/components/schemas/BaseStakeExtra'
        - type: object
          description: The stake extra of eigen layer native ETH.
          properties:
            fee_recipient:
              description: 'The fee recipient address, if not provided the staker address will be used.'
              type: number
              format: int32
              example: 30
    Activity:
      type: object
      description: The staking activity.
      required:
        - stake_id
        - pool_id
        - amount
        - status
        - created_at
        - updated_at
        - token_id
      properties:
        id:
          description: The unique id of the activity.
          type: string
          example: 0011039d-27fb-49ba-b172-6e0aa80e37ec
        initiator:
          description: The initiator of the activity.
          type: string
          example: vanya@cobo.com
        type:
          $ref: '#/components/schemas/ActivityType'
        wallet_id:
          type: string
          example: 0111039d-27fb-49ba-b172-6e0aa80e37ec
          description: The id of the wallet to stake.
        address:
          type: string
          example: '0x0000000000000000000000000000000000000000'
          description: The staker wallet address.
        pool_id:
          type: string
          example: babylon_btc
          description: The id of the staking pool.
        token_id:
          type: string
          example: BTC
          description: The id of the token.
        staking_id:
          type: string
          example: 0011039d-27fb-49ba-b172-6e0aa80e37ec
          description: The id of the related staking.
        amount:
          type: string
          example: '100.00'
          description: The amount of the activity.
        transaction_ids:
          type: array
          items:
            type: string
            example: 0011039d-27fb-49ba-b172-6e0aa80e37ec
          description: The related txs of the activity.
        timeline:
          type: array
          items:
            $ref: '#/components/schemas/ActivityTimeline'
          description: The timeline of the activity.
        fee:
          $ref: '#/components/schemas/TransactionRequestFee'
        status:
          $ref: '#/components/schemas/ActivityStatus'
        created_timestamp:
          description: The time when the activity was created.
          type: integer
          format: int64
          example: 1640995200000
        updated_timestamp:
          description: The time when the activity was last updated.
          type: integer
          format: int64
          example: 1640995200000
    ActivityAction:
      type: string
      enum:
        - Submitted
        - BTCConfirmation
        - BabylonConfirmation
      example: Submitted
      description: The status of activity.
    ActivityTimeline:
      description: The timeline of the staking activity.
      type: object
      required:
        - action
      properties:
        action:
          $ref: '#/components/schemas/ActivityAction'
        status:
          type: string
          example: success
        timestamp:
          type: integer
          format: int64
          example: 1640995200000
        transaction_id:
          type: string
          description: The transaction ID.
          example: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
    ActivityInitiator:
      type: object
      properties:
        initiator:
          type: string
          example: vanya@cobo.com
          description: The initiator of the staking activity.
    CreateStakeActivity:
      type: object
      required:
        - amount
        - fee
        - wallet_id
        - address
        - pool_id
        - extra
      properties:
        request_id:
          type: string
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          description: The request ID that is used to track a request. The request ID is provided by you and must be unique within your organization.
        source:
          $ref: '#/components/schemas/StakingSource'
        pool_id:
          type: string
          example: babylon_btc
          description: The id of the staking pool
        amount:
          type: string
          example: '100.00'
          description: The amount to stake
        fee:
          $ref: '#/components/schemas/TransactionRequestFee'
        extra:
          oneOf:
            - $ref: '#/components/schemas/BabylonStakeExtra'
            - $ref: '#/components/schemas/EigenLayerLstStakeExtra'
            - $ref: '#/components/schemas/EigenLayerNativeStakeExtra'
          discriminator:
            propertyName: pool_type
            mapping:
              Babylon: '#/components/schemas/BabylonStakeExtra'
              EigenLayerNativeETH: '#/components/schemas/EigenLayerLstStakeExtra'
              EigenLayerLST: '#/components/schemas/EigenLayerNativeStakeExtra'
    CreateWithdrawActivity:
      type: object
      required:
        - staking_id
        - fee
      properties:
        request_id:
          type: string
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          description: The request ID that is used to track a request. The request ID is provided by you and must be unique within your organization.
        staking_id:
          type: string
          example: 0011039d-27fb-49ba-b172-6e0aa80e37ec
          description: The id of the related staking.
        amount:
          type: string
          example: '100.00'
          description: The amount to stake
        address:
          type: string
          example: '0xdAC17F958D2ee523a2206206994597C13D831ec7'
          description: The withdraw to address.
        fee:
          $ref: '#/components/schemas/TransactionRequestFee'
    CreateUnstakeActivity:
      type: object
      required:
        - staking_id
      properties:
        request_id:
          type: string
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          description: The request ID that is used to track a request. The request ID is provided by you and must be unique within your organization.
        staking_id:
          type: string
          example: 0011039d-27fb-49ba-b172-6e0aa80e37ec
          description: The id of the related staking.
        amount:
          type: string
          example: '100.00'
          description: The amount to stake
        fee:
          $ref: '#/components/schemas/TransactionRequestFee'
    ActivityStatus:
      type: string
      enum:
        - Success
        - Processing
        - Failed
      example: Success
      description: The status of activity.
    ActivityType:
      type: string
      enum:
        - Stake
        - Unstake
        - Withdraw
        - Claim
        - Delegate
        - Undelegate
      example: Stake
      description: The type of activity.
    AmountStatus:
      type: string
      enum:
        - StakeInProgress
        - Active
        - Rejected
        - LimitExceeded
        - Invalid
        - UnstakeInProgress
        - Withdrawable
        - WithdrawInProgress
        - Closed
      example: Active
      description: The status of staking amount.
    AmountDetails:
      type: array
      description: The staking amount details.
      items:
        type: object
        required:
          - status
          - amount
        properties:
          status:
            $ref: '#/components/schemas/AmountStatus'
          amount:
            type: string
            example: '100.00'
            description: The staking amount.
          activity_id:
            type: string
            example: 0011039d-27fb-49ba-b172-6e0aa80e37ec
            description: The related staking activity ID.
    BabylonValidator:
      type: object
      description: The babylon validator information.
      required:
        - name
        - public_key
        - icon_url
        - commission_rate
        - supported_pos_chains
      properties:
        icon_url:
          description: The URL of the validator's icon.
          type: string
          format: url
          example: 'https://example.com/icon.png'
        name:
          description: The name of validator.
          type: string
          example: Cobo
        priority:
          description: The priority of validator.
          type: integer
          example: 0
        public_key:
          description: The public key of validator.
          type: string
          example: eca1b104dce16c30705f4147a9c4a373ac88646c5d1bcda6a89c018940cb96a0
        commission_rate:
          description: The commission rate of validator.
          type: number
          format: float
          example: 0.1
        supported_pos_chains:
          description: The list of supported pos chains.
          type: array
          items:
            type: string
            enum:
              - Babylon
              - Cosmos
          example:
            - Babylon
            - Cosmos
    EigenlayerValidator:
      type: object
      description: The EigenLayer validator info.
      required:
        - name
        - address
        - icon_url
      properties:
        icon_url:
          description: The URL of the validator's icon.
          type: string
          format: url
          example: 'https://example.com/icon.png'
        name:
          description: The name of validator.
          type: string
          example: Cobo
        priority:
          description: The priority of validator.
          type: integer
          example: 0
        address:
          description: The address of validator.
          type: string
          example: 1Lru9ewXCbVLQAetCLDgFoo6465kpGKbGV
        commission_rate:
          description: The commission of validator.
          type: number
          format: float
          example: 0.1
    PoolDetails:
      allOf:
        - $ref: '#/components/schemas/PoolSummary'
        - type: object
          description: The detail of the staking protocol.
          required:
            - validators_info
          properties:
            pool_type:
              $ref: '#/components/schemas/StakingPoolType'
            min_amount:
              description: The minimum amount to stake.
              type: string
              example: '0.01'
            max_amount:
              description: The maximum amount to stake.
              type: string
              example: '100.00'
            min_stake_period:
              description: The minimum staking period in days.
              type: integer
              format: int32
              example: 30
            max_stake_period:
              description: The maximum staking period in days.
              type: integer
              format: int32
              example: 1000
            min_stake_blocks:
              description: The minimum staking blocks.
              type: integer
              format: int64
              example: 100
            max_stake_blocks:
              description: The maximum staking blocks.
              type: integer
              format: int64
              example: 1000
            validators_info:
              description: The list of validators.
              type: array
              items:
                oneOf:
                  - $ref: '#/components/schemas/BabylonValidator'
                  - $ref: '#/components/schemas/EigenlayerValidator'
    PoolSummary:
      type: object
      description: The summary of the staking pool.
      required:
        - id
        - chain_id
        - protocol
        - protocol_icon_url
        - token_id
        - est_apr
        - supported_wallet_types
        - supported_wallet_subtypes
      properties:
        id:
          description: The unique protocol id.
          type: string
          example: babylon_btc
        chain_id:
          description: The unique chain id.
          type: string
          example: Bitcoin
        protocol:
          description: The name of the protocol.
          type: string
          example: Babylon
        protocol_icon_url:
          description: The URL of the protocol's icon.
          type: string
          format: url
          example: 'https://example.com/icon.png'
        supported_wallet_types:
          description: The list of available wallet types.
          type: array
          items:
            $ref: '#/components/schemas/WalletType'
          example:
            - MPC
        supported_wallet_subtypes:
          description: The list of available wallet types.
          type: array
          items:
            $ref: '#/components/schemas/WalletSubtype'
          example:
            - Org-Controlled
        token_id:
          description: The unique token id.
          type: string
          example: BTC
        est_apr:
          description: The estimated APR.
          type: number
          format: float
          example: 0.05
    Stakings:
      type: object
      description: The staking info.
      required:
        - id
        - wallet_id
        - address
        - pool_id
        - token_id
        - amounts
        - status
        - validator_info
        - created_timestamp
        - updated_timestamp
      properties:
        id:
          description: The unique id of the stake.
          type: string
          example: 0011039d-27fb-49ba-b172-6e0aa80e37ec
        wallet_id:
          description: The unique wallet id.
          type: string
          example: 0111039d-27fb-49ba-b172-6e0aa80e37ec
        address:
          description: The staker wallet address.
          type: string
          example: '0x0000000000000000000000000000000000000000'
        amounts:
          $ref: '#/components/schemas/AmountDetails'
        initiator:
          description: The initiator of the stake.
          type: string
          example: Vanya@cobo.com
        unlock_timestamp:
          description: The unlock time.
          type: integer
          format: int64
          example: 1640995200000
        unlock_block_height:
          description: The unlock block height.
          type: integer
          format: int64
          example: 871234
        pool_id:
          description: The unique pool id.
          type: string
          example: babylon_btc
        token_id:
          description: The token id.
          type: string
          example: BTC
        pos_chain:
          description: The pos chain of the stake.
          type: string
          example: Babylon Chain
        rewards_info:
          description: The rewards info of the stake.
          type: object
          example: { }
        created_timestamp:
          description: The time when the stake was created.
          type: integer
          format: int64
          example: 1640995200000
        updated_timestamp:
          description: The time when the stake was last updated.
          type: integer
          format: int64
          example: 1640995200000
        validator_info:
          description: The validator info of the stake.
          type: object
          properties:
            icon_url:
              type: string
              example: 'https://example.com/logo.png'
            public_key:
              type: string
              example: '0000000000000000000000000000000000000000000000000000000000000000'
            name:
              type: string
              example: Cobo
            address:
              type: string
              example: '0x0000000000000000000000000000000000000000'
            commission_rate:
              type: string
              example: '0.1'
    StakingPoolType:
      type: string
      enum:
        - Babylon
        - EigenLayerNativeETH
        - EigenLayerLst
      example: Babylon
      x-enumDescriptions:
        Babylon: The Babylon staking protocol.
        EigenLayerNativeETH: The Eigen Layer staking pool for native ETH.
        EigenLayerLst: The Eigen Layer staking pool for lst token.
    BaseEstimateStakingFee:
      type: object
      required:
        - activity_type
      properties:
        activity_type:
          $ref: '#/components/schemas/ActivityType'
    EstimateStakeFee:
      allOf:
        - $ref: '#/components/schemas/BaseEstimateStakingFee'
        - $ref: '#/components/schemas/CreateStakeActivity'
    EstimateUnstakeFee:
      allOf:
        - $ref: '#/components/schemas/BaseEstimateStakingFee'
        - $ref: '#/components/schemas/CreateUnstakeActivity'
    EstimateWithdrawFee:
      allOf:
        - $ref: '#/components/schemas/BaseEstimateStakingFee'
        - $ref: '#/components/schemas/CreateWithdrawActivity'
  parameters:
    sortByParam:
      name: sort_by
      in: query
      description: The field used for sorting.
      required: false
      schema:
        type: string
        default: ''
      example: timestamp
    directionParam:
      name: direction
      in: query
      description: |
        The sort direction. Possible values include:
          - `ASC`: Sort the results in ascending order.
          - `DESC`: Sort the results in descending order.
      required: false
      schema:
        type: string
        enum:
          - ASC
          - DESC
        default: ''
      example: ASC
    limitParam:
      name: limit
      in: query
      description: 'The maximum number of objects to return. For most operations, the value range is [1, 50].'
      required: false
      schema:
        type: integer
        format: int32
        default: 10
      example: 10
    beforeParam:
      name: before
      in: query
      description: |
        An object ID that serves as a starting point for retrieving data in reverse chronological order. For example, if you specify `before` as `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1`, the request will retrieve a list of data objects that end before the object with the object ID `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1`. You can set this parameter to the value of `pagination.before` in the response of the previous request.

        - If you set both `after` and `before`, an error will occur.

        - If you leave both `before` and `after` empty, the first page of data is returned.

        - If you set `before` to `infinity`, the last page of data is returned.
      required: false
      schema:
        type: string
      example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
    afterParam:
      name: after
      in: query
      description: |
        An object ID that acts as a starting point for retrieving data in chronological order. For example, if you specify `after` as `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`, the request will retrieve a list of data objects that start after the object with the object ID `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`. You can set this parameter to the value of `pagination.after` in the response of the previous request.

        - If you set both `after` and `before`, an error will occur.

        - If you leave both `before` and `after` empty, the first page of data is returned.
      required: false
      schema:
        type: string
      example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
    optionalAssetIdParam:
      name: asset_id
      in: query
      required: false
      description: (This concept applies to Exchange Wallets only) The asset ID. An asset ID is the unique identifier of the asset held within your linked exchange account.
      schema:
        type: string
      example: USDT
    optionalAssetIdListParam:
      name: asset_ids
      in: query
      required: false
      description: '(This concept applies to Exchange Wallets only) A list of asset IDs, separated by comma. An asset ID is the unique identifier of the asset held within your linked exchange account.'
      schema:
        type: string
        description: 'A list of asset IDs, separated by comma.'
      example: 'USDT,USDC'
    requiredAssetIdParam:
      name: asset_id
      in: query
      required: true
      description: (This concept applies to Exchange Wallets only) The asset ID. An asset ID is the unique identifier of the asset held within your linked exchange account.
      schema:
        type: string
      example: USDT
    chainIdParam:
      name: chain_id
      in: path
      required: true
      description: 'The chain ID, which is the unique identifier of a blockchain. You can retrieve the IDs of all the chains you can use by calling [List enabled chains](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-chains).'
      schema:
        type: string
      example: ETH
    requiredChainIdParam:
      name: chain_id
      in: query
      required: true
      description: 'The chain ID, which is the unique identifier of a blockchain. You can retrieve the IDs of all the chains you can use by calling [List enabled chains](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-chains).'
      schema:
        type: string
      example: ETH
    optionalChainIdParam:
      name: chain_id
      in: query
      required: false
      description: 'The chain ID, which is the unique identifier of a blockchain. You can retrieve the IDs of all the chains you can use by calling [List enabled chains](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-chains).'
      schema:
        type: string
      example: ETH
    optionalChainIdListParam:
      name: chain_ids
      in: query
      required: false
      description: 'A list of chain IDs, separated by comma. The chain ID is the unique identifier of a blockchain. You can retrieve the IDs of all the chains you can use by calling [List enabled chains](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-chains).'
      schema:
        type: string
        description: 'A list of chain IDs, separated by comma.'
      example: 'BTC,ETH'
    tokenIdParam:
      name: token_id
      in: path
      required: true
      description: 'The token ID, which is the unique identifier of a token. You can retrieve the IDs of all the tokens you can use by calling [List enabled tokens](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-tokens).'
      schema:
        type: string
      example: ETH_USDT
    optionalTokenIdParam:
      name: token_id
      in: query
      required: false
      description: 'The token ID, which is the unique identifier of a token. You can retrieve the IDs of all the tokens you can use by calling [List enabled tokens](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-tokens).'
      schema:
        type: string
      example: ETH_USDT
    optionalTokenListIdParam:
      name: token_ids
      in: query
      required: false
      description: 'A list of token IDs, separated by comma. The token ID is the unique identifier of a token. You can retrieve the IDs of all the tokens you can use by calling [List enabled tokens](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-tokens).'
      schema:
        type: string
        description: 'A list of token IDs, separated by comma.'
      example: 'ETH_USDT,ETH_USDC'
    requiredTokenIdParam:
      name: token_id
      in: query
      required: true
      description: 'The token ID, which is the unique identifier of a token. You can retrieve the IDs of all the tokens you can use by calling [List enabled tokens](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-tokens).'
      schema:
        type: string
      example: ETH_USDT
    requiredFeeRateParam:
      name: fee_rate
      in: query
      required: true
      description: The fee rate in sats/vByte or gas price in wei.
      schema:
        type: string
      example: '10'
    requiredWalletSubtypeParam:
      name: wallet_subtype
      in: query
      required: true
      description: |
        The wallet subtype.

        - `Asset`: Custodial Wallets (Asset Wallets)

        - `Web3`: Custodial Wallets (Web3 Wallets)

        - `Main`: Exchange Wallets (Main Account)

        - `Sub`: Exchange Wallets (Sub Account)

        - `Org-Controlled`: MPC Wallets (Organization-Controlled Wallets)

        - `User-Controlled`: MPC Wallets (User-Controlled Wallets)

        - `Safe{Wallet}`: Smart Contract Wallets (Safe{Wallet})
      schema:
        $ref: '#/components/schemas/WalletSubtype'
    optionalWalletTypeParam:
      name: wallet_type
      in: query
      required: false
      description: |
        The wallet type.

        - `Custodial`: [Custodial Wallets](https://manuals.cobo.com/en/portal/custodial-wallets/introduction)

        - `MPC`: [MPC Wallets](https://manuals.cobo.com/en/portal/mpc-wallets/introduction)

        - `SmartContract`: [Smart Contract Wallets](https://manuals.cobo.com/en/portal/smart-contract-wallets/introduction)

        - `Exchange`: [Exchange Wallets](https://manuals.cobo.com/en/portal/exchange-wallets/introduction)
      schema:
        $ref: '#/components/schemas/WalletType'
    optionalWalletSubtypeParam:
      name: wallet_subtype
      in: query
      required: false
      description: |
        The wallet subtype.

        - `Asset`: Custodial Wallets (Asset Wallets)

        - `Web3`: Custodial Wallets (Web3 Wallets)

        - `Main`: Exchange Wallets (Main Account)

        - `Sub`: Exchange Wallets (Sub Account)

        - `Org-Controlled`: MPC Wallets (Organization-Controlled Wallets)

        - `User-Controlled`: MPC Wallets (User-Controlled Wallets)

        - `Safe{Wallet}`: Smart Contract Wallets (Safe{Wallet})
      schema:
        $ref: '#/components/schemas/WalletSubtype'
    walletIdParam:
      name: wallet_id
      in: path
      required: true
      description: The wallet ID.
      schema:
        type: string
        format: uuid
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    optionalWalletIdParam:
      name: wallet_id
      in: query
      required: false
      description: The wallet ID.
      schema:
        type: string
        format: uuid
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    optionalWalletListIdParam:
      name: wallet_ids
      in: query
      required: false
      description: 'A list of wallet IDs, separated by comma.'
      schema:
        type: string
        description: 'A list of wallet IDs, separated by comma.'
      example: 'f47ac10b-58cc-4372-a567-0e02b2c3d479,1ddca562-8434-41c9-8809-d437bad9c868'
    addressParam:
      name: address
      in: path
      required: true
      description: The wallet address.
      schema:
        type: string
        description: The wallet address.
      example: '0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045'
    requiredAddressParam:
      name: address
      in: query
      required: true
      description: The wallet address.
      schema:
        type: string
        description: The wallet address.
      example: '0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045'
    requiredAddressListParam:
      name: addresses
      in: query
      required: true
      description: 'A list of wallet addresses, separated by comma. You can specify a maximum of 100 addresses.'
      schema:
        type: string
      example: '0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045,0x4838B106FCe9647Bdf1E7877BF73cE8B0BAD5f97'
    optionalAddressListParam:
      name: addresses
      in: query
      required: false
      description: 'A list of wallet addresses, separated by comma.'
      schema:
        type: string
        description: 'A list of wallet addresses, separated by comma.'
      example: '0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045,0x4838B106FCe9647Bdf1E7877BF73cE8B0BAD5f97'
    requiredTradingAccountTypeParam:
      name: trading_account_type
      in: query
      required: true
      description: The trading account type.
      schema:
        type: string
      example: SPOT
    optionalTradingAccountTypeListParam:
      name: trading_account_types
      in: query
      required: false
      description: 'A list of trading account types, separated by comma. You can get the the supported trading account types of an exchange by calling [List supported exchanges](https://www.cobo.com/developers/v2/api-references/wallets--exchange-wallet/list-supported-exchanges).'
      schema:
        type: string
      example: 'Trading,Funding'
    optionalAddressParam:
      name: address
      in: query
      required: false
      description: The wallet address.
      schema:
        type: string
        description: The wallet address.
      example: '0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045'
    requiredToAddressParam:
      name: to_address
      in: query
      required: true
      description: The recipient's address.
      schema:
        type: string
      example: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
    optionalFromAddressParam:
      name: from_address
      in: query
      required: false
      description: 'The sender''s address. For EVM addresses in MPC Wallets, this parameter is required.'
      schema:
        type: string
      example: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
    optionalUtxoTxHashParam:
      name: tx_hash
      in: query
      required: false
      schema:
        type: string
        description: The transaction hash of the UTXO.
      example: dd7e1cecf6bbde1844ee1815b780711a1e306a718bcd23cd64401b48ef88eb83
    requiredSourceWalletIdParam:
      name: source_wallet_id
      in: query
      required: true
      description: The source wallet ID.
      schema:
        type: string
        format: uuid
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    requiredDestinationAddressesParam:
      name: destination_addresses
      in: query
      required: true
      description: 'A list of destination wallet addresses, separated by comma.'
      schema:
        type: string
      example: '0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045,0x4838B106FCe9647Bdf1E7877BF73cE8B0BAD5f97'
    keyShareHolderGroupIdParam:
      name: key_share_holder_group_id
      in: path
      required: true
      description: The key share holder group ID.
      schema:
        type: string
      example: e8257ac8-76b8-4d1e-a1f9-eec4cb931dce
    optionalKeyShareHolderGroupTypeParam:
      name: key_share_holder_group_type
      in: query
      description: |
        The key share holder group type. Possible values include:
        - `MainGroup`: The [Main Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups#main-group).

        - `SigningGroup`: The [Signing Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups#signing-group).

        - `RecoveryGroup`: The [Recovery Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups#recovery-group).

        **Note**: If this parameter is left empty, all key share holder group types will be retrieved.
      required: false
      schema:
        $ref: '#/components/schemas/KeyShareHolderGroupType'
    projectIdParam:
      name: project_id
      in: path
      required: true
      description: 'The project ID, which you can retrieve by calling [List all projects](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-projects).'
      schema:
        type: string
        format: uuid
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    optionalProjectIdQueryParam:
      name: project_id
      in: query
      description: |
        The project ID, which you can retrieve by calling [List all projects](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-projects).
      schema:
        type: string
        format: uuid
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    optionalProjectIdListQueryParam:
      name: project_ids
      in: query
      description: 'A list of MPC project IDs, separated by comma.'
      schema:
        type: string
        format: uuid
      example: 'a3d8eae2-1740-4b5e-92f2-88c2b1e44c6b,b51f63a3-8a8e-4a34-ae9e-6f3e6b1fdf99'
    requiredKeyShareHolderGroupIdParam:
      name: key_share_holder_group_id
      in: query
      description: 'The key share holder group ID of the TSS request, which you can retrieve by calling [List all key share holder groups](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-key-share-holder-groups).'
      required: true
      schema:
        type: string
      example: a3a45e99-5a12-444f-867a-ffe0ebb1bb30
    tssRequestIdParam:
      name: tss_request_id
      in: path
      required: true
      description: 'The TSS request ID, which you can retrieve by calling [List TSS requests](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-tss-requests).'
      schema:
        type: string
      example: '20240711114129000132315000003970'
    vaultIdParam:
      name: vault_id
      in: path
      required: true
      description: 'The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallet/list-all-mpc-vaults).'
      schema:
        type: string
        format: uuid
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    optionalVaultIdQueryParam:
      name: vault_id
      in: query
      required: false
      description: 'The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults).'
      schema:
        type: string
        format: uuid
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    optionalVaultIdListQueryParam:
      name: vault_ids
      in: query
      required: false
      description: 'A list of vault IDs, separated by comma.'
      schema:
        type: string
        format: uuid
      example: 'f5c3f9e8-1d8a-44b2-9284-94bf76b7b017,ab2e3f55-472e-4a98-86d1-446d2f9e839e'
    optionalVaultNameParam:
      name: vault_name
      in: query
      required: false
      description: Unique id of the mpc vault
      schema:
        type: string
      example: my vault name
    exchangeIdParam:
      name: exchange_id
      in: path
      required: true
      description: |
        The ID of the exchange. Possible values include:
          - `binance`: Binance.
          - `okx`: OKX.
          - `deribit`: Deribit.
          - `bybit`: Bybit.
          - `gate`: Gate.io
          - `bitget`: Bitget
      schema:
        $ref: '#/components/schemas/ExchangeId'
    optionalExchangeIdParam:
      name: exchange_id
      in: query
      required: false
      description: Exchange ID to query
      schema:
        $ref: '#/components/schemas/ExchangeId'
    requiredExchangeIdParam:
      name: exchange_id
      in: query
      required: true
      description: Exchange ID to query
      schema:
        $ref: '#/components/schemas/ExchangeId'
    optionalApikeyParam:
      name: apikey
      in: query
      description: The API Key for the exchange
      required: false
      schema:
        type: string
      example: d8f062da-39f4-4a11-8b9d-12595854237f
    optionalSecretParam:
      name: secret
      in: query
      description: The API Secret for the exchange.
      required: false
      schema:
        type: string
      example: 75B4F636193162488A3728B4A5797708
    optionalPassphraseParam:
      name: passphrase
      in: query
      description: The API passphrase for the exchange wallet.
      required: false
      schema:
        type: string
      example: A3DBHJV
    optionalRequestIdParam:
      name: request_id
      in: query
      required: false
      description: The request ID that is used to track a transaction request. The request ID is provided by you and must be unique within your organization.
      schema:
        type: string
      example: web_send_by_user_327_1610444045047
    optionalCoboIdParam:
      name: cobo_ids
      in: query
      required: false
      description: 'A list of Cobo IDs, separated by comma. A Cobo ID can be used to track a transaction.'
      schema:
        type: string
      example: '20231213122855000000000000000000,20231213122955000000000000000000'
    optionalTransactionTypeParam:
      name: type
      in: query
      required: false
      description: The type of a transaction
      schema:
        $ref: '#/components/schemas/TransactionType'
    optionalTransactionTypeListParam:
      name: types
      in: query
      required: false
      description: |
        A list of transaction types, separated by comma. Possible values include: 
          - `Deposit`: A deposit transaction.
          - `Withdrawal`: A withdrawal transaction.
          - `ContractCall`: A transaction that interacts with a smart contract.
          - `MessageSign`: A transaction that signs a message. 
          - `ExternalSafeTx`: A transaction to a Smart Contract Wallet (Safe{Wallet}) that requires one or multiple signatures to be executed.
      schema:
        type: string
      example: 'Deposit,Withdrawal'
    optionalTransactionStatusParam:
      name: status
      in: query
      required: false
      description: The status of a transaction
      schema:
        $ref: '#/components/schemas/TransactionStatus'
    optionalTransactionStatusListParam:
      name: statuses
      in: query
      required: false
      description: |
        A list of transaction statuses, separated by comma. Possible values include: 
          - `Submitted`: The transaction is submitted.
          - `PendingScreening`: The transaction is pending screening by Risk Control. 
          - `PendingAuthorization`: The transaction is pending approvals.
          - `PendingSignature`: The transaction is pending signature. 
          - `Broadcasting`: The transaction is being broadcast.
          - `Confirming`: The transaction is waiting for the required number of confirmations.
          - `Completed`: The transaction is completed.
          - `Failed`: The transaction failed.
          - `Rejected`: The transaction is rejected.
          - `Pending`: The transaction is waiting to be included in the next block of the blockchain.
      schema:
        type: string
      example: 'Completed,Failed'
    optionalMinCreatedTimestampParam:
      name: min_created_timestamp
      in: query
      required: false
      description: 'The time when the transaction was created, in Unix timestamp format, measured in milliseconds. You can use this parameter to filter transactions created on or after the specified time.'
      schema:
        type: integer
        format: int64
      example: 1635744000000
    optionalMaxCreatedTimestampParam:
      name: max_created_timestamp
      in: query
      required: false
      description: 'The time when the transaction was created, in Unix timestamp format, measured in milliseconds. You can use this parameter to filter transactions created on or before the specified time.'
      schema:
        type: integer
        format: int64
      example: 1635744000000
    optionalTransactionSourceTypeListParam:
      name: source_types
      in: query
      required: false
      description: |
        A list of transaction source types, separated by comma. Possible values include:
          - `Asset`: Custodial Wallets (Asset Wallets).
          - `Org-Controlled`: MPC Wallets (Organization-Controlled Wallets).
          - `User-Controlled`: MPC Wallets (User-Controlled Wallets).
          - `Safe{Wallet}`: Smart Contract Wallets (Safe{Wallet}).
          - `Main`: Exchange Wallets (Main Account).
          - `Sub`: Exchange Wallets (Sub Account).
          - `DepositFromAddress`: An address which can include both Cobo's wallet addresses and external addresses.
          - `DepositFromWallet`: An Exchange Wallet.
          - `DepositFromLoop`: A transfer sender through the Loop transfer network.
      schema:
        type: string
      example: 'Asset,DepositFromAddress'
    optionalTransactionSourceAddressListParam:
      name: source_wallet_ids
      in: query
      required: false
      description: 'A list of wallet IDs of the transaction sources, separated by comma.'
      schema:
        type: string
        format: uuid
      example: 'f47ac10b-58cc-4372-a567-0e02b2c3d479,557918d2-632a-4fe1-932f-315711f05fe3'
    optionalTransactionSourceWalletIdListParam:
      name: source_addresses
      in: query
      required: false
      description: 'A list of addresses of the transaction source, separated by comma.'
      schema:
        type: string
    optionalTransactionDestinationTypeListParam:
      name: destination_types
      in: query
      required: false
      description: |
        A list of transaction destination types, separated by comma. Possible values include:
          - `Address`: An external address. 
          - `ContractCall`: A transaction that interacts with a smart contract.
          - `MessageSign`: A transaction that signs a message. 
          - `CustodialWallet`: A Custodial Wallet.
          - `MPCWallet`: An MPC Wallet.
          - `SafeWallet`: A Smart Contract Wallets (Safe{Wallet}).
          - `ExchangeWallet`: An Exchange Wallet.
      schema:
        type: string
      example: 'ContractCall,MessageSign'
    optionalTransactionDestinationAddressListParam:
      name: destination_wallet_ids
      in: query
      required: false
      description: 'A list of wallet IDs of the transaction destinations, separated by comma.'
      schema:
        type: string
        format: uuid
      example: 'f47ac10b-58cc-4372-a567-0e02b2c3d479,557918d2-632a-4fe1-932f-315711f05fe3'
    optionalTransactionDestinationWalletIdListParam:
      name: destination_addresses
      in: query
      required: false
      description: |
        A list of addresses of the transaction destination, separated by comma. If the address includes a memo, use `|` to append the memo to the address. For example, if the address is `19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku` and the memo is `82840924`, you need to provide `19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku|82840924` as the property value.
      schema:
        type: string
    transactionIdParam:
      name: transaction_id
      in: path
      required: true
      description: The transaction ID.
      schema:
        type: string
        format: uuid
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    webhookEventIdParam:
      name: event_id
      in: path
      required: true
      description: 'The event ID. You can obtain a list of event IDs by calling [List all events](https://www.cobo.com/developers/v2/api-references/developers--webhooks/list-all-events).'
      schema:
        type: string
        format: uuid
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    endpointIdParam:
      name: endpoint_id
      in: path
      required: true
      description: 'The webhook endpoint ID. You can retrieve a list of webhook endpoint IDs by calling [List webhook endpoints](https://www.cobo.com/developers/v2/api-references/developers--webhooks/list-webhook-endpoints).'
      schema:
        type: string
        format: uuid
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    activityIdRequiredParam:
      name: activity_id
      in: path
      required: true
      description: activity id
      schema:
        type: string
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    poolIdRequiredParam:
      name: pool_id
      in: path
      required: true
      description: staking pool id
      schema:
        type: string
      example: babylon_btc
    poolIdOptionalParam:
      name: pool_id
      in: query
      required: false
      description: staking pool id
      schema:
        type: string
      example: babylon_btc
    stakingIdRequiredParam:
      name: staking_id
      in: path
      required: true
      description: staking id
      schema:
        type: string
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    stakingIdOptionalParam:
      name: staking_id
      in: query
      required: false
      description: staking id
      schema:
        type: string
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    activityTypeOptionalParam:
      name: activity_type
      in: query
      required: false
      description: activity type
      schema:
        $ref: '#/components/schemas/ActivityType'
      example: Stake
    activityStatusOptionalParam:
      name: activity_status
      in: query
      required: false
      description: activity status
      schema:
        $ref: '#/components/schemas/ActivityStatus'
      example: Success
    activityInitiatorOptionalParam:
      name: initiator
      in: query
      required: false
      description: 'activity initiator, maybe email or api key.'
      schema:
        type: string
      example: vanya@cobo.com
    maxModifiedTimestampOptionalParam:
      name: max_modified_timestamp
      in: query
      required: false
      description: The maximum modified timestamp in Unix epoch seconds
      schema:
        type: integer
        format: int64
      example: 1635744000000
    minModifiedTimestampOptionalParam:
      name: min_modified_timestamp
      in: query
      required: false
      description: The minimum modified timestamp in Unix epoch seconds
      schema:
        type: integer
        format: int64
      example: 1635744000000
    ClientIdRequiredParam:
      name: client_id
      in: query
      required: true
      description: 'The App ID, a unique identifier to distinguish Cobo Portal Apps. You can get the App ID by retrieving the Manifest file after receiving the notification of app launch approval.'
      schema:
        type: string
      example: pvSwS8iFrfK0oZrB0ugG54XPDOLEv0Ij
    OrgIdRequiredParam:
      name: org_id
      in: query
      required: true
      description: 'Organization ID, a unique identifier to distinguish different organizations. You can get the Organization ID by retrieving the Manifest file after receiving the notification of app launch approval.'
      schema:
        type: string
      example: e3986401-4aec-480a-973d-e775a4518413
    GrantTypeRequiredParam:
      name: grant_type
      in: query
      required: true
      description: The OAuth grant type. Set the value as `org_implicit`.
      schema:
        type: string
      example: org_implicit
  requestBodies:
    createWalletBody:
      description: The request body to create a wallet
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateWalletParams'
    updateWalletBody:
      description: The request body.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateWalletParams'
    createAddressBody:
      description: The request body to generates addresses within a specified wallet.
      content:
        application/json:
          schema:
            type: object
            required:
              - chain_id
              - count
            properties:
              chain_id:
                type: string
                description: 'The chain ID, which is the unique identifier of a blockchain. You can retrieve the IDs of all the chains you can use by calling [List enabled chains](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-chains).'
                example: ETH
              count:
                type: integer
                maximum: 50
                minimum: 1
                default: 1
                description: The number of addresses to create.
                example: 1
              encoding:
                $ref: '#/components/schemas/AddressEncoding'
    lockUtxosBody:
      description: The request body of the Lock/Unlock UTXOs operation.
      content:
        application/json:
          schema:
            type: object
            required:
              - utxos
            properties:
              utxos:
                type: array
                items:
                  type: object
                  required:
                    - token_id
                    - tx_hash
                    - vout_n
                  properties:
                    token_id:
                      type: string
                      description: 'The token ID, which is the unique identifier of a token. You can retrieve the IDs of all the tokens you can use by calling [List enabled tokens](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-tokens).'
                      example: BTC
                    tx_hash:
                      type: string
                      description: The transaction hash.
                      example: 9bdf8e7ae03c237e115f09543fbdb40f8efa600106e78b67ce4d5adfadda2dbb
                    vout_n:
                      type: integer
                      description: The output index of the UTXO.
                      example: 0
    createKeyShareHolderGroupBody:
      description: The request body to create a key share holder group.
      content:
        application/json:
          schema:
            type: object
            required:
              - key_share_holder_group_type
              - participants
              - threshold
              - key_share_holders
            properties:
              key_share_holder_group_type:
                $ref: '#/components/schemas/KeyShareHolderGroupType'
              participants:
                type: integer
                description: |
                  The number of key share holders in this key share holder group.

                  **Notes:**
                  1. Currently, the available [Threshold Signature Schemes (TSS)](https://manuals.cobo.com/en/portal/mpc-wallets/introduction#threshold-signature-scheme-tss) are 2-2, 2-3, and 3-3 schemes (in the "threshold - participants" format), so you can only set `participants` to 2 or 3. 

                  2. `threshold` must be less than or equal to `participants`.
                example: 3
              threshold:
                type: integer
                description: |
                  The number of key share holders required to sign an operation.

                  **Notes:**
                  1. Currently, the available [Threshold Signature Schemes (TSS)](https://manuals.cobo.com/en/portal/mpc-wallets/introduction#threshold-signature-scheme-tss) are 2-2, 2-3, and 3-3 schemes (in the "threshold - participants" format), so you can only set `threshold` to 2 or 3. 

                  2. `threshold` must be less than or equal to `participants`.
                example: 2
              key_share_holders:
                type: array
                items:
                  $ref: '#/components/schemas/CreateKeyShareHolder'
    createMpcProjectBody:
      description: The request body to create a project.
      content:
        application/json:
          schema:
            type: object
            required:
              - name
              - participants
              - threshold
            properties:
              name:
                type: string
                example: Project name
                description: The project name.
              participants:
                type: integer
                description: |
                  The number of key share holders in the project.

                  **Notes:**
                  1. Currently, the available [Threshold Signature Schemes (TSS)](https://manuals.cobo.com/en/portal/mpc-wallets/introduction#threshold-signature-scheme-tss) are 2-2, 2-3, and 3-3 schemes (in the "threshold - participants" format), so you can only set `participants` to 2 or 3. 

                  2. `threshold` must be less than or equal to `participants`.
                example: 3
              threshold:
                type: integer
                description: |
                  The number of key share holders required to sign an operation in the project.

                  **Notes:**
                  1. Currently, the available [Threshold Signature Schemes (TSS)](https://manuals.cobo.com/en/portal/mpc-wallets/introduction#threshold-signature-scheme-tss) are 2-2, 2-3, and 3-3 schemes (in the "threshold - participants" format), so you can only set `threshold` to 2 or 3. 

                  2. `threshold` must be less than or equal to `participants`.
                example: 2
    createTssRequestBody:
      description: The request body to create a TSS request.
      content:
        application/json:
          schema:
            type: object
            required:
              - type
              - target_key_share_holder_group_id
            properties:
              type:
                $ref: '#/components/schemas/TSSRequestType'
              target_key_share_holder_group_id:
                type: string
                description: The target key share holder group ID.
                example: a1bf161f-8b60-4f61-9c35-6434b8654437
              source_key_share_holder_group:
                $ref: '#/components/schemas/SourceGroup'
              description:
                type: string
                description: The description of the TSS request.
                example: This is a request to create key shares using the Recovery Group for a key share holder in the Main Group if their key share has been lost (e.g. by losing their phone).
    createMpcVaultBody:
      description: The request body to create a vault.
      content:
        application/json:
          schema:
            type: object
            required:
              - name
              - vault_type
            properties:
              project_id:
                type: string
                example: 0111039d-27fb-49ba-b172-6e0aa80e37ec
                description: |
                  The project ID, which you can retrieve by calling [List all projects](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-projects).

                  **Notes:**
                  1. If you set `vault_type` to `OrgControlled`, the value of `project_id` will be ignored.
                  2. If you set `vault_type` to `UserControlled`, then `project_id` is required.
              name:
                type: string
                example: My vault
                description: The vault name.
              vault_type:
                $ref: '#/components/schemas/MPCVaultType'
    updateProjectBody:
      description: The request body to update a project's name.
      content:
        application/json:
          schema:
            type: object
            required:
              - name
            properties:
              name:
                type: string
                example: New project name
                description: The project's new name.
    updateVaultBody:
      description: The request body to update a vault's name.
      content:
        application/json:
          schema:
            type: object
            required:
              - name
            properties:
              name:
                type: string
                description: The new name of the vault.
                example: The new name of the vault
    updateGroupBody:
      content:
        application/json:
          schema:
            type: object
            required:
              - update_key_share_holder_group_action
            properties:
              update_key_share_holder_group_action:
                $ref: '#/components/schemas/UpdateGroupAction'
    createTransferBody:
      description: The request body to create a transfer transaction
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TransferParams'
    createSmartContractCallBody:
      description: The request body for making a contract call.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ContractCallParams'
    createMessageSignBody:
      description: The request body to create a message sign transaction
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MessageSignParams'
    estimateFeeBody:
      description: The request body to estimate the transaction fee of a token transfer or a contract call.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EstimateFeeParams'
    feeRequestBody:
      description: The request body to drop or to speed up transactions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TransactionRbf'
    resendTransactionBody:
      description: The request body to resend transactions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TransactionResend'
    broadcastTransactionsBody:
      description: The request body to batch broadcast signed transactions.
      content:
        application/json:
          schema:
            type: object
            properties:
              transaction_ids:
                type: array
                items:
                  type: string
                  example: f47ac10b-58cc-4372-a567-0e02b2c3d479
                description: The transaction ids to be broadcast.
    createStakeActivityBody:
      description: The request body to create a staking activity.
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/CreateStakeActivity'
              - $ref: '#/components/schemas/ActivityInitiator'
    createWithdrawActivityBody:
      description: The request body to create a withdraw activity.
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/CreateWithdrawActivity'
              - $ref: '#/components/schemas/ActivityInitiator'
    createUnstakeActivityBody:
      description: The request body to create a unstake activity.
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/CreateUnstakeActivity'
              - $ref: '#/components/schemas/ActivityInitiator'
    estimateStakeActivityFeeBody:
      description: The request body to create a get estimate fee of a staking activity.
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/EstimateStakeFee'
              - $ref: '#/components/schemas/EstimateUnstakeFee'
              - $ref: '#/components/schemas/EstimateWithdrawFee'
            discriminator:
              propertyName: activity_type
              mapping:
                Stake: '#/components/schemas/EstimateStakeFee'
                Unstake: '#/components/schemas/EstimateUnstakeFee'
                Withdraw: '#/components/schemas/EstimateWithdrawFee'
    createWebhookEndpointBody:
      description: The request body to register a webhook endpoint.
      content:
        application/json:
          schema:
            type: object
            required:
              - subscribed_events
              - url
            properties:
              url:
                description: The webhook endpoint URL.
                type: string
                format: url
                example: 'https://example.com/webhook'
              subscribed_events:
                description: |
                  The event types you want to subscribe to for this webhook endpoint. You can call [Get webhook event types](https://www.cobo.com/developers/v2/api-references/developers--webhooks/get-webhook-event-types) to retrieve all available event types.
                items:
                  $ref: '#/components/schemas/WebhookEventType'
                type: array
              description:
                description: The description of the webhook endpoint.
                type: string
                example: My webhook endpoint
    updateWebhookBody:
      description: The request body to update a webhook endpoint.
      content:
        application/json:
          schema:
            type: object
            properties:
              subscribed_events:
                description: 'The new event types you want to subscribe to for this webhook endpoint. You can call [Get webhook event types](https://www.cobo.com/developers/v2/api-references/developers--webhooks/get-webhook-event-types) to retrieve all available event types.'
                items:
                  $ref: '#/components/schemas/WebhookEventType'
                type: array
              status:
                type: string
                enum:
                  - STATUS_INACTIVE
                example: STATUS_INACTIVE
                description: 'The new status you want to set the webhook endpoint to. If you set `status` to `STATUS_INACTIVE`, the endpoint will be revoked, meaning it will no longer receive any webhook events.'
              description:
                description: The webhook endpoint description.
                type: string
                example: My webhook endpoint
    tokenEndpointBody:
      description: The request body for refreshing an access token.
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              client_id:
                type: string
                description: 'The App ID, a unique identifier to distinguish Cobo Portal Apps. You can get the App ID by retrieving the Manifest file after receiving the notification of app launch approval.'
                example: AnCEPEp5Q8qjAOA1Lb6kVd2OlkCyJnMTeMPdLbPOM8cz176Eb5y7EJoUjJJ0vkzz
              grant_type:
                type: string
                description: The OAuth grant type. Set the value as `refresh_token`.
                example: refresh_token
              refresh_token:
                type: string
                description: The refresh token of the current access token.
                example: rK49jI0zt49gsttzscscik15Asmlpu1TdcxqguJJS8B9f6ilJEC0y3PbVqwsEAw5
  responses:
    badRequestError:
      description: Bad request. Your request contains malformed syntax or invalid parameters.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    unauthorizedError:
      description: Unauthorized. Please provide valid credentials.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    forbiddenError:
      description: Forbidden. You do not have the permission to access the requested resource.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    notFoundError:
      description: Requested resources not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    tooManyRequestError:
      description: Too many requests.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    internalServerError:
      description: Internal server error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    serviceUnavailableError:
      description: Unknown internal error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    getChainsResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/ChainInfo'
              pagination:
                $ref: '#/components/schemas/Pagination'
    getChainByIdResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ChainInfo'
    getAssetsResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/AssetInfo'
              pagination:
                $ref: '#/components/schemas/Pagination'
    getTokensResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/ExtendedTokenInfo'
              pagination:
                $ref: '#/components/schemas/Pagination'
    getTokenByIdResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ExtendedTokenInfo'
    getTokenBalancesResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/TokenBalance'
              pagination:
                $ref: '#/components/schemas/Pagination'
    getAssetBalancesResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/SubWalletAssetBalance'
              pagination:
                $ref: '#/components/schemas/Pagination'
    getWalletsResponse:
      description: Successfully listed wallets
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/WalletInfo'
              pagination:
                $ref: '#/components/schemas/Pagination'
    getWalletByIdResponse:
      description: Successful get a wallet info
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/WalletInfo'
    createWalletResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreatedWalletInfo'
    updateWalletResponse:
      description: Successfully updated address
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/WalletInfo'
    deleteWalletResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: object
            required:
              - submitted
            properties:
              submitted:
                type: boolean
                example: true
                description: |
                  Whether the request to delete the wallet has been successfully submitted.
                  - `true`: The request to delete the wallet has been successfully submitted.
                  - `false`: The request to delete the wallet has not been submitted.
    listUtxoResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/UTXO'
              pagination:
                $ref: '#/components/schemas/Pagination'
    lockUtxoResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: object
            properties:
              executed:
                type: boolean
                example: true
                description: |
                  Whether the locking or unlocking operation has been successfully executed.
                  - `true`: The operation has been successfully executed.
                  - `false`: The operation has not been executed.
    maxTransferableValueResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MaxTransferableValue'
    getAddressesResponse:
      description: Successfully listed addresses
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/AddressInfo'
              pagination:
                $ref: '#/components/schemas/Pagination'
    getAddressResponse:
      description: Successfully listed address information
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/AddressInfo'
    createAddressResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/AddressInfo'
    checkAddressValidityResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: object
            required:
              - validity
            properties:
              validity:
                type: boolean
                description: |
                  Whether the address is valid.
                  - `true`: The address is valid.
                  - `false`: The address is invalid.
                example: true
    checkAddressesValidityResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: array
            items:
              type: object
              required:
                - address
                - validity
              properties:
                address:
                  type: string
                  description: The wallet address.
                  example: '0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045'
                validity:
                  type: boolean
                  description: |
                    Whether the address is valid.
                     - `true`: The address is valid.
                     - `false`: The address is invalid.
                  example: true
    checkLoopTransfersResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: array
            items:
              type: object
              required:
                - validity
              properties:
                address:
                  type: string
                  description: The wallet address.
                  example: '0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045'
                is_loop:
                  type: boolean
                  description: |
                    Whether the transaction from the given source wallet to the destination address can be executed as a Loop transfer.

                    - `true`: The transaction can be executed as a Loop transfer.
                    - `false`: The transaction cannot be executed as a Loop transfer.
                  example: false
    createKeyShareHolderGroupsResponse:
      description: mpc vault successfully created
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/KeyShareHolderGroup'
    createMpcProjectResponse:
      description: Successfully created project.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MPCProject'
    createTssRequestResponse:
      $ref: '#/components/responses/createMpcVaultResponse'
    createMpcVaultResponse:
      description: Successfully created the vault.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MPCVault'
    getCoboKeyHoldersResponse:
      description: Successfully listed MPC Wallets' key share holder information.
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/KeyShareHolder'
    getKeyShareHolderGroupResponse:
      description: Successfully get mpc tss group
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/KeyShareHolderGroup'
    getKeyShareHolderGroupsResponse:
      description: Successfully listed key share holder groups.
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/KeyShareHolderGroup'
              pagination:
                $ref: '#/components/schemas/Pagination'
    getMpcProjectResponse:
      description: Successfully listed all vaults.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MPCProject'
    getMpcProjectsResponse:
      description: Successfully listed all projects.
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/MPCProject'
              pagination:
                $ref: '#/components/schemas/Pagination'
    getTssRequestResponse:
      description: Successfully retrieved TSS request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TSSRequest'
    getMpcVaultResponse:
      description: Successfully retrieved vault information.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MPCVault'
    getMpcVaultsResponse:
      description: Successfully listed all vaults.
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/MPCVault'
              pagination:
                $ref: '#/components/schemas/Pagination'
    deleteKeyShareHolderGroupResponse:
      description: Successfully deleted the specified key share holder group.
      content:
        application/json:
          schema:
            type: object
            required:
              - submitted
            properties:
              submitted:
                type: boolean
                example: true
                description: |
                  Whether the request to delete the key share holder group has been successfully submitted.
                  - `true`: The request to delete the key share holder group has been successfully submitted.
                  - `false`: The request to delete the key share holder group has not been submitted.
    putKeyShareHolderGroupResponse:
      description: Successfully modify mpc tss group
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/KeyShareHolderGroup'
    putTssRequestResponse:
      description: Successfully modified the TSS request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TSSRequest'
    putVaultResponse:
      description: Successfully modify mpc vault
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MPCVault'
    getExchangeSettingsResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: array
            items:
              type: object
              description: The information about the supported exchange.
              required:
                - exchange_id
                - supported_trading_account_types
              properties:
                exchange_id:
                  $ref: '#/components/schemas/ExchangeId'
                supported_trading_account_types:
                  type: array
                  description: The supported trading account types of this exchange.
                  items:
                    type: string
                  example:
                    - Spot
                    - Asset
    getChainsByAssetIdResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/ChainInfo'
    getChainFeeResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/FeeRate'
            description: |
              The fee rate for the specified chain or token. 

              The `max_priority_fee` in the EIP-1559 fee model and the `max_fee_amount` properties in the fixed fee model represent the recommended values from the chain.
    getTransactionsResponse:
      description: The information about the transactions.
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'
              pagination:
                $ref: '#/components/schemas/Pagination'
    getTransactionByIdResponse:
      description: The information about a transaction.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TransactionDetail'
    estimateFeeResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EstimatedFee'
    transactionFeeResponse:
      description: Successful get a transaction detail
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TransactionRequestFee'
    createTransactionRequestResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: object
            required:
              - request_id
              - transaction_id
              - status
            properties:
              request_id:
                type: string
                description: The request ID that is used to track a transaction request. The request ID is provided by you and must be unique within your organization.
                example: f47ac10b-58cc-4372-a567-0e02b2c3d479
              transaction_id:
                type: string
                description: The transaction ID.
                example: c986cb3b-1301-412f-9450-13a52c43a95f
              status:
                $ref: '#/components/schemas/TransactionStatus'
    broadcastTransactionsResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: array
            items:
              type: object
              required:
                - request_id
                - transaction_id
              properties:
                request_id:
                  type: string
                  description: The request ID that is used to track a transaction request. The request ID is provided by you and must be unique within your organization.
                  example: f47ac10b-58cc-4372-a567-0e02b2c3d479
                transaction_id:
                  type: string
                  description: The transaction ID.
                  example: c986cb3b-1301-412f-9450-13a52c43a95f
    createWebhookEndpointResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/WebhookEndpoint'
    getWebhookEndpointResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/WebhookEndpoint'
    listWebhookEndpointsResponse:
      description: Successfully listed of webhook endpoints
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                items:
                  $ref: '#/components/schemas/WebhookEndpoint'
                type: array
              pagination:
                $ref: '#/components/schemas/Pagination'
    updateWebhookEndpointResponse:
      description: Update webhook endpoint successfully.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/WebhookEndpoint'
    listWebhookEventsResponse:
      description: A list of webhook events has been successfully retrieved.
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                items:
                  $ref: '#/components/schemas/WebhookEvent'
                type: array
              pagination:
                $ref: '#/components/schemas/Pagination'
    getWebhookEventResponse:
      description: The webhook event information is successfully retrieved.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/WebhookEvent'
    getWebhookEventDefinitionsResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: array
            items:
              type: object
              properties:
                event_type:
                  $ref: '#/components/schemas/WebhookEventType'
                description:
                  type: string
                  description: The description of the webhook event type.
                  example: Occurs when the transaction status is updated
    retryWebhookEventResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: object
            properties:
              retried:
                type: boolean
                example: true
                description: Whether the retry request has been successfully sent.
    getWebhookEventLogsResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/WebhookEventLog'
              pagination:
                $ref: '#/components/schemas/Pagination'
    listStakingPoolsResponse:
      description: A list of staking protocols has been successfully retrieved.
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                items:
                  $ref: '#/components/schemas/PoolSummary'
                type: array
              pagination:
                $ref: '#/components/schemas/Pagination'
    createActivityResponse:
      description: Successfully created a staking activity.
      content:
        application/json:
          schema:
            type: object
            required:
              - activity_id
            properties:
              activity_id:
                type: string
                description: The id of the activity
                example: 0111039d-27fb-49ba-b172-6e0aa80e37ec
              staking_id:
                type: string
                description: The id of the related staking
                example: 0111039d-27fb-49ba-b172-6e0aa80e37ec
    activityDetailsResponse:
      description: A staking activity has been successfully retrieved.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Activity'
    stakingsDetailsResponse:
      description: A staking has been successfully retrieved.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Stakings'
    poolDetailsResponse:
      description: A staking pool has been successfully retrieved.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PoolDetails'
    listStakingsResponse:
      description: A list of staking has been successfully retrieved.
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                items:
                  $ref: '#/components/schemas/Stakings'
                type: array
              pagination:
                $ref: '#/components/schemas/Pagination'
    listActivitiesResponse:
      description: A list of staking activities has been successfully retrieved.
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                items:
                  $ref: '#/components/schemas/Activity'
                type: array
              pagination:
                $ref: '#/components/schemas/Pagination'
    estimateStakingFeeResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: object
            properties:
              fee_type:
                $ref: '#/components/schemas/FeeType'
              fee_amount:
                type: string
                description: The amount of the estimate transaction fee
                example: '0.02'
              token_id:
                type: string
                description: The token ID of the transaction fee.
                example: ETH
    getTokenResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: object
            properties:
              access_token:
                type: string
                description: The access token.
                example: AnCEPEp5Q8qjAOA1Lb6kVd2OlkCyJnMTeMPdLbPOM8cz176Eb5y7EJoUjJJ0vkzz
              token_type:
                type: string
                description: 'The type of the tokens, which is Bearer.'
                example: Bearer
              scope:
                type: string
                description: |
                  The scope of the access token to limit the app's access to the organization's resources. 
                  **Note**: Currently this property value is empty. The scope of the access token is based on the permissions granted when the app user installs the app.
                example: ''
              expires_in:
                type: integer
                description: The time in seconds in which the access token expires.
                example: 43199
              refresh_token:
                type: string
                description: 'The refresh token, used to obtain a new access token when the current access token expires.'
                example: rK49jI0zt49gsttzscscik15Asmlpu1TdcxqguJJS8B9f6ilJEC0y3PbVqwsEAw5
    refreshTokenResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: object
            properties:
              access_token:
                type: string
                description: The new access token.
                example: AnCEPEp5Q8qjAOA1Lb6kVd2OlkCyJnMTeMPdLbPOM8cz176Eb5y7EJoUjJJ0vkzz
              token_type:
                type: string
                description: 'The type of the tokens, which is Bearer.'
                example: Bearer
              scope:
                type: string
                description: |
                  The scope of the access token to limit the app's access to the organization's resources.
                  **Note**: Currently this property value is empty. The scope of the access token is based on the permissions granted when the app user installs the app.
                example: ''
              expires_in:
                type: integer
                description: The time in seconds in which the new access token expires.
                example: 43199
              refresh_token:
                type: string
                description: 'The refresh token, used to obtain another access token when the new access token expires.'
                example: rK49jI0zt49gsttzscscik15Asmlpu1TdcxqguJJS8B9f6ilJEC0y3PbVqwsEAw5
    oauthErrorResponse:
      description: Unauthorized. Please provide valid credentials.
      content:
        application/json:
          schema:
            type: object
            description: The response of a failed request.
            required:
              - error
              - error_description
            properties:
              error:
                type: string
                description: The error name.
              error_message:
                type: string
                description: The error description.
  securitySchemes:
    CoboAuth:
      type: apiKey
      in: header
      name: BIZ-API-KEY
      description: The API key.
    OAuth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: 'https://auth.cobo.com/authorize'
          tokenUrl: 'https://auth.cobo.com/oauth/token'
          scopes:
            'custodial_asset_wallet:create': Create access to custodial asset wallets
            'custodial_asset_wallet:add': Generate address access to custodial asset wallets
            'custodial_asset_wallet:edit': Change wallet name access to custodial asset wallets
            'custodial_asset_wallet:withdraw': Withdraw access to custodial asset wallets
            'mpc_organization_controlled_wallet:create': Create access to MPC organization-controlled wallets
            'mpc_organization_controlled_wallet:add': Generate address access to MPC organization-controlled wallets
            'mpc_organization_controlled_wallet:edit': Change wallet name access to MPC organization-controlled wallets
            'mpc_organization_controlled_wallet:withdraw': Withdraw access to MPC organization-controlled wallets
            'mpc_organization_controlled_wallet:contract_call': Contract call access to MPC organization-controlled wallets
            'mpc_organization_controlled_wallet:message_sign': Message sign access to MPC organization-controlled wallets
            'mpc_organization_controlled_vault:manage': Create/Edit access to MPC organization-controlled vaults
            'mpc_organization_controlled_key_group:manage': Create/Edit/Delete access to MPC organization-controlled key groups
            'mpc_organization_controlled_tss_request:manage': Create/Cancel access to MPC organization-controlled tss requests
            'mpc_user_controlled_wallet:create': Create access to MPC user-controlled wallets
            'mpc_user_controlled_wallet:add': Generate address access to MPC user-controlled wallets
            'mpc_user_controlled_wallet:edit': Change wallet name access to MPC user-controlled wallets
            'mpc_user_controlled_wallet:withdraw': Withdraw access to MPC user-controlled wallets
            'mpc_user_controlled_wallet:contract_call': Contract call access to MPC user-controlled wallets
            'mpc_user_controlled_wallet:message_sign': Message sign access to MPC user-controlled wallets
            'mpc_user_controlled_project:manage': Create/Edit access to MPC user-controlled projects
            'mpc_user_controlled_vault:manage': Create/Edit access to MPC user-controlled vaults
            'mpc_user_controlled_key_group:manage': Create/Edit/Delete access to MPC user-controlled key groups
            'mpc_user_controlled_tss_request:manage': Create/Cancel access to MPC user-controlled tss requests
            'webhook:resend': Resend access to webhook events
            'webhook_url:edit': Create/Edit access to webhook urls
security:
  - CoboAuth: [ ]
