openapi: 3.0.3
info:
  title: Cobo Wallet as a Service 2.0
  description: |
    Cobo WaaS 2.0 enables you to programmatically access Cobo's full suite of
    crypto wallet technologies with powerful and flexible access controls.

    # Wallet technologies
    - Custodial Wallet
    - MPC Wallet
    - Smart Contract Wallet (Based on Safe{Wallet}, to be supported later)
    - Exchange Wallet(To be supported later)

    # Risk Control technologies
    - Workflow
    - Access Control List (ACL)

    # Risk Control targets
    - Wallet Management
      - User/team and their permission management
      - Risk control configurations, e.g. whitelist, blacklist, rate-limiting etc.
    - Blockchain Interaction
      - Crypto transfer
      - Smart Contract Invocation

    # Important
    HTTPS only. RESTful, resource oriented

    # Get Started
    Set up your APIs or get authorization

    # Authentication and Authorization
    CoboAuth

    # Request and Response
    application/json

    # Error Handling

    ### Common error codes
    | Error Code | Description |
    | -- | -- |
    | `2000` | Internal error |
    | `2002` | Unsupported HTTP method |
    | `2003` | Missing required parameters |
    | `2006` | Illegal parameter format or value |
    | `2010` | Exceeded frequency limit |
    | `2020` | Missing action |
    | `2021` | Missing handler |
    | `2022` | Missing required request header |
    | `2023` | Verification failed |
    | `2024` | Authentication failed |
    | `2025` | Forbidden |
    | `2026` | Too many requests |
    | `2027` | Exceed quota limit |
    | `2028` | Not found |
    | `2029` | Invalid status |
    | `2040` | Duplicated key |

    ### API-specific error codes
    For error codes that are dedicated to a specific API, see the Error codes section in each API specification, for example, /v2/wallets.

    # Rate and Usage Limiting

    # Pagination
    # Support
    [Developer Hub](https://cobo.com/developers)
  termsOfService: 'https://cobo.com/waas/tos/'
  license:
    name: Apache 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'
  contact:
    name: Cobo WaaS
    url: 'https://www.cobo.com/waas'
    email: support@cobo.com
  version: 1.0.0
servers:
  - url: 'https://api.cobo.com/v2'
    description: Production environment
  - url: 'https://api.dev.cobo.com/v2'
    description: Development environment
tags:
  - name: Wallets
    description: Operations related to all wallets.
  - name: Wallets - MPC Wallet
    description: Operations related to mpc wallet.
  - name: Transactions
    description: Operations related to all transactions.
  - name: Developers - Webhooks
    description: Operations related to webhooks.
paths:
  /wallets/chains:
    get:
      tags:
        - Wallets
      operationId: get_chains
      summary: List chain metadata
      description: |
        This operation retrieves the metadata of all chains supported by Cobo WaaS 2.0.

        It provides details such as chain ID, chain name, and other relevant information. The chain metadata is publicly available without any permission restrictions.
      security:
        - CoboAuth: []
      parameters:
        - $ref: '#/components/parameters/optionalChainIdParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          $ref: '#/components/responses/getChainsResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
  /wallets/tokens:
    get:
      tags:
        - Wallets
      operationId: get_tokens
      summary: List token metadata
      description: |
        This operation retrieves the metadata of the tokens stored under your account.

        It provides details such as token ID, token symbol, and other relevant information. The token metadata is publicly available without any permission restrictions.
      security:
        - CoboAuth: []
      parameters:
        - $ref: '#/components/parameters/optionalTokenIdParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          $ref: '#/components/responses/getTokensResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
  /wallets/supported_chains:
    get:
      tags:
        - Wallets
      operationId: get_supported_chains
      summary: List supported chains
      description: |
        This operation retrieves all chains supported by the specified wallet type or subtype.
      security:
        - CoboAuth: []
      parameters:
        - $ref: '#/components/parameters/optionalWalletTypeParam'
        - $ref: '#/components/parameters/optionalWalletSubtypeParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          $ref: '#/components/responses/getChainsResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
  /wallets/supported_tokens:
    get:
      tags:
        - Wallets
      operationId: get_supported_tokens
      summary: List supported tokens
      description: |
        This operation retrieves all supported tokens for the organization associated with your API key. You can also specify the wallet type, subtype, and chain ID you want to query.

        You can retrieve chain IDs by using the [List supported chains](/api-references/v2/wallets/list-supported-chains) operation.
      security:
        - CoboAuth: []
      parameters:
        - $ref: '#/components/parameters/optionalWalletTypeParam'
        - $ref: '#/components/parameters/optionalWalletSubtypeParam'
        - $ref: '#/components/parameters/optionalChainIdParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          $ref: '#/components/responses/getTokensResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
  /wallets/enabled_chains:
    get:
      tags:
        - Wallets
      operationId: get_enabled_chains
      summary: List enabled chains
      description: |
        This operation retrieves all the chains enabled for the organization associated with your API key. You can also specify the wallet type and subtype you want to query.
      security:
        - CoboAuth: []
      parameters:
        - $ref: '#/components/parameters/optionalWalletTypeParam'
        - $ref: '#/components/parameters/optionalWalletSubtypeParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          $ref: '#/components/responses/getChainsResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
  /wallets/enabled_tokens:
    get:
      tags:
        - Wallets
      operationId: get_enabled_tokens
      summary: List enabled tokens
      description: |
        This operation retrieves all tokens that can be used by the organization associated with your API key. You can filter the result by wallet type, subtype, and chain ID.

        You can retrieve chain IDs by using the [List enabled chains](/api-references/v2/wallets/list-enabled-chains) operation.
      security:
        - CoboAuth: []
      parameters:
        - $ref: '#/components/parameters/optionalWalletTypeParam'
        - $ref: '#/components/parameters/optionalWalletSubtypeParam'
        - $ref: '#/components/parameters/optionalChainIdParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          $ref: '#/components/responses/getTokensResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
  /wallets:
    post:
      tags:
        - Wallets
      operationId: create_wallet
      summary: Create wallet
      description: |
        This operation creates a wallet with the provided information.
      security:
        - CoboAuth: []
      requestBody:
        $ref: '#/components/requestBodies/createWalletBody'
      responses:
        '201':
          $ref: '#/components/responses/createWalletResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '429':
          $ref: '#/components/responses/tooManyRequestError'
    get:
      tags:
        - Wallets
      operationId: list_wallets
      summary: List all wallets
      description: |
        This operation retrieves the information of all wallets under your organization. You can filter the result by wallet type, subtype, and Vault ID (for MPC Wallets).

        <Note>Ensure that either the wallet type or subtype is provided at least.</Note>
      security:
        - CoboAuth: []
      parameters:
        - $ref: '#/components/parameters/optionalWalletTypeParam'
        - $ref: '#/components/parameters/optionalWalletSubtypeParam'
        - $ref: '#/components/parameters/optionalVaultIdQueryParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          $ref: '#/components/responses/getWalletsResponse'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '429':
          $ref: '#/components/responses/tooManyRequestError'
  '/wallets/{wallet_id}':
    parameters:
      - $ref: '#/components/parameters/walletIdParam'
    get:
      tags:
        - Wallets
      operationId: get_wallet_by_id
      summary: Retrieve wallet information by ID
      description: |
        This operation retrieves detailed information about the specified wallet.
      security:
        - CoboAuth: []
      responses:
        '200':
          $ref: '#/components/responses/getWalletByIdResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
        '404':
          $ref: '#/components/responses/notFoundError'
    put:
      tags:
        - Wallets
      operationId: update_wallet_by_id
      summary: Update wallet by ID
      description: |
        This operation updates the information of a specified wallet.

        <Note>This operation is applicable to Exchange Wallets to update the API key etc. For other wallet type, only the name can be updated.</Note>
      security:
        - CoboAuth: []
      requestBody:
        $ref: '#/components/requestBodies/updateWalletBody'
      responses:
        '200':
          $ref: '#/components/responses/updateWalletResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
        '404':
          $ref: '#/components/responses/notFoundError'
    delete:
      tags:
        - Wallets
      operationId: delete_wallet_by_id
      summary: Delete wallet by ID
      description: |
        This operation deletes the specified wallet.

        <Note>This operation is applicable to Exchange Wallets only.</Note>
      security:
        - CoboAuth: []
      responses:
        '204':
          description: Resource successfully deleted.
        '400':
          $ref: '#/components/responses/badRequestError'
        '404':
          $ref: '#/components/responses/notFoundError'
  '/wallets/{wallet_id}/spendables':
    parameters:
      - $ref: '#/components/parameters/walletIdParam'
    get:
      tags:
        - Wallets
      operationId: get_spendable_list
      summary: List spendable UTXOs
      description: |
        The operation retrieves a list of spendable unspent transaction outputs (UTXOs) for the specified wallet and token.

        <Note>This operation is applicable to MPC Wallets only.</Note>
      security:
        - CoboAuth: []
      parameters:
        - $ref: '#/components/parameters/optionalTokenIdParam'
        - $ref: '#/components/parameters/addressStrParam'
        - $ref: '#/components/parameters/optionalUtxoTxHashParam'
      responses:
        '200':
          $ref: '#/components/responses/spendableListResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
  '/wallets/{wallet_id}/spendables/lock':
    parameters:
      - $ref: '#/components/parameters/walletIdParam'
    post:
      tags:
        - Wallets
      operationId: lock_spendable_list
      summary: Lock/Unlock the UTXOs in tx hash list
      description: |
        Lock/Unlock the UTXOs in the given tx hash list. The Locked UTXO can not be transferred until unlocked.

        <Note>This operation is applicable to MPC Wallets only.</Note>
      security:
        - CoboAuth: []
      requestBody:
        $ref: '#/components/requestBodies/lockSpendablesBody'
      responses:
        '200':
          $ref: '#/components/responses/lockSpendableResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
  '/wallets/{wallet_id}/max_transferable_value':
    get:
      tags:
        - Wallets
      operationId: get_max_transferable_value
      summary: Get max transferable value
      description: |
        This operation retrieves the maximum amount that you can transfer from a wallet or a specified wallet address, along with the corresponding transaction fee.
      security:
        - CoboAuth: []
      parameters:
        - $ref: '#/components/parameters/walletIdParam'
        - $ref: '#/components/parameters/requiredTokenIdParam'
        - $ref: '#/components/parameters/requiredFeeRateParam'
        - $ref: '#/components/parameters/toAddressStrParam'
        - $ref: '#/components/parameters/fromAddressStrParam'
      responses:
        '200':
          $ref: '#/components/responses/maxTransferableValueResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
  '/wallets/{wallet_id}/addresses':
    parameters:
      - $ref: '#/components/parameters/walletIdParam'
    post:
      tags:
        - Wallets
      operationId: add_wallet_address
      summary: Add address to wallet
      description: |
        This operation creates one or more addresses for the specified wallet.

        <Note>This operation is applicable to Custodial Wallets and MPC Wallets only.</Note>
      security:
        - CoboAuth: []
      requestBody:
        $ref: '#/components/requestBodies/createAddressBody'
      responses:
        '201':
          $ref: '#/components/responses/createAddressResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
    get:
      tags:
        - Wallets
      operationId: list_addresses
      summary: List wallet addresses by wallet ID
      description: |
        This operation retrieves a list of addresses under the specified wallet.
      security:
        - CoboAuth: []
      parameters:
        - $ref: '#/components/parameters/optionalTokenIdParam'
        - $ref: '#/components/parameters/addressStrParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          $ref: '#/components/responses/getAddressesResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
  /wallets/address/validity:
    get:
      tags:
        - Wallets
      operationId: get_address_validity
      summary: Check address validity
      description: |
        This operation verifies if the given address is valid for the specified token.
      security:
        - CoboAuth: []
      parameters:
        - $ref: '#/components/parameters/requiredTokenIdParam'
        - $ref: '#/components/parameters/requiredAddressStrParam'
      responses:
        '200':
          $ref: '#/components/responses/getAddressValidityResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
  '/wallets/{wallet_id}/tokens':
    get:
      tags:
        - Wallets
      operationId: get_wallet_token_balances
      summary: List token balances by wallet
      description: |
        The operation retrieves a list of token balances within the specified wallet.

        <Note>This operation is applicable to Custodial Wallets and MPC Wallets only.</Note>
      security:
        - CoboAuth: []
      parameters:
        - $ref: '#/components/parameters/walletIdParam'
        - $ref: '#/components/parameters/optionalTokenIdParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          $ref: '#/components/responses/getTokenBalancesResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
        '404':
          $ref: '#/components/responses/notFoundError'
  '/wallets/{wallet_id}/addresses/{address_id}/tokens':
    get:
      tags:
        - Wallets
      operationId: get_wallet_address_token_balances
      summary: List token balances by address
      description: |
        The operation retrieves a list of token balances for a specified address within an MPC Wallet. 

        <Note>This operation is applicable to MPC Wallets only.</Note>
      security:
        - CoboAuth: []
      parameters:
        - $ref: '#/components/parameters/walletIdParam'
        - $ref: '#/components/parameters/addressIdParam'
        - $ref: '#/components/parameters/optionalTokenIdParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          $ref: '#/components/responses/getTokenBalancesResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
  /wallets/mpc/cobo_key_holders:
    get:
      tags:
        - Wallets - MPC Wallet
      operationId: list_cobo_key_holder
      summary: List all cobo key holders
      description: This endpoint allows users to query cobo key holders information.
      security:
        - CoboAuth: []
      responses:
        '200':
          $ref: '#/components/responses/getCoboKeyHoldersResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
        '404':
          $ref: '#/components/responses/notFoundError'
        '503':
          $ref: '#/components/responses/serviceUnavailableError'
  /wallets/mpc/projects:
    post:
      tags:
        - Wallets - MPC Wallet
      operationId: create_mpc_project
      summary: Create a mpc project
      description: |
        Create a mpc project with the provided information.
      security:
        - CoboAuth: []
      requestBody:
        $ref: '#/components/requestBodies/createMpcProjectBody'
      responses:
        '201':
          $ref: '#/components/responses/createMpcProjectResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
    get:
      tags:
        - Wallets - MPC Wallet
      operationId: list_mpc_project
      summary: List all mpc projects
      description: |
        Retrieves a list of mpc projects.
      security:
        - CoboAuth: []
      responses:
        '200':
          $ref: '#/components/responses/getMpcProjectsResponse'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '429':
          $ref: '#/components/responses/tooManyRequestError'
  '/wallets/mpc/projects/{project_id}':
    get:
      tags:
        - Wallets - MPC Wallet
      operationId: get_mpc_project
      summary: Get a mpc project information
      description: |
        Get detailed information about a mpc project identified by its unique ID. 

        Get project ids by calling list_mpc_project.
      security:
        - CoboAuth: []
      parameters:
        - $ref: '#/components/parameters/projectIdParam'
      responses:
        '200':
          $ref: '#/components/responses/getMpcProjectResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
        '404':
          $ref: '#/components/responses/notFoundError'
        '503':
          $ref: '#/components/responses/serviceUnavailableError'
    put:
      tags:
        - Wallets - MPC Wallet
      operationId: update_mpc_project
      summary: Update a mpc project
      description: |
        Update a mpc project name information by its ID.
      security:
        - CoboAuth: []
      parameters:
        - $ref: '#/components/parameters/projectIdParam'
      requestBody:
        $ref: '#/components/requestBodies/updateProjectBody'
      responses:
        '200':
          $ref: '#/components/responses/getMpcProjectResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
        '404':
          $ref: '#/components/responses/notFoundError'
        '503':
          $ref: '#/components/responses/serviceUnavailableError'
  /wallets/mpc/vaults:
    post:
      tags:
        - Wallets - MPC Wallet
      operationId: create_mpc_vault
      summary: Create a mpc vault
      description: |
        Create a mpc vault with the provided information.
      security:
        - CoboAuth: []
      requestBody:
        $ref: '#/components/requestBodies/createMpcVaultBody'
      responses:
        '201':
          $ref: '#/components/responses/createMpcVaultResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
    get:
      tags:
        - Wallets - MPC Wallet
      operationId: list_mpc_vault
      summary: List all mpc vaults
      description: |
        Retrieves a list of mpc vaults. 
        This endpoint allows filtering by project ID.
      security:
        - CoboAuth: []
      parameters:
        - $ref: '#/components/parameters/optionalProjectIdQueryParam'
      responses:
        '200':
          $ref: '#/components/responses/getMpcVaultsResponse'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '429':
          $ref: '#/components/responses/tooManyRequestError'
  '/wallets/mpc/vaults/{vault_id}':
    get:
      tags:
        - Wallets - MPC Wallet
      operationId: get_mpc_vault
      summary: Get a mpc vault information
      description: |
        Get detailed information about a mpc vault identified by its unique ID. 
        Get vault ids by calling list_mpc_vault.
      security:
        - CoboAuth: []
      parameters:
        - $ref: '#/components/parameters/vaultIdParam'
      responses:
        '200':
          $ref: '#/components/responses/getMpcVaultResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
        '404':
          $ref: '#/components/responses/notFoundError'
        '503':
          $ref: '#/components/responses/serviceUnavailableError'
    put:
      tags:
        - Wallets - MPC Wallet
      operationId: modify_mpc_vault
      summary: Update a mpc vault information
      description: |
        Update a mpc vault name information by its ID.
      security:
        - CoboAuth: []
      parameters:
        - $ref: '#/components/parameters/vaultIdParam'
      requestBody:
        $ref: '#/components/requestBodies/updateVaultBody'
      responses:
        '200':
          $ref: '#/components/responses/putVaultResponse'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '429':
          $ref: '#/components/responses/tooManyRequestError'
  '/wallets/mpc/vaults/{vault_id}/key_groups':
    post:
      tags:
        - Wallets - MPC Wallet
      operationId: create_key_group
      summary: Create a mpc key group
      description: |
        Create a mpc key group for vault ID with the provided information.
      security:
        - CoboAuth: []
      parameters:
        - $ref: '#/components/parameters/vaultIdParam'
      requestBody:
        $ref: '#/components/requestBodies/createKeyGroupBody'
      responses:
        '201':
          $ref: '#/components/responses/createKeyGroupsResponse'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '429':
          $ref: '#/components/responses/tooManyRequestError'
    get:
      tags:
        - Wallets - MPC Wallet
      operationId: list_key_group
      summary: List all mpc key groups
      description: |
        Retrieves a list of all key groups. 
        This endpoint allows filtering by vault ID and key group type.
      security:
        - CoboAuth: []
      parameters:
        - $ref: '#/components/parameters/vaultIdParam'
        - $ref: '#/components/parameters/optionalKeyGroupTypeParam'
      responses:
        '200':
          $ref: '#/components/responses/getKeyGroupsResponse'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '429':
          $ref: '#/components/responses/tooManyRequestError'
  '/wallets/mpc/vaults/{vault_id}/key_groups/{key_group_id}':
    get:
      tags:
        - Wallets - MPC Wallet
      operationId: get_key_group
      summary: Get a mpc key group information by group id
      description: |
        Get detailed information about a key group identified by its unique ID.
      security:
        - CoboAuth: []
      parameters:
        - $ref: '#/components/parameters/vaultIdParam'
        - $ref: '#/components/parameters/keyGroupIdParam'
      responses:
        '200':
          $ref: '#/components/responses/getKeyGroupResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
        '404':
          $ref: '#/components/responses/notFoundError'
        '503':
          $ref: '#/components/responses/serviceUnavailableError'
    put:
      tags:
        - Wallets - MPC Wallet
      operationId: update_key_group
      summary: Update a mpc key group information
      description: |
        Update a mpc key group type information by its ID. 

        Action:
        - UpgradeToMainKeyGroup: change group type to main key group
      security:
        - CoboAuth: []
      parameters:
        - $ref: '#/components/parameters/vaultIdParam'
        - $ref: '#/components/parameters/keyGroupIdParam'
        - $ref: '#/components/parameters/requiredUpdateKeyGroupActionParam'
      responses:
        '200':
          $ref: '#/components/responses/putKeyGroupResponse'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '429':
          $ref: '#/components/responses/tooManyRequestError'
    delete:
      tags:
        - Wallets - MPC Wallet
      operationId: delete_key_group
      summary: Delete a mpc key group
      description: |
        Delete a key group by its unique ID.
      security:
        - CoboAuth: []
      parameters:
        - $ref: '#/components/parameters/vaultIdParam'
        - $ref: '#/components/parameters/keyGroupIdParam'
      responses:
        '200':
          $ref: '#/components/responses/deleteKeyGroupResponse'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '429':
          $ref: '#/components/responses/tooManyRequestError'
  '/wallets/mpc/vaults/{vault_id}/tss_requests':
    post:
      tags:
        - Wallets - MPC Wallet
      operationId: create_tss_request
      summary: Create a tss request to generate key secrets for a tss group
      description: |
        Create a tss request to generate key secrets for a tss group.
      security:
        - CoboAuth: []
      parameters:
        - $ref: '#/components/parameters/vaultIdParam'
      requestBody:
        $ref: '#/components/requestBodies/createTssRequestBody'
      responses:
        '201':
          description: mpc vault successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TSSRequest'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '429':
          $ref: '#/components/responses/tooManyRequestError'
    get:
      tags:
        - Wallets - MPC Wallet
      operationId: list_tss_request
      summary: List tss request information by vault ID
      description: |
        Retrieving list of tss request information by vault ID.
        This endpoint allows filtering by key group ID.
      security:
        - CoboAuth: []
      parameters:
        - $ref: '#/components/parameters/vaultIdParam'
        - $ref: '#/components/parameters/requiredTargetKeyGroupIdParam'
      responses:
        '200':
          description: get mpc tss request successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TSSRequest'
        '400':
          $ref: '#/components/responses/badRequestError'
        '404':
          $ref: '#/components/responses/notFoundError'
        '503':
          $ref: '#/components/responses/serviceUnavailableError'
  '/wallets/mpc/vaults/{vault_id}/tss_requests/{tss_request_id}':
    get:
      tags:
        - Wallets - MPC Wallet
      operationId: get_tss_request
      summary: Get a tss request information
      description: |
        Get detailed information about a tss request identified by its unique ID. 
        Get project ids by calling list_tss_request.
      security:
        - CoboAuth: []
      parameters:
        - $ref: '#/components/parameters/vaultIdParam'
        - $ref: '#/components/parameters/tssRequestIdParam'
      responses:
        '200':
          $ref: '#/components/responses/getTssRequestResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
        '404':
          $ref: '#/components/responses/notFoundError'
        '503':
          $ref: '#/components/responses/serviceUnavailableError'
    put:
      tags:
        - Wallets - MPC Wallet
      operationId: cancel_tss_request
      summary: Cancel a tss request
      description: |
        Cancel a mpc tss request by its ID.
      security:
        - CoboAuth: []
      parameters:
        - $ref: '#/components/parameters/vaultIdParam'
        - $ref: '#/components/parameters/tssRequestIdParam'
        - $ref: '#/components/parameters/requiredTssRequestActionParam'
      responses:
        '200':
          $ref: '#/components/responses/putTssRequestResponse'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '429':
          $ref: '#/components/responses/tooManyRequestError'
  /transactions/fee_price:
    get:
      tags:
        - Transactions
      operationId: get_chain_fee_price
      summary: Retrieve fee price data for chain and/or token
      description: |
        This endpoint retrieves fee price data for a specific blockchain network and/or token.
        Users can specify the chain ID or token ID as parameters to filter the results.
      security:
        - CoboAuth: []
      parameters:
        - $ref: '#/components/parameters/optionalChainIdParam'
        - $ref: '#/components/parameters/optionalTokenIdParam'
      responses:
        '200':
          $ref: '#/components/responses/getChainFeeResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
        '404':
          $ref: '#/components/responses/notFoundError'
  /transactions/estimate_fee:
    post:
      tags:
        - Transactions
      operationId: estimate_fee
      summary: Estimate transaction fee
      description: |
        This endpoint calculates the fee required for a transaction based on factors such as network congestion and transaction complexity.
        Users can provide transaction details in the request body, and the response will contain the estimated fee.
      security:
        - CoboAuth: []
      requestBody:
        $ref: '#/components/requestBodies/estimateFeeBody'
      responses:
        '200':
          $ref: '#/components/responses/estimateFeeResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
        '404':
          $ref: '#/components/responses/notFoundError'
  /transactions/transfer:
    post:
      tags:
        - Transactions
      operationId: create_transfer_transaction
      summary: Create a transfer transaction
      description: |
        This endpoint generates a transaction to transfer funds from one account to another.
        Users need to provide details such as sender and recipient addresses, token id, and amount to transfer in the request body.
        Upon successful creation, a transaction request is returned, which can then be used for tracking the process.
      security:
        - CoboAuth: []
      requestBody:
        $ref: '#/components/requestBodies/createTransferBody'
      responses:
        '201':
          $ref: '#/components/responses/createTransactionRequestResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
  /transactions/contract_call:
    post:
      tags:
        - Transactions
      operationId: create_contract_call_transaction
      summary: Create transaction to call smart contract
      description: |
        This endpoint generates a transaction to invoke a function within a smart contract on the blockchain.
        The request body should include details such as the contract address, function to call, and any required parameters encoded as the calldata.
        Upon successful creation, a transaction request is returned, which can then be submitted to the blockchain for execution.
        This endpoint only applies to ethereum-like blockchains for now.
      security:
        - CoboAuth: []
      requestBody:
        $ref: '#/components/requestBodies/createSmartContractCallBody'
      responses:
        '201':
          $ref: '#/components/responses/createTransactionRequestResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
  /transactions/message_sign:
    post:
      tags:
        - Transactions
      operationId: create_message_sign_transaction
      summary: Create transaction to sign a message
      description: |
        This endpoint generates a transaction to sign a message using cryptographic techniques.
        Users can provide the message to sign in the request body, and the response will contain the transaction request.
      security:
        - CoboAuth: []
      requestBody:
        $ref: '#/components/requestBodies/createMessageSignBody'
      responses:
        '201':
          $ref: '#/components/responses/createTransactionRequestResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
  /transactions:
    get:
      tags:
        - Transactions
      operationId: list_transactions
      summary: List all transactions
      description: |
        This endpoint retrieves a list of transactions based on various optional parameters.
        Users can filter transactions by request ID, cobo ID, transaction ID, transaction hash, type, status, and timestamps etc.
        Pagination parameters such as sorting, limit, before, and after are also available for result management.
      security:
        - CoboAuth: []
      parameters:
        - $ref: '#/components/parameters/optionalRequestIdParam'
        - $ref: '#/components/parameters/optionalCoboIdParam'
        - name: transaction_id
          in: query
          required: false
          description: Unique id of the transaction
          schema:
            type: string
            format: uuid
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        - name: transaction_hash
          in: query
          required: false
          description: Transaction hash
          schema:
            type: string
          example: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
        - $ref: '#/components/parameters/optionalTransactionTypeListParam'
        - $ref: '#/components/parameters/optionalTransactionStatusListParam'
        - $ref: '#/components/parameters/optionalTransactionSourceTypeListParam'
        - $ref: '#/components/parameters/optionalTransactionSourceAddressListParam'
        - $ref: '#/components/parameters/optionalTransactionSourceWalletIdListParam'
        - $ref: '#/components/parameters/optionalTransactionDestinationTypeListParam'
        - $ref: '#/components/parameters/optionalTransactionDestinationAddressListParam'
        - $ref: '#/components/parameters/optionalTransactionDestinationWalletIdListParam'
        - $ref: '#/components/parameters/optionalChainIdListParam'
        - $ref: '#/components/parameters/optionalTokenListIdParam'
        - $ref: '#/components/parameters/optionalAssetIdListParam'
        - $ref: '#/components/parameters/optionalVaultIdListQueryParam'
        - $ref: '#/components/parameters/optionalProjectIdListQueryParam'
        - $ref: '#/components/parameters/optionalMinCreatedTimestampParam'
        - $ref: '#/components/parameters/optionalMaxCreatedTimestampParam'
        - $ref: '#/components/parameters/sortByParam'
        - $ref: '#/components/parameters/directionParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          $ref: '#/components/responses/getTransactionsResponse'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '429':
          $ref: '#/components/responses/tooManyRequestError'
  '/transactions/{transaction_id}':
    parameters:
      - $ref: '#/components/parameters/transactionIdParam'
    get:
      tags:
        - Transactions
      operationId: get_transaction_by_id
      summary: Retrieve transaction information by ID
      description: |
        This endpoint provides detailed information about a transaction based on its unique identifier.
        Users can retrieve various details such as transaction status, timestamps, and involved parties.
      security:
        - CoboAuth: []
      responses:
        '200':
          $ref: '#/components/responses/getTransactionByIdResponse'
        '404':
          $ref: '#/components/responses/notFoundError'
  '/transactions/{transaction_id}/resend':
    parameters:
      - $ref: '#/components/parameters/transactionIdParam'
    post:
      tags:
        - Transactions
      operationId: resend_transaction_by_id
      summary: Resend transaction by ID
      description: |
        This endpoint allows users to resend (re-attempt) a transaction based on its unique identifier.
        Resending a transaction initiates a new attempt to process the transaction failed previously.
      security:
        - CoboAuth: []
      requestBody:
        $ref: '#/components/requestBodies/resendTransactionBody'
      responses:
        '201':
          $ref: '#/components/responses/createTransactionRequestResponse'
        '404':
          $ref: '#/components/responses/notFoundError'
  '/transactions/{transaction_id}/cancel':
    parameters:
      - $ref: '#/components/parameters/transactionIdParam'
    post:
      tags:
        - Transactions
      operationId: cancel_transaction_by_id
      summary: Cancel transaction by ID
      description: |
        This endpoint allows users to cancel a transaction based on its unique identifier. 
        The transaction can be cancelled if the transaction has not been approved by risk control.
      security:
        - CoboAuth: []
      responses:
        '201':
          $ref: '#/components/responses/createTransactionRequestResponse'
        '404':
          $ref: '#/components/responses/notFoundError'
  '/transactions/{transaction_id}/drop':
    parameters:
      - $ref: '#/components/parameters/transactionIdParam'
    post:
      tags:
        - Transactions
      operationId: drop_transaction_by_id
      summary: Drop transaction by ID
      description: |
        This endpoint allows users to drop (remove) a transaction based on its unique identifier.
        Dropping a transaction will trigger a RBF transaction.
      security:
        - CoboAuth: []
      requestBody:
        $ref: '#/components/requestBodies/feeRequestBody'
      responses:
        '201':
          $ref: '#/components/responses/createTransactionRequestResponse'
        '404':
          $ref: '#/components/responses/notFoundError'
  '/transactions/{transaction_id}/speedup':
    parameters:
      - $ref: '#/components/parameters/transactionIdParam'
    post:
      tags:
        - Transactions
      operationId: speedup_transaction_by_id
      summary: Speed up transaction by ID
      description: |
        This endpoint allows users to speed up (accelerate) a transaction based on its unique identifier.
        Speeding up a transaction involves adjusting the fee to prioritize its processing.
      security:
        - CoboAuth: []
      requestBody:
        $ref: '#/components/requestBodies/feeRequestBody'
      responses:
        '201':
          $ref: '#/components/responses/createTransactionRequestResponse'
        '404':
          $ref: '#/components/responses/notFoundError'
  /webhooks/events:
    get:
      tags:
        - Developers - Webhooks
      summary: List all events
      description: |
        This operation retrieves a list of webhook events that have occurred within the last 30 days.

        Note: The request will only return webhook events that have occurred to the wallets associated with your current API key. For example, if the current API key is only associated with Asset Wallets, any webhook events that have occurred to an MPC Wallet will not be retrieved with the current API key.
      operationId: list_events
      parameters:
        - description: |
            The event status. Possible values include:
            - `Success`: The event has been delivered, and the webhook endpoint has responded to the event.
            - `Retrying`: The event has been delivered, but the webhook endpoint has not responded. In this case, the WaaS service will retry delivering the event.
            - `Failed`: The event cannot be delivered and the WaaS service will stop retrying. This may occur if the number of retries reaches 10, or if the event has been delivered but the webhook endpoint responded with an error.
          in: query
          name: status
          schema:
            $ref: '#/components/schemas/WebhookEventStatus'
          required: false
          example: Success
        - description: |
            The event type.
          in: query
          name: type
          schema:
            $ref: '#/components/schemas/WebhookEventType'
          required: false
          example: asset_wallet.outbound.created
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          description: A list of webhook events has been successfully retrieved.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/WebhookEvent'
                    type: array
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
  '/webhooks/events/{event_id}':
    parameters:
      - $ref: '#/components/parameters/webhookEventIdParam'
    get:
      tags:
        - Developers - Webhooks
      summary: Retrieve event by ID
      description: |
        This operation retrieves the information of a webhook event by the event ID.
      operationId: get_webhook_event
      responses:
        '200':
          description: The webhook event information is successfully retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookEvent'
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '404':
          $ref: '#/components/responses/notFoundError'
  '/webhooks/events/{event_id}/logs':
    parameters:
      - $ref: '#/components/parameters/webhookEventIdParam'
    get:
      tags:
        - Developers - Webhooks
      summary: List event logs by ID
      description: |
        This operation retrieves a list of webhook event logs by event ID. Each retry will generate a separate event log.
      operationId: get_webhook_event_logs
      responses:
        '200':
          description: The request was successful.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WebhookEventLog'
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '404':
          $ref: '#/components/responses/notFoundError'
  '/webhooks/events/{event_id}/retry':
    parameters:
      - $ref: '#/components/parameters/webhookEventIdParam'
    post:
      tags:
        - Developers - Webhooks
      summary: Retry event by ID
      description: |
        This operation retries delivering a webhook event with the specified event ID. You can only retry delivering a webhook event in the `Retrying` or `Failed` status.
      operationId: retry_webhook_event
      responses:
        '201':
          description: The request was successful.
          content:
            application/json:
              schema:
                type: object
                properties:
                  retried:
                    type: boolean
                    example: true
                    description: Whether the retry request has been successfully sent.
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '404':
          $ref: '#/components/responses/notFoundError'
components:
  schemas:
    Pagination:
      type: object
      description: The pagination information of the returned data.
      properties:
        before:
          type: string
          example: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
          description: 'An object ID which serves as a cursor for pagination. For example, if the value of `before` is `foo`, the returned data ends before the object with the object ID `foo`.'
        after:
          type: string
          example: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
          description: 'An object ID which serves as a cursor for pagination. For example, if the value of `after` is `bar`, the returned data starts after the object with the object ID `bar`.'
    ErrorResponse:
      type: object
      description: The response of a failed request.
      required:
        - success
        - error_code
        - error_description
        - error_id
      properties:
        success:
          type: boolean
          default: false
          description: Whether the API operation was successful. This is always `false` for a failed request.
        error_code:
          type: integer
          description: The error code.
        error_description:
          type: string
          description: The error description.
        error_id:
          type: string
          description: A error log ID. You can use it for debugging purposes.
          example: 0b6ddf19083c4bd1a9ca01bec44b24dd
    AssetInfo:
      type: object
      description: The asset information.
      required:
        - asset_id
      properties:
        asset_id:
          type: string
          description: The asset ID.
          example: USDT
        display_code:
          type: string
          description: The asset symbol. You can use the value for display purposes.
          example: USDT
        description:
          type: string
          description: The description of the asset.
          example: Tether USDT
        icon_url:
          type: string
          description: The URL of the asset icon.
          example: 'https://d.cobo.com/public/logos/USDT.png'
    TokenInfo:
      type: object
      description: The token information.
      required:
        - token_id
        - chain_id
      properties:
        token_id:
          type: string
          description: The token ID.
          example: ETH_USDT
        chain_id:
          type: string
          description: The blockchain on which the token operates.
          example: ETH
        asset_id:
          type: string
          description: 'The asset ID, which is used to group the balances of the correponding tokens. For example, if you have $1,000 worth of ETH_USDT and $2,000 worth of TRON_USDT, the balance of your USDT assets will be $3,000.'
          example: USDT
        symbol:
          type: string
          description: The token symbol.
          example: USDT
        name:
          type: string
          description: The token name.
          example: Tether USDT
        decimal:
          type: integer
          description: The token decimal.
          example: 18
        icon_url:
          type: string
          description: The URL of the token icon.
          example: 'https://static.waas.co/images/coins/ETH.png'
        token_address:
          type: string
          description: 'The token address, if applicable.'
          example: '0xdAC17F958D2ee523a2206206994597C13D831ec7'
        fee_token_id:
          type: string
          description: The fee token ID.
          example: ETH
        can_deposit:
          type: boolean
          description: Indicates if deposits are enabled for this token.
          example: true
        can_withdraw:
          type: boolean
          description: Indicates if withdrawals are enabled for this token.
          example: true
    ChainInfo:
      type: object
      description: The chain information.
      required:
        - chain_id
      properties:
        chain_id:
          type: string
          description: The chain on which the token operates.
          example: ETH
        symbol:
          type: string
          description: The chain symbol.
          example: ETH
        icon_url:
          type: string
          description: The URL of the chain icon.
          example: 'https://static.waas.co/images/coins/ETH.png'
        explorer_tx_url:
          type: string
          description: The transaction URL pattern on the blockchain explorer. You can use it to concatenate the transaction URLs.
          example: 'https://etherscan.io/tx/{txn_id}'
        explorer_address_url:
          type: string
          description: The address URL pattern on the blockchain explorer. You can use it to concatenate the address URLs.
          example: 'https://etherscan.io/address/{address}'
        require_memo:
          type: boolean
          description: Whether the chain require memo.
          example: false
    WalletType:
      type: string
      enum:
        - Custodial
        - MPC
        - SmartContract
        - Exchange
      example: Custodial
      x-enumDescriptions:
        Custodial: Custodial Wallets.
        MPC: MPC Wallets.
        SmartContract: Smart Contract Wallets.
        Exchange: Exchange Wallets.
    WalletSubtype:
      type: string
      enum:
        - Asset
        - Web3
        - Main
        - Sub
        - Org-Controlled
        - User-Controlled
        - 'Safe{Wallet}'
      example: Asset
    SmartContractWalletType:
      type: string
      enum:
        - SafeWallet
      example: SafeWallet
      default: SafeWallet
      description: The Smart Contract Wallet type.
    SmartContractWalletOperationType:
      type: string
      enum:
        - CoboSafe
      example: CoboSafe
      default: CoboSafe
      description: The way you interact with the Smart Contract Wallet.
    ExchangeId:
      type: string
      enum:
        - binance
        - okx
        - deribit
        - bybit
        - gate
      description: The ID of the exchange.
      example: binance
    TokenBalance:
      type: object
      description: The balance information.
      required:
        - token_id
        - balance
      properties:
        token_id:
          type: string
          description: The token ID.
          pattern: '^[A-Z]+(_[A-Z0-9]+)?$'
          example: ETH_USDT
        balance:
          type: object
          description: The balance details.
          required:
            - total
            - available
          properties:
            total:
              type: string
              description: 'The total balance, which is the sum of the remaining fields.'
              example: '100.0'
            available:
              type: string
              description: The balance free to use.
              example: '80.5'
            pending:
              type: string
              description: The balance that is currently pending confirmation.
              default: '0'
              example: '10.5'
            locked:
              type: string
              description: The balance that is currently not accessible to transactions.
              default: '0'
              example: '3.0'
    AssetBalance:
      type: object
      description: The data for token balance information.
      required:
        - asset_id
        - balance
      properties:
        asset_id:
          type: string
          description: The asset ID.
          pattern: '^[A-Z0-9]+$'
          example: USDT
        balance:
          $ref: '#/components/schemas/TokenBalance/properties/balance'
    SafeWallet:
      allOf:
        - allOf:
            - $ref: '#/components/schemas/CustodialWalletInfo'
            - type: object
              properties:
                chain_id:
                  type: string
                  description: The chain the wallet operates on.
                  example: ETH
                label:
                  type: string
                  description: The wallet label.
                  example: My Wallet
        - type: object
          required:
            - smart_contract_wallet_type
          properties:
            smart_contract_wallet_type:
              $ref: '#/components/schemas/SmartContractWalletType'
            safe_address:
              type: string
              format: address
              pattern: '^0x[a-fA-F0-9]{40}$'
              example: '0x1234567890123456789012345678901234567890'
              description: The Smart Contract Wallet address.
            owners:
              type: array
              items:
                type: string
                format: address
                pattern: '^0x[a-fA-F0-9]{40}$'
                example: '0x1234567890123456789012345678901234567890'
              description: 'The owners of the Smart Contract Wallet. This field is required when creating a new Safe{Wallet}.'
            threshold:
              type: integer
              minimum: 1
              example: 2
              description: 'The minimum number of confirmations required for the Smart Contract Wallet. This field is required when creating a new Safe{Wallet}. '
            cobo_safe_address:
              type: string
              format: address
              pattern: '^0x[a-fA-F0-9]{40}$'
              example: '0x1234567890123456789012345678901234567890'
              description: The address of Cobo Safe.
            initiator:
              type: object
              properties:
                wallet_id:
                  type: string
                  format: uuid
                  example: 123e4567-e89b-12d3-a456-426614174000
                  description: 'The initiator''s wallet ID. This field is required when creating a new Safe{Wallet}. '
                wallet_type:
                  type: string
                  example: MPC
                  description: 'The initiator''s wallet type. This field is required when creating a new Safe{Wallet}.'
                wallet_address:
                  type: string
                  example: '0x1234567890123456789012345678901234567890'
                  description: 'The initiator''s wallet address. This field is required when creating a new Safe{Wallet}. '
    CustodialWalletInfo:
      type: object
      description: The basic information of a wallet.
      required:
        - wallet_id
        - wallet_type
        - wallet_subtype
        - name
        - org_id
      properties:
        wallet_id:
          type: string
          format: uuid
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          description: The wallet ID.
        wallet_type:
          $ref: '#/components/schemas/WalletType'
        wallet_subtype:
          $ref: '#/components/schemas/WalletSubtype'
        name:
          type: string
          example: Example Wallet
          description: The wallet name.
        org_id:
          type: string
          description: The ID of the owning organization.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    MPCWalletInfo:
      allOf:
        - $ref: '#/components/schemas/CustodialWalletInfo'
        - type: object
          required:
            - vault_id
          properties:
            vault_id:
              type: string
              description: The ID of the owning Vault.
    SmartContractWalletInfo:
      oneOf:
        - $ref: '#/components/schemas/SafeWallet'
      discriminator:
        propertyName: smart_contract_wallet_type
        mapping:
          Safe: '#/components/schemas/SafeWallet'
    ExchangeWalletInfo:
      allOf:
        - $ref: '#/components/schemas/CustodialWalletInfo'
        - type: object
          required:
            - apikey
            - exchange_id
          properties:
            apikey:
              type: string
              description: The API key of your exchange account.
              example: d8f062da-39f4-4a11-8b9d-12595854237f
            exchange_id:
              $ref: '#/components/schemas/ExchangeId'
            parent_wallet_id:
              type: string
              description: The wallet ID of the Main Account associated with the Sub Account. This is returned only if you are querying a Sub Account.
              format: uuid
              example: f47ac10b-58cc-4372-a567-0e02b2c3d479
            sub_accounts:
              type: array
              items:
                type: object
                description: The information of a Sub Account associated with the Main Account. This is returned only if you are querying a Main Account.
                required:
                  - wallet_id
                  - account_id
                properties:
                  wallet_id:
                    type: string
                    format: uuid
                    example: f47ac10b-58cc-4372-a567-0e02b2c3d479
                    description: The wallet ID of the Sub Account.
                  account_id:
                    type: string
                    description: 'The Sub Account ID. It can be an email address, a user name, or a custom account ID.'
                    example: sub01@xx.com
    WalletInfo:
      oneOf:
        - $ref: '#/components/schemas/CustodialWalletInfo'
        - $ref: '#/components/schemas/MPCWalletInfo'
        - $ref: '#/components/schemas/SmartContractWalletInfo'
        - $ref: '#/components/schemas/ExchangeWalletInfo'
      discriminator:
        propertyName: wallet_type
        mapping:
          Custodial: '#/components/schemas/CustodialWalletInfo'
          MPC: '#/components/schemas/MPCWalletInfo'
          SmartContract: '#/components/schemas/SmartContractWalletInfo'
          Exchange: '#/components/schemas/ExchangeWalletInfo'
    CreatedWallet:
      oneOf:
        - $ref: '#/components/schemas/CreateCustodialWallet'
        - $ref: '#/components/schemas/CreateMpcWallet'
        - $ref: '#/components/schemas/CreateSmartContractWallet'
        - $ref: '#/components/schemas/CreateExchangeWallet'
      discriminator:
        propertyName: type
        mapping:
          Custodial: '#/components/schemas/CreateCustodialWallet'
          MPC: '#/components/schemas/CreateMpcWallet'
          SmartContract: '#/components/schemas/CreateSmartContractWallet'
          Exchange: '#/components/schemas/CreateExchangeWallet'
    UTXO:
      type: object
      description: The UTXO information.
      properties:
        tx_hash:
          type: string
          description: The transaction hash of the UTXO.
          example: dd7e1cecf6bbde1844ee1815b780711a1e306a718bcd23cd64401b48ef88eb83
        vout_n:
          type: integer
          description: The output index of the UTXO.
          example: 0
        address_str:
          type: string
          description: The address of the UTXO.
          example: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
        token_balances:
          type: array
          items:
            $ref: '#/components/schemas/TokenBalance'
        is_coinbase:
          type: boolean
          description: Whether the UTXO comes from a coinbase transaction.
          example: false
        is_locked:
          type: boolean
          description: Whether the UTXO is locked.
          example: false
        confirmed_number:
          type: integer
          description: The number of confirmations for the UTXO.
          example: 66716
    MaxTransferableValue:
      type: object
      description: 'The maximum amount you can transfer from the wallet or the specified wallet address, along with the corresponding transaction fee.'
      properties:
        token_id:
          type: string
          description: The token name.
          example: ETH
        max_transferable_value:
          type: string
          description: The maximum amount you can transfer from the wallet or the specified wallet address.
          example: '841165119243622'
        fee:
          $ref: '#/components/schemas/TransactionTransferFee'
    AddressInfo:
      type: object
      description: The address information.
      required:
        - address_id
        - address_str
        - token_id
      properties:
        address_id:
          type: string
          format: uuid
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          description: The address ID.
        address_str:
          type: string
          description: The wallet address.
          example: '0x0000000000000000000000000000000000000000'
        token_id:
          type: string
          description: The token ID.
          pattern: '^[A-Z]+(_[A-Z0-9]+)?$'
          example: ETH_USDT
        memo:
          type: string
          description: The memo code.
          example: '82840924'
        path:
          type: string
          description: The derivation path of the address. This field is applicable to MPC Wallets.
          example: m/44'/60'/0'/0
        encoding:
          $ref: '#/components/schemas/AddressEncoding'
        pubkey:
          type: string
          description: The public key of the address. This field is applicable to MPC Wallets.
          example: xpub661MyMwAqRbcG4vPNi58VQJrXW8D9VzmauuRq2rTY3oUVnKGuLTxQxvvoEXgLvZ7N9GQXQkWVgKn1rzEUUEm4NdvrBKUqjpNJEnn2UL4rYq
    AddressEncoding:
      type: string
      enum:
        - ENCODING_P2PKH
        - ENCODING_P2SH_P2WPKH
        - ENCODING_BECH32
        - ENCODING_P2PKH_UNCOMPRESSED
        - ENCODING_P2SH_P2MS
        - ENCODING_P2SH_P2WSH_P2MS
        - ENCODING_P2TR
      description: The address encoding formats. This field only applies to blockchains with Bitcoin-like architecture.
      example: ENCODING_P2PKH
    CreateCustodialWallet:
      type: object
      required:
        - name
        - wallet_type
        - wallet_subtype
      properties:
        name:
          type: string
          example: My WaaS 2.0 Wallet
          description: The wallet name.
        wallet_type:
          $ref: '#/components/schemas/WalletType'
        wallet_subtype:
          $ref: '#/components/schemas/WalletSubtype'
    CreateMpcWallet:
      allOf:
        - $ref: '#/components/schemas/CreateCustodialWallet'
        - type: object
          required:
            - vault_id
          properties:
            vault_id:
              type: string
              description: The ID of the owning vault.
    CreateSmartContractWallet:
      oneOf:
        - $ref: '#/components/schemas/CreateSafeWallet'
      discriminator:
        propertyName: smart_contract_wallet_type
        mapping:
          Safe: '#/components/schemas/CreateSafeWallet'
    CreateSafeWallet:
      allOf:
        - allOf:
            - $ref: '#/components/schemas/CreateCustodialWallet'
            - type: object
              required:
                - chain_id
              properties:
                label:
                  type: string
                  description: The wallet label.
                  example: ETH
                chain_id:
                  type: string
                  description: The ID of the chain that the wallet operates on.
                  example: ETH
        - type: object
          required:
            - smart_contract_wallet_type
          properties:
            smart_contract_wallet_type:
              $ref: '#/components/schemas/SmartContractWalletType'
            safe_address:
              type: string
              format: address
              pattern: '^0x[a-fA-F0-9]{40}$'
              example: '0x1234567890123456789012345678901234567890'
              description: 'The address of the Smart Contract Wallet. If this is not provided, Cobo will create a new Safe{Wallet} and set up Cobo Safe for you. In that case, the `threshold` and `owners` fields are required.'
            owners:
              type: array
              items:
                type: string
                format: address
                pattern: '^0x[a-fA-F0-9]{40}$'
                example: '0x1234567890123456789012345678901234567890'
              description: 'The owners of the Smart Contract Wallet. This field is required when creating a new Safe{Wallet}.'
            threshold:
              type: integer
              minimum: 1
              example: 2
              description: 'The minimum number of confirmations required for the Smart Contract Wallet. This field is required when creating a new Safe{Wallet}.'
            cobo_safe_address:
              type: string
              format: address
              pattern: '^0x[a-fA-F0-9]{40}$'
              example: '0x1234567890123456789012345678901234567890'
              description: 'The address of Cobo Safe. If you are importing an existing Safe{Wallet}, Cobo Safe must has been created and enabled.'
            initiator:
              type: object
              properties:
                wallet_id:
                  type: string
                  format: uuid
                  example: 123e4567-e89b-12d3-a456-426614174000
                  description: 'The initiator''s wallet ID. This field is required when creating a new Safe{Wallet}. '
                wallet_type:
                  type: string
                  example: MPC
                  description: 'The initiator''s wallet type. This field is required when creating a new Safe{Wallet}. '
                wallet_address:
                  type: string
                  example: '0x1234567890123456789012345678901234567890'
                  description: 'The initiator''s wallet address. This field is required when creating a new Safe{Wallet}. '
    CreateExchangeWallet:
      allOf:
        - $ref: '#/components/schemas/CreateCustodialWallet'
        - type: object
          required:
            - exchange_id
            - apikey
            - secret
          properties:
            exchange_id:
              $ref: '#/components/schemas/ExchangeId'
            apikey:
              type: string
              description: The API key of your exchange account.
              example: d8f062da-39f4-4a11-8b9d-12595854237f
            secret:
              type: string
              description: The API secret of your exchange account.
              example: 75B4F636193162488A3728B4A5797708
            passphrase:
              type: string
              description: The passphrase of your exchange account.
              example: sXASDKWKLLsWWEE
            ga_code:
              type: string
              description: The GA code for the exchange.
              example: sXASDKWKLLsWWEE75B4F636193162488A3728B4A5797708
            sub_account_ids:
              type: array
              description: 'The Sub Account ID. It can be an email address, a user name, or a custom account ID.'
              items:
                type: string
              example:
                - sub01@xx.com
                - sub02@xx.com
    CurveType:
      type: string
      enum:
        - SECP256K1
        - ED25519
      example: ED25519
    KeyGroup:
      type: object
      description: The data for mpc key group information.
      properties:
        id:
          type: string
          example: '880311524363903326'
          description: Unique id of the key group
        type:
          $ref: '#/components/schemas/KeyGroupType'
        tss_group_ids:
          type: array
          items:
            $ref: '#/components/schemas/TSSGroupId'
        key_holders:
          type: array
          items:
            $ref: '#/components/schemas/KeyHolder'
        node_count:
          type: integer
        threshold:
          type: integer
        status:
          $ref: '#/components/schemas/KeyGroupStatus'
    KeyGroupStatus:
      type: string
      enum:
        - New
        - Valid
        - Unavailable
      example: Valid
    KeyGroupType:
      type: string
      enum:
        - MainKeyGroup
        - SigningKeyGroup
        - RecoveryKeyGroup
      example: MainKeyGroup
    KeyHolder:
      type: object
      description: The data for mpc wallet key holder information.
      properties:
        name:
          type: string
          example: key holder name
        type:
          $ref: '#/components/schemas/KeyHolderType'
        tss_node_id:
          type: string
          description: The IDs of the tss node.
          example: cobo5yb7BNEBwwp5XXedbhnzQfvQtp132W4dH4Jz4x4eDp4KA
        online:
          type: boolean
          description: Indicates if the tss node online
        status:
          $ref: '#/components/schemas/KeyHolderStatus'
    KeyHolderStatus:
      type: string
      enum:
        - Valid
        - NotConfigured
        - NotActivated
        - Changed
      example: Valid
    KeyHolderType:
      type: string
      enum:
        - COBO
        - MOBILE
        - API
      example: MOBILE
    MPCVault:
      type: object
      description: The data for mpc vault information.
      properties:
        id:
          type: string
          example: YPdbyVaVGqXXjkUsohHw
          description: Unique id of the vault
        name:
          type: string
          example: my mpc vault
        type:
          $ref: '#/components/schemas/MPCVaultType'
        root_pubkeys:
          type: array
          items:
            $ref: '#/components/schemas/RootPubkey'
        create_timestamp:
          type: number
          format: int64
          description: The create time the vault.
    MPCVaultType:
      type: string
      enum:
        - OrgControlled
        - UserControlled
      example: OrgControlled
    MPCProject:
      type: object
      description: The data for mpc project information.
      properties:
        id:
          type: string
          example: 0111039d-27fb-49ba-b172-6e0aa80e37ec
          description: Unique id of the project
        org_id:
          type: string
          example: f3b4a616-9c43-462e-8cb4-343e304fee64
          description: Unique id of org
        name:
          type: string
          example: my mpc project
        node_count:
          type: integer
          description: The count of tss node of the project
        threshold:
          type: integer
          description: The threshold number of project required for signature
        create_timestamp:
          type: integer
          format: int64
          description: The create time the vault.
    RootPubkey:
      type: object
      description: The data for root pubkey information.
      properties:
        pubkey:
          type: string
          description: the root pubkey of the mpc vault.
          example: xpub661MyMwAqRbcG4vPNi58VQJrXW8D9VzmauuRq2rTY3oUVnKGuLTxQxvvoEXgLvZ7N9GQXQkWVgKn1rzEUUEm4NdvrBKUqjpNJEnn2UL4rYq
        curve:
          $ref: '#/components/schemas/CurveType'
    TSSGroupId:
      type: object
      description: The data for tss group id information.
      properties:
        group_id:
          type: string
          description: the group id of the tss group.
          example: mMedDioOKhTlhGyQRzMv
        curve:
          $ref: '#/components/schemas/CurveType'
    TSSRequest:
      type: object
      description: The data for mpc tss request information.
      properties:
        id:
          type: string
          description: Unique id of the tss request.
          example: YPdbyVaVGqXXjkUsohHw
        type:
          $ref: '#/components/schemas/TSSRequestType'
        status:
          $ref: '#/components/schemas/TSSRequestStatus'
    TSSRequestStatus:
      type: string
      enum:
        - PendingKeyHolderConfirmation
        - KeyHolderConfirmationFailed
        - KeyGenerating
        - KeyGeneratingFailed
        - Success
      example: Success
    TSSRequestType:
      type: string
      enum:
        - KeyGen
        - KeyGenFromKeyGroup
        - Recovery
      example: KeyGen
      description: 'The type of tss request, keygen is key generation'
    TSSRequestAction:
      type: string
      description: the action of tss request.
      enum:
        - cancel
      example: cancel
    FeeType:
      type: string
      enum:
        - Fixed
        - EVM_EIP_1559
        - EVM_Legacy
        - UTXO
      example: EVM_EIP_1559
      default: EVM_EIP_1559
      description: The fee type.
    FeeAmount:
      type: object
      description: The estimated max transaction fee amount.
      properties:
        max_fee_amount:
          type: string
          description: The maximum fee amount in fee_coin.
          example: '0.1'
    FeeData:
      type: object
      description: The estimated gas limit to execute the transaction.
      properties:
        gas_limit:
          type: string
          description: 'The gas limit, which represents the max number of gas units you are willing to pay for the execution of a transaction or Ethereum Virtual Machine (EVM) operation. Different operations require varying quantities of gas units.'
          default: '21000'
    EvmEip1559FeeBasePrice:
      type: object
      description: The transaction fee price when using the EIP 1559 fee modal.
      required:
        - max_priority_fee
        - base_fee
      properties:
        fee_token_id:
          type: string
          description: The token ID of the transaction fee.
          example: ETH
        max_priority_fee:
          type: string
          description: 'The max priority fee, in gwei. The max priority fee represents the highest amount of miner tips you are willing to pay for your transaction.'
          example: '0.1'
        base_fee:
          type: string
          description: 'The base fee of chain, in gwei.'
          example: '0.9'
    EvmLegacyFeeBasePrice:
      type: object
      description: The transaction fee price when using the legacy fee modal.
      required:
        - gas_price
      properties:
        fee_token_id:
          type: string
          description: The token ID of the transaction fee.
          example: ETH_USDT
        gas_price:
          type: string
          description: 'The gas price, in gwei. The gas price represents the amount of ETH that must be paid to validators for processing transactions.'
          example: '1'
    UtxoFeeBasePrice:
      type: object
      description: The transaction fee rate for UTXO-based chains.
      required:
        - fee_rate
      properties:
        fee_token_id:
          type: string
          description: The token ID of the transaction fee.
          example: BTC
        fee_rate:
          type: string
          description: 'The fee rate, in sats/vByte. The fee rate represents the satoshis you are willing to pay for each byte of data that your transaction will consume on the blockchain.'
          example: '50'
    EvmEip1559FeePrice:
      type: object
      description: The transaction fee price when using the EIP 1559 fee modal.
      required:
        - fee_type
      allOf:
        - type: object
          properties:
            fee_type:
              $ref: '#/components/schemas/FeeType'
        - $ref: '#/components/schemas/EvmEip1559FeeBasePrice'
    EvmLegacyFeePrice:
      type: object
      description: The transaction fee when using the legacy fee modal.
      required:
        - fee_type
      allOf:
        - type: object
          properties:
            fee_type:
              $ref: '#/components/schemas/FeeType'
        - $ref: '#/components/schemas/EvmLegacyFeeBasePrice'
    UtxoFeePrice:
      type: object
      description: The transaction fee for UTXO-based chains.
      required:
        - fee_type
      allOf:
        - properties:
            fee_type:
              $ref: '#/components/schemas/FeeType'
        - $ref: '#/components/schemas/UtxoFeeBasePrice'
    FixedFee:
      type: object
      description: The estimated transaction fee for fixed-fee chain.
      required:
        - fee_type
      allOf:
        - type: object
          properties:
            fee_type:
              $ref: '#/components/schemas/FeeType'
            fee_token_id:
              type: string
              description: The token ID of the transaction fee.
              example: ETH_USDT
        - $ref: '#/components/schemas/FeeAmount'
    EvmEip1559Fee:
      type: object
      description: The estimated transaction fee when using the EIP 1559 fee modal.
      required:
        - fee_type
        - standard
      properties:
        fee_type:
          $ref: '#/components/schemas/FeeType'
        slow:
          allOf:
            - $ref: '#/components/schemas/EvmEip1559FeeBasePrice'
            - $ref: '#/components/schemas/FeeData'
        standard:
          allOf:
            - $ref: '#/components/schemas/EvmEip1559FeeBasePrice'
            - $ref: '#/components/schemas/FeeData'
        fast:
          allOf:
            - $ref: '#/components/schemas/EvmEip1559FeeBasePrice'
            - $ref: '#/components/schemas/FeeData'
    EvmLegacyFee:
      type: object
      description: The estimated transaction fee when using the legacy fee modal.
      required:
        - fee_type
        - standard
      properties:
        fee_type:
          $ref: '#/components/schemas/FeeType'
        slow:
          allOf:
            - $ref: '#/components/schemas/EvmLegacyFeeBasePrice'
            - $ref: '#/components/schemas/FeeData'
        standard:
          allOf:
            - $ref: '#/components/schemas/EvmLegacyFeeBasePrice'
            - $ref: '#/components/schemas/FeeData'
        fast:
          allOf:
            - $ref: '#/components/schemas/EvmLegacyFeeBasePrice'
            - $ref: '#/components/schemas/FeeData'
    UtxoFee:
      type: object
      description: The estimated transaction fee for UTXO-based chains.
      required:
        - fee_type
        - standard
      properties:
        fee_type:
          $ref: '#/components/schemas/FeeType'
        slow:
          allOf:
            - $ref: '#/components/schemas/UtxoFeeBasePrice'
            - $ref: '#/components/schemas/FeeAmount'
        standard:
          allOf:
            - $ref: '#/components/schemas/UtxoFeeBasePrice'
            - $ref: '#/components/schemas/FeeAmount'
        fast:
          allOf:
            - $ref: '#/components/schemas/UtxoFeeBasePrice'
            - $ref: '#/components/schemas/FeeAmount'
    ChainFeePrice:
      oneOf:
        - $ref: '#/components/schemas/EvmEip1559FeePrice'
        - $ref: '#/components/schemas/EvmLegacyFeePrice'
        - $ref: '#/components/schemas/UtxoFeePrice'
        - $ref: '#/components/schemas/FixedFee'
      discriminator:
        propertyName: fee_type
        mapping:
          EVM_EIP_1559: '#/components/schemas/EvmEip1559FeePrice'
          EVM_Legacy: '#/components/schemas/EvmLegacyFeePrice'
          UTXO: '#/components/schemas/UtxoFeePrice'
          Fixed: '#/components/schemas/FixedFee'
    EstimationFee:
      oneOf:
        - $ref: '#/components/schemas/EvmEip1559Fee'
        - $ref: '#/components/schemas/EvmLegacyFee'
        - $ref: '#/components/schemas/UtxoFee'
        - $ref: '#/components/schemas/FixedFee'
      discriminator:
        propertyName: fee_type
        mapping:
          Fixed: '#/components/schemas/FixedFee'
          EVM_EIP_1559: '#/components/schemas/EvmEip1559Fee'
          EVM_Legacy: '#/components/schemas/EvmLegacyFee'
          UTXO: '#/components/schemas/UtxoFee'
    EvmEip1559TransactionFee:
      type: object
      description: |
        The transaction fee when using the EIP 1559 fee modal. The estimated fee is calculated by multiplying the max fee by the gas limit: ((base price + max priority fee) * gas limit).
      required:
        - fee_type
      allOf:
        - type: object
          properties:
            fee_type:
              $ref: '#/components/schemas/FeeType'
        - $ref: '#/components/schemas/EvmEip1559FeeBasePrice'
        - $ref: '#/components/schemas/FeeData'
    EvmLegacyTransactionFee:
      type: object
      description: |
        The transaction fee when using the legacy fee modal. The estimated fee is calculated by multiplying the gas price by the gas limit: (gas price * gas limit).
      required:
        - fee_type
      allOf:
        - type: object
          properties:
            fee_type:
              $ref: '#/components/schemas/FeeType'
        - $ref: '#/components/schemas/EvmLegacyFeeBasePrice'
        - $ref: '#/components/schemas/FeeData'
    UtxoTransactionFee:
      type: object
      description: |
        The transaction fee for UTXO-based chains. The estimated fee is calculated by multiplying the fee rate by the transaction size: (fee rate * transaction size).
      required:
        - fee_type
      allOf:
        - type: object
          properties:
            fee_type:
              $ref: '#/components/schemas/FeeType'
        - $ref: '#/components/schemas/UtxoFeeBasePrice'
        - $ref: '#/components/schemas/FeeAmount'
    TransactionTransferFee:
      oneOf:
        - $ref: '#/components/schemas/EvmEip1559TransactionFee'
        - $ref: '#/components/schemas/EvmLegacyTransactionFee'
        - $ref: '#/components/schemas/UtxoTransactionFee'
        - $ref: '#/components/schemas/FixedFee'
      discriminator:
        propertyName: fee_type
        mapping:
          EVM_EIP_1559: '#/components/schemas/EvmEip1559TransactionFee'
          EVM_Legacy: '#/components/schemas/EvmLegacyTransactionFee'
          UTXO: '#/components/schemas/UtxoTransactionFee'
          Fixed: '#/components/schemas/FixedFee'
    Transaction:
      type: object
      description: The data for transaction information.
      required:
        - transaction_id
        - transaction_type
        - status
        - initiator_type
        - source
        - destination
        - created_time
        - updated_time
      properties:
        transaction_id:
          type: string
          description: Unique transaction ID
          format: uuid
          example: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
        cobo_id:
          type: string
          description: Cobo ID
          example: '20231213122855000000000000000000'
        request_id:
          type: string
          description: Request ID
          example: web_send_by_user_327_1610444045047
        type:
          $ref: '#/components/schemas/TransactionType'
        status:
          $ref: '#/components/schemas/TransactionStatus'
        sub_status:
          $ref: '#/components/schemas/TransactionSubStatus'
        failed_reason:
          type: string
          example: Rejected by signer Cobo TSS
        chain_id:
          type: string
          description: The blockchain on which the token operates.
          pattern: '^[A-Z]+$'
          example: ETH
        source:
          oneOf:
            - $ref: '#/components/schemas/TransactionAddressSource'
            - $ref: '#/components/schemas/TransactionBaseWalletSource'
            - $ref: '#/components/schemas/TransactionMPCWalletSource'
            - $ref: '#/components/schemas/TransactionSafeWalletSource'
            - $ref: '#/components/schemas/TransactionExchangeWalletSource'
          discriminator:
            propertyName: source_type
            mapping:
              Address: '#/components/schemas/TransactionAddressSource'
              GasStation: '#/components/schemas/TransactionBaseWalletSource'
              CustodialWallet: '#/components/schemas/TransactionBaseWalletSource'
              MPCWallet: '#/components/schemas/TransactionMPCWalletSource'
              SafeWallet: '#/components/schemas/TransactionSafeWalletSource'
              ExchangeWallet: '#/components/schemas/TransactionExchangeWalletSource'
        destination:
          oneOf:
            - $ref: '#/components/schemas/TransactionAddressDestination'
            - $ref: '#/components/schemas/TransactionContractCallDestination'
            - $ref: '#/components/schemas/TransactionMessageSignDestination'
            - $ref: '#/components/schemas/TransactionBaseWalletDestination'
            - $ref: '#/components/schemas/TransactionExchangeWalletDestination'
          discriminator:
            propertyName: destination_type
            mapping:
              Address: '#/components/schemas/TransactionAddressDestination'
              ContractCall: '#/components/schemas/TransactionContractCallDestination'
              MessageSign: '#/components/schemas/TransactionMessageSignDestination'
              CustodialWallet: '#/components/schemas/TransactionBaseWalletDestination'
              MPCWallet: '#/components/schemas/TransactionBaseWalletDestination'
              SafeWallet: '#/components/schemas/TransactionBaseWalletDestination'
              ExchangeWallet: '#/components/schemas/TransactionExchangeWalletDestination'
        fee:
          $ref: '#/components/schemas/TransactionFee'
        initiator:
          type: string
          description: 'Transaction initiator, apikey or operator'
          example: 'API Prod Key #1'
        initiator_type:
          $ref: '#/components/schemas/TransactionInitiatorType'
        confirmed_num:
          type: number
          format: int32
          description: Transaction confirmed number
          example: 12
        confirming_threshold:
          type: integer
          format: int32
          description: 'Number of confirmations required for a transaction, such as 15 for ETH chain.'
          example: 15
        block_number:
          type: integer
          format: int64
          description: Block number
          example: 123
        block_time:
          type: integer
          format: int64
          description: Block time
          example: 1717740319
        block_hash:
          type: string
          description: Block hash
          example: '0xc9ee947f8bb6027c161888bf0d004bec05e7c2beec7e6b187dc512174e438735'
        nonce:
          type: integer
          description: Transaction nonce
          example: 9
        transaction_hash:
          type: string
          description: Transaction hash.
          example: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
        replacement:
          type: object
          properties:
            type:
              type: string
              enum:
                - Cancel
                - Drop
                - Resend
                - SpeedUp
              example: Resend
              description: Enumeration representing the replacement type of a transaction.
            replaced_by_transaction_id:
              type: string
              description: Replace by transaction ID
              format: uuid
              example: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
            replaced_by_transaction_hash:
              type: string
              description: Replace by transaction hash
              example: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
            replaced_transaction_id:
              type: string
              description: Replace by transaction ID
              format: uuid
              example: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
            replaced_transaction_hash:
              type: string
              description: Replace by transaction hash
              example: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
        category:
          type: array
          items:
            $ref: '#/components/schemas/TransactionCategory'
        description:
          type: string
          example: withdrawal to exchange trading account
        force_internal:
          type: boolean
          description: Whether the transfer request to be executed as a loop transfer.
          example: false
        force_external:
          type: boolean
          description: Whether the transfer request to be executed as a onchain transfer.
          example: false
        is_loop:
          type: boolean
          description: Whether the transfer is a loop transfer.
          example: false
        created_time:
          type: number
          format: int64
          description: Transaction creation time
          example: 1610445878970
        updated_time:
          type: number
          format: int64
          description: Transaction update time
          example: 1610445878970
    TransactionApprover:
      type: object
      description: The approver data for transaction.
      properties:
        name:
          type: string
          description: The approver name of the transaction.
          example: 'Approver #1'
        status:
          type: string
          description: The approval status.
          enum:
            - Pending
            - Approved
            - Rejected
          example: Pending
    TransactionTokenAmount:
      type: object
      description: The data for transaction asset information.
      required:
        - asset_id
        - amount
      properties:
        token_id:
          type: string
          description: The token ID.
          example: ETH_USDT
        asset_id:
          type: string
          description: ID of the asset. Used to group token balance when needed.
          example: USDT
        amount:
          type: string
          description: |
            Transaction value (Note that this is an absolute value. If you trade 1.5 BTC, then the value is 1.5)
          format: float
          example: '1.5'
    TransactionCategory:
      type: string
      description: Transaction category
      example: Payment
    TransactionDetails:
      allOf:
        - $ref: '#/components/schemas/Transaction'
        - type: object
          properties:
            initiator:
              type: string
              description: Transaction initiator
              example: 'API Prod Key #1'
            approvers:
              type: array
              items:
                $ref: '#/components/schemas/TransactionApprover'
            signers:
              type: array
              items:
                $ref: '#/components/schemas/TransactionSigner'
            nonce:
              type: integer
              description: Transaction nonce
              example: 9
            replaced_by:
              type: string
              description: Replace by transaction hash
              example: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
            fee:
              $ref: '#/components/schemas/TransactionTransferFee'
            fueled_by:
              type: string
              description: Fueled by address
              example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
            confirmed_num:
              type: number
              description: Transaction confirmed number
              example: 12
            confirming_threshold:
              type: integer
              format: int32
              description: 'Number of confirmations required for a transaction, such as 15 for ETH chain.'
              example: 15
            token_approval:
              $ref: '#/components/schemas/TransactionTokeApproval'
            message:
              type: string
              description: Transaction raw message
              example: this to certify that am owner this wallet address
            algorithm:
              type: string
              description: Transaction message signing algorithm
            timeline:
              type: array
              items:
                $ref: '#/components/schemas/TransactionTimeline'
    TransactionInitiatorType:
      type: string
      enum:
        - API
        - Web
        - External
      example: API
      description: Enumeration representing the initiator type of a transaction.
    TransactionSigner:
      type: object
      description: The signer data for transaction.
      properties:
        signer:
          type: string
          description: The signer name of the transaction.
          example: Cobo TSS
        status:
          type: string
          description: The signing status.
          enum:
            - Pending
            - Signed
            - Timeout
            - Rejected
          example: Signed
        failed_reason:
          type: string
          description: Failed reason of signing process.
          example: Rejected by signer Cobo TSS
    TransactionStatus:
      type: string
      enum:
        - Submitted
        - PendingScreening
        - PendingAuthorization
        - Queued
        - PendingSignature
        - Broadcasting
        - Confirming
        - Completed
        - Failed
        - Rejected
      example: Submitted
      description: Enumeration representing the status of a transaction.
    TransactionSubStatus:
      type: string
      enum:
        - RejectedKYT
        - RejectedTravelRule
        - PendingDoubleCheck
        - PendingSpenderCheck
        - PendingRiskControlCheck
        - PendingApproverCheck
        - RejectedCoboCheck
        - RejectedWhiteList
        - RejectedDoubleCheck
        - RejectedSpenderAuth
        - RejectedRiskControlCheck
        - RejectedApproverAuth
        - PendingWaitSigner
        - FailedBySigner
        - FailedBroadcasting
      example: PendingDoubleCheck
      description: Enumeration representing the sub-status of a transaction.
    TransactionTimeline:
      type: object
      description: The data for transaction timeline information.
      properties:
        status:
          $ref: '#/components/schemas/TransactionStatus'
        finished:
          type: boolean
          description: Whether the timeline status finished
          example: true
        finished_time:
          type: number
          description: Timeline status finished time
          example: 1610445878970
    TransactionTokeApproval:
      allOf:
        - $ref: '#/components/schemas/TokenInfo'
        - type: object
          description: The data for transaction token approval information.
          properties:
            amount:
              type: number
              description: |
                Transaction value (Note that this is an absolute value. If you trade 1.5 BTC, then the value is 1.5)
              format: float
              example: 1.5
            spender:
              type: string
              description: Spender address
              example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
    TransactionType:
      type: string
      enum:
        - Deposit
        - Withdrawal
        - TokenApproval
        - ContractCall
        - AutoFueling
        - RawMessage
      example: Deposit
      description: Enumeration representing the type of a transaction.
    MpcSigningGroup:
      type: object
      description: The data for mpc signing key group.
      properties:
        used_key_group_id:
          type: string
          description: Unique id of the using key group.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        used_node_ids:
          type: array
          items:
            type: string
            example: cobo5yb7BNEBwwp5XXedbhnzQfvQtp132W4dH4Jz4x4eDp4KA
            description: 'The IDs of the tss node participating in the signing. If it is empty, all nodes in the signing key group will participate in the signature.'
    TransactionAddressType:
      type: string
      enum:
        - CustodialAssetWallet
        - CustodialWeb3Wallet
        - MPCClientControlledWallet
        - MPCUserControlledWallet
        - SafeContractWallet
        - ExchangeAccount
        - GasStation
        - ExternalAddress
      example: CustodialAssetWallet
      description: Enumeration representing the address type of a transaction.
    TransactionSourceType:
      type: string
      enum:
        - Address
        - CustodialWallet
        - MPCWallet
        - SafeWallet
        - ExchangeWallet
        - GasStation
      example: ExternalAddress
      description: Enumeration representing the source type of a transaction.
    TransactionAddressSource:
      type: object
      description: The data for transaction source information.
      required:
        - source_type
      properties:
        source_type:
          $ref: '#/components/schemas/TransactionSourceType'
        account_input:
          type: object
          properties:
            address_str:
              type: string
              description: From address
              example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
        utxo_inputs:
          type: array
          items:
            type: object
            properties:
              tx_hash:
                type: string
                description: UTXO tx hash to include
                example: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
    TransactionBaseWalletSource:
      type: object
      description: The data for transaction source information.
      required:
        - source_type
        - wallet_id
      properties:
        source_type:
          $ref: '#/components/schemas/TransactionSourceType'
        wallet_id:
          type: string
          description: Unique id of the wallet to transfer from.
          format: uuid
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    TransactionMPCWalletSource:
      type: object
      description: The data for transaction source information.
      required:
        - source_type
        - wallet_id
        - mpc_used_key_group
      properties:
        source_type:
          $ref: '#/components/schemas/TransactionSourceType'
        wallet_id:
          type: string
          description: Unique id of the wallet to transfer from.
          format: uuid
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        mpc_used_key_group:
          $ref: '#/components/schemas/MpcSigningGroup'
        account_input:
          type: object
          properties:
            address_str:
              type: string
              description: From address
              example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
        utxo_inputs:
          type: array
          items:
            type: object
            properties:
              tx_hash:
                type: string
                description: UTXO tx hash to include
                example: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
    TransactionSafeWalletSource:
      type: object
      description: The data for transaction source information.
      required:
        - source_type
        - wallet_id
        - delegate
      properties:
        source_type:
          $ref: '#/components/schemas/TransactionSourceType'
        wallet_id:
          type: string
          description: Unique id of the wallet to transfer from.
          format: uuid
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        delegate:
          type: object
          properties:
            wallet_id:
              type: string
              format: uuid
              example: 123e4567-e89b-12d3-a456-426614174000
              description: The wallet id of the delegate. This is required when user initiate a transfer.
            wallet_type:
              type: string
              example: MPC
              description: The wallet type of the delegate. This is required when user initiate a transfer.
            wallet_address:
              type: string
              example: '0x1234567890123456789012345678901234567890'
              description: The wallet address of the delegate. This is required when user initiate a transfer.
            mpc_used_key_group:
              $ref: '#/components/schemas/MpcSigningGroup'
    TransactionExchangeWalletSource:
      type: object
      description: The data for transaction source information.
      required:
        - source_type
        - exchange_id
        - wallet_id
      properties:
        source_type:
          $ref: '#/components/schemas/TransactionSourceType'
        exchange_id:
          $ref: '#/components/schemas/ExchangeId'
        wallet_id:
          type: string
          description: Unique id of the wallet to transfer from.
          format: uuid
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        sub_wallet_id:
          type: string
          description: Exchange trading account or any sub wallet info for transfer.
          example: Asset
    TransactionDestinationType:
      type: string
      enum:
        - Address
        - ContractCall
        - MessageSign
        - CustodialWallet
        - MPCWallet
        - SafeWallet
        - ExchangeWallet
      example: Address
      description: Enumeration representing the destination type of a transaction.
    TransactionAddressDestination:
      type: object
      description: The data for transaction destination information.
      required:
        - destination_type
        - token_id
      properties:
        destination_type:
          $ref: '#/components/schemas/TransactionDestinationType'
        token_id:
          type: string
          description: The token ID.
          example: ETH_USDT
        asset_id:
          type: string
          description: ID of the asset. Used to group token balance when needed.
          example: USDT
        account_output:
          type: object
          properties:
            address_str:
              type: string
              description: Destination address
              example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
            memo:
              type: string
              description: Destination address memo
              example: '82840924'
            amount:
              type: string
              description: |
                Transaction value (Note that this is an absolute value. If you trade 1.5 ETH, then the value is 1.5)
              example: '1.5'
        utxo_outputs:
          type: object
          properties:
            outputs:
              type: array
              items:
                type: object
                properties:
                  address_str:
                    type: string
                    description: Destination address
                    example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
                  amount:
                    type: string
                    description: |
                      Transaction value (Note that this is an absolute value. If you trade 1.5 ETH, then the value is 1.5)
                    example: '1.5'
                  script:
                    type: string
                    description: Script of the output
                    example: 76a914fb37342f6275b13936799def06f2DEMO
            change_address:
              type: string
              description: Change address
              example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
    TransactionContractCallDestination:
      type: object
      description: The data for transaction destination information.
      required:
        - destination_type
        - address_str
        - value
        - calldata
      properties:
        destination_type:
          $ref: '#/components/schemas/TransactionDestinationType'
        address_str:
          type: string
          description: Destination address
          example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
        value:
          type: string
          description: |
            Transaction value (Note that this is an absolute value. If you trade 1.5 ETH, then the value is 1.5)
          example: '1.5'
        calldata:
          type: string
          description: |
            calldata for this transaction. Commonly used as part of contract interaction.
          format: byte
          example: U3dhZ2dlciByb2Nrcw==
    TransactionMessageSignDestination:
      type: object
      description: The data for transaction destination information.
      required:
        - destination_type
        - address_str
      properties:
        destination_type:
          $ref: '#/components/schemas/TransactionDestinationType'
        message:
          type: string
          description: 'Raw data to be signed, Base 64 encoded'
          example: YWFhYQ==
        structured_data:
          type: string
          description: 'Structured data to be signed, JSON encoded'
          example: |
            {\"types\":{\"EIP712Domain\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"version\",\"type\":\"string\"},{\"name\":\"chainId\",\"type\":\"uint256\"},{\"name\":\"verifyingContract\",\"type\":\"address\"}]}}
    TransactionBaseWalletDestination:
      type: object
      description: The data for transaction destination information.
      required:
        - destination_type
        - wallet_id
        - token_id
        - address_str
        - amount
      properties:
        destination_type:
          $ref: '#/components/schemas/TransactionDestinationType'
        wallet_id:
          type: string
          description: Unique id of the wallet to transfer from.
          format: uuid
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        token_id:
          type: string
          description: The token ID.
          example: ETH_USDT
        asset_id:
          type: string
          description: ID of the asset. Used to group token balance when needed.
          example: USDT
        address_str:
          type: string
          description: Destination address
          example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
        memo:
          type: string
          description: Destination address memo
          example: '82840924'
        amount:
          type: string
          description: |
            Transaction value (Note that this is an absolute value. If you trade 1.5 ETH, then the value is 1.5)
          example: '1.5'
    TransactionExchangeWalletDestination:
      type: object
      description: The data for transaction destination information.
      required:
        - destination_type
        - exchange_id
        - wallet_id
        - asset_id
        - amount
      properties:
        destination_type:
          $ref: '#/components/schemas/TransactionDestinationType'
        exchange_id:
          $ref: '#/components/schemas/ExchangeId'
        wallet_id:
          type: string
          description: Unique id of the wallet to transfer from.
          format: uuid
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        sub_wallet_id:
          type: string
          description: Exchange trading account or any sub wallet info for transfer.
          example: Asset
        token_id:
          type: string
          description: The token ID.
          example: ETH_USDT
        asset_id:
          type: string
          description: ID of the asset. Used to group token balance when needed.
          example: USDT
        address_str:
          type: string
          description: Destination address
          example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
        memo:
          type: string
          description: Destination address memo
          example: '82840924'
        amount:
          type: string
          description: |
            Transaction value (Note that this is an absolute value. If you trade 1.5 ETH, then the value is 1.5)
          example: '1.5'
    TransactionFixedFee:
      type: object
      description: The estimated transaction fee in fee_coin.
      required:
        - fee_type
      allOf:
        - type: object
          properties:
            fee_type:
              $ref: '#/components/schemas/FeeType'
            fee_token_id:
              type: string
              description: The token ID of the transaction fee.
              example: ETH_USDT
            fee_used:
              type: string
              description: The fee amount in fee_coin.
              example: '0.1'
        - $ref: '#/components/schemas/FeeAmount'
    TransactionEvmEip1559Fee:
      type: object
      description: |
        The transaction fee when using the EIP 1559 method. The estimated fee is calculated by multiplying the max fee by the gas limit: (max fee * gas limit).
      required:
        - fee_type
      allOf:
        - type: object
          properties:
            fee_type:
              $ref: '#/components/schemas/FeeType'
            fee_used:
              type: string
              description: The fee amount in fee_coin.
              example: '0.1'
            gas_used:
              type: string
              description: The gas used in transaction.
              example: '100000000'
        - $ref: '#/components/schemas/EvmEip1559FeeBasePrice'
        - $ref: '#/components/schemas/FeeData'
    TransactionEvmLegacyFee:
      type: object
      description: |
        The transaction fee when using the legacy method. The estimated fee is calculated by multiplying the gas price by the gas limit: (gas price * gas limit).
      required:
        - fee_type
      allOf:
        - type: object
          properties:
            fee_type:
              $ref: '#/components/schemas/FeeType'
            fee_used:
              type: string
              description: The fee amount in fee_coin.
              example: '0.1'
            gas_used:
              type: string
              description: The gas used in transaction.
              example: '100000000'
        - $ref: '#/components/schemas/EvmLegacyFeeBasePrice'
        - $ref: '#/components/schemas/FeeData'
    TransactionUtxoFee:
      type: object
      description: |
        The transaction fee for UTXO-based chains. The estimated fee is calculated by multiplying the fee rate by the transaction size: (fee rate * transaction size).
      required:
        - fee_type
      allOf:
        - type: object
          properties:
            fee_type:
              $ref: '#/components/schemas/FeeType'
            fee_used:
              type: string
              description: The fee amount in fee_coin.
              example: '0.1'
        - $ref: '#/components/schemas/UtxoFeeBasePrice'
        - $ref: '#/components/schemas/FeeAmount'
    TransactionFee:
      oneOf:
        - $ref: '#/components/schemas/TransactionEvmEip1559Fee'
        - $ref: '#/components/schemas/TransactionEvmLegacyFee'
        - $ref: '#/components/schemas/TransactionUtxoFee'
        - $ref: '#/components/schemas/TransactionFixedFee'
      discriminator:
        propertyName: fee_type
        mapping:
          EVM_EIP_1559: '#/components/schemas/TransactionEvmEip1559Fee'
          EVM_Legacy: '#/components/schemas/TransactionEvmLegacyFee'
          UTXO: '#/components/schemas/TransactionUtxoFee'
          Fixed: '#/components/schemas/TransactionFixedFee'
    TransactionRbf:
      type: object
      description: The base data for drop or speedup transaction.
      required:
        - request_id
      properties:
        request_id:
          type: string
          description: Unique id of the request.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        fee:
          $ref: '#/components/schemas/TransactionTransferFee'
    TransactionResend:
      type: object
      description: The base data for drop or speedup transaction.
      required:
        - request_id
      properties:
        request_id:
          type: string
          description: Unique id of the request.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    BaseTransferSource:
      type: object
      description: The base data for transfer source.
      required:
        - source_type
        - wallet_id
      properties:
        source_type:
          $ref: '#/components/schemas/WalletSubtype'
        wallet_id:
          type: string
          description: Unique id of the wallet to transfer from.
          format: uuid
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    AddressTransferSource:
      allOf:
        - $ref: '#/components/schemas/BaseTransferSource'
        - type: object
          required:
            - address_str
          properties:
            address_str:
              type: string
              description: From address
              example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
    MpcTransferSource:
      allOf:
        - $ref: '#/components/schemas/BaseTransferSource'
        - type: object
          required:
            - mpc_used_key_group
          properties:
            account_input:
              type: object
              properties:
                address_str:
                  type: string
                  description: From address
                  example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
            utxo_inputs:
              type: object
              properties:
                included_inputs:
                  type: array
                  items:
                    type: object
                    properties:
                      tx_hash:
                        type: string
                        description: UTXO tx hash to include
                        example: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
                excluded_inputs:
                  type: array
                  items:
                    type: object
                    properties:
                      tx_hash:
                        type: string
                        description: UTXO tx hash to exclude
                        example: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
            mpc_used_key_group:
              $ref: '#/components/schemas/MpcSigningGroup'
    SafeTransferSource:
      allOf:
        - $ref: '#/components/schemas/AddressTransferSource'
        - type: object
          required:
            - delegate
          properties:
            delegate:
              type: object
              properties:
                wallet_id:
                  type: string
                  format: uuid
                  example: 123e4567-e89b-12d3-a456-426614174000
                  description: The wallet id of the delegate. This is required when user initiate a transfer.
                wallet_type:
                  type: string
                  example: MPC
                  description: The wallet type of the delegate. This is required when user initiate a transfer.
                wallet_address:
                  type: string
                  example: '0x1234567890123456789012345678901234567890'
                  description: The wallet address of the delegate. This is required when user initiate a transfer.
    ExchangeTransferSource:
      allOf:
        - $ref: '#/components/schemas/BaseTransferSource'
        - type: object
          required:
            - sub_wallet_id
          properties:
            sub_wallet_id:
              type: string
              description: Exchange trading account or any sub wallet info for transfer.
              example: Asset
    TransferSource:
      oneOf:
        - $ref: '#/components/schemas/BaseTransferSource'
        - $ref: '#/components/schemas/MpcTransferSource'
        - $ref: '#/components/schemas/SafeTransferSource'
        - $ref: '#/components/schemas/ExchangeTransferSource'
      discriminator:
        propertyName: source_type
        mapping:
          Asset: '#/components/schemas/BaseTransferSource'
          Org-Controlled: '#/components/schemas/MpcTransferSource'
          User-Controlled: '#/components/schemas/MpcTransferSource'
          'Safe{Wallet}': '#/components/schemas/SafeTransferSource'
          Main: '#/components/schemas/ExchangeTransferSource'
          Sub: '#/components/schemas/ExchangeTransferSource'
    AddressTransferDestination:
      type: object
      description: The data for address destination. Only one of account_output or utxo_outputs needed.
      required:
        - destination_type
      properties:
        destination_type:
          $ref: '#/components/schemas/TransferDestinationType'
        account_output:
          type: object
          properties:
            address_str:
              type: string
              description: Destination address
              example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
            memo:
              type: string
              description: Destination address memo
              example: '82840924'
            amount:
              type: string
              description: |
                Transaction value (Note that this is an absolute value. If you trade 1.5 ETH, then the value is 1.5)
              example: '1.5'
        utxo_outputs:
          type: object
          properties:
            outputs:
              type: array
              items:
                type: object
                properties:
                  address_str:
                    type: string
                    description: Destination address
                    example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
                  amount:
                    type: string
                    description: |
                      Transaction value (Note that this is an absolute value. If you trade 1.5 ETH, then the value is 1.5)
                    example: '1.5'
                  script:
                    type: string
                    description: Script of the output
                    example: 76a914fb37342f6275b13936799def06f2DEMO
            change_address:
              type: string
              description: Change address
              example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
        force_internal:
          type: boolean
          description: Whether the transfer to be executed as a loop transfer.
          example: false
        force_external:
          type: boolean
          description: Whether the transfer to be executed as a onchain transfer.
          example: false
    ExchangeTransferDestination:
      type: object
      description: The data for exchange destination.
      required:
        - destination_type
        - wallet_id
        - sub_wallet_id
      properties:
        destination_type:
          $ref: '#/components/schemas/TransferDestinationType'
        wallet_id:
          type: string
          description: Unique id of the wallet to transfer to.
          format: uuid
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        sub_wallet_id:
          type: string
          description: Exchange trading account or any sub wallet info for transfer.
          example: Asset
        amount:
          type: string
          description: |
            Transaction value (Note that this is an absolute value. If you trade 1.5 ETH, then the value is 1.5)
          example: '1.5'
    TransferDestinationType:
      type: string
      enum:
        - Address
        - ExchangeWallet
      example: Address
    TransferDestination:
      oneOf:
        - $ref: '#/components/schemas/AddressTransferDestination'
        - $ref: '#/components/schemas/ExchangeTransferDestination'
      discriminator:
        propertyName: destination_type
        mapping:
          Address: '#/components/schemas/AddressTransferDestination'
          ExchangeWallet: '#/components/schemas/ExchangeTransferDestination'
    Transfer:
      type: object
      description: The base data for transfer transaction.
      required:
        - request_id
        - request_type
        - source
        - token_id
        - destination
      properties:
        request_id:
          type: string
          description: Unique id of the request.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        request_type:
          type: string
          enum:
            - Transfer
            - ContractCall
            - MessageSign
          example: Transfer
        source:
          $ref: '#/components/schemas/TransferSource'
        token_id:
          type: string
          description: The token ID.
          example: ETH_USDT
        destination:
          $ref: '#/components/schemas/TransferDestination'
        category_names:
          type: array
          description: The category names for transfer.
          items:
            type: string
            example: Trading
        description:
          type: string
          description: The description for transfer.
          example: Transfer from wallet
        fee:
          $ref: '#/components/schemas/TransactionTransferFee'
    SignMessage:
      type: object
      description: The data for create a message sign transaction.
      required:
        - request_id
        - request_type
        - signing_wallet_id
        - signing_address
        - chain_id
      properties:
        request_id:
          type: string
          description: Unique id of the request.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        request_type:
          $ref: '#/components/schemas/Transfer/properties/request_type'
        chain_id:
          type: string
          description: The blockchain on which the token operates.
          pattern: '^[A-Z]+$'
          example: ETH
        source:
          type: object
          properties:
            wallet_id:
              type: string
              description: Unique id of the wallet to sign message.
              format: uuid
              example: f47ac10b-58cc-4372-a567-0e02b2c3d479
            address_str:
              type: string
              description: From address
              example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
            mpc_used_key_group:
              $ref: '#/components/schemas/MpcSigningGroup'
        destination:
          type: object
          properties:
            message:
              type: string
              description: 'Raw data to be signed, Base 64 encoded'
              example: YWFhYQ==
            structured_data:
              type: string
              description: 'Structured data to be signed, JSON encoded'
              example: |
                {\"types\":{\"EIP712Domain\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"version\",\"type\":\"string\"},{\"name\":\"chainId\",\"type\":\"uint256\"},{\"name\":\"verifyingContract\",\"type\":\"address\"}]}}
    EstimateFee:
      oneOf:
        - $ref: '#/components/schemas/Transfer'
        - $ref: '#/components/schemas/ContractCall'
      discriminator:
        propertyName: request_type
        mapping:
          Transfer: '#/components/schemas/Transfer'
          Call: '#/components/schemas/ContractCall'
    BaseContractCallSource:
      type: object
      description: The base data for contract call source.
      required:
        - source_type
        - wallet_id
        - address_str
      properties:
        source_type:
          type: string
          enum:
            - Org-Controlled
            - User-Controlled
            - 'Safe{Wallet}'
          example: Org-Controlled
        wallet_id:
          type: string
          description: Unique id of the wallet to initiate contract call from.
          format: uuid
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        address_str:
          type: string
          description: From address
          example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
    MpcContractCallSource:
      allOf:
        - $ref: '#/components/schemas/BaseContractCallSource'
        - type: object
          required:
            - mpc_used_key_group
          properties:
            mpc_used_key_group:
              $ref: '#/components/schemas/MpcSigningGroup'
    SafeContractCallSource:
      allOf:
        - $ref: '#/components/schemas/BaseContractCallSource'
        - type: object
          required:
            - delegate
          properties:
            delegate:
              type: object
              properties:
                wallet_id:
                  type: string
                  format: uuid
                  example: 123e4567-e89b-12d3-a456-426614174000
                  description: The wallet id of the delegate. This is required when user initiate a transfer.
                wallet_type:
                  type: string
                  example: MPC
                  description: The wallet type of the delegate. This is required when user initiate a transfer.
                wallet_address:
                  type: string
                  example: '0x1234567890123456789012345678901234567890'
                  description: The wallet address of the delegate. This is required when user initiate a transfer.
                mpc_used_key_group:
                  $ref: '#/components/schemas/MpcSigningGroup'
    ContractCallSource:
      oneOf:
        - $ref: '#/components/schemas/MpcContractCallSource'
        - $ref: '#/components/schemas/SafeContractCallSource'
      discriminator:
        propertyName: source_type
        mapping:
          Org-Controlled: '#/components/schemas/MpcContractCallSource'
          User-Controlled: '#/components/schemas/MpcContractCallSource'
          'Safe{Wallet}': '#/components/schemas/SafeContractCallSource'
    ContractCall:
      type: object
      description: The data for create smart contract call transaction.
      required:
        - request_id
        - request_type
        - chain_id
        - source
        - to_address_str
        - calldata
      properties:
        request_id:
          type: string
          description: Unique id of the request.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        request_type:
          $ref: '#/components/schemas/Transfer/properties/request_type'
        chain_id:
          type: string
          description: The blockchain on which the token operates.
          example: ETH
        source:
          $ref: '#/components/schemas/ContractCallSource'
        destination:
          type: object
          properties:
            address_str:
              type: string
              description: To address
              example: bc1q0qfzuge7vr5s2xkczrjkccmxemlyyn8mhx298v
            value:
              type: string
              description: |
                Transaction value (Note that this is an absolute value. If you trade 1.5 ETH, then the value is 1.5)
              example: '1.5'
            calldata:
              type: string
              description: |
                calldata for this transaction. Commonly used as part of contract interaction.
              format: byte
              example: U3dhZ2dlciByb2Nrcw==
        fee:
          $ref: '#/components/schemas/TransactionTransferFee'
    WebhookEvent:
      type: object
      description: The webhook event payload.
      required:
        - id
        - url
        - created_timestamp
        - type
        - data
        - status
      properties:
        id:
          description: The event ID.
          type: string
          format: uuid
          example: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
        url:
          description: The URL of the webhook endpoint.
          maxLength: 500
          type: string
          format: url
          example: 'https://example.com/webhook'
        created_timestamp:
          description: 'The time when the event occurred, in Unix timestamp format, measured in milliseconds.'
          type: integer
          example: 1701396866000
        type:
          $ref: '#/components/schemas/WebhookEventType'
        data:
          type: object
          description: 'The data of the webhook event, in JSON format.'
          example:
            wallet_id: 624ce4e5-e985-4394-a196-fd7752aff96e
            address: '0xdAC17F958D2ee523a2206206994597C13D831ec7'
            amount: '1000000000000000000'
        status:
          $ref: '#/components/schemas/WebhookEventStatus'
        next_retry_timestamp:
          description: |
            The timestamp indicating the next scheduled retry to deliver this event, in Unix timestamp format, measured in milliseconds. This field is only present if the event status is `Retrying`.
          type: integer
          example: 1701396866000
        retries_left:
          description: The number of retries left. This field is only present if the event status is `Retrying`.
          type: integer
          example: 3
    WebhookEventType:
      type: string
      enum:
        - asset_wallet.outbound.created
        - asset_wallet.outbound.pending_authorization
        - asset_wallet.outbound.rejected
        - asset_wallet.outbound.queued
        - asset_wallet.outbound.pending_confirm
        - asset_wallet.outbound.confirmations.updated
        - asset_wallet.outbound.confirmed
        - asset_wallet.outbound.failed
        - asset_wallet.inbound.pending_confirm
        - asset_wallet.inbound.confirmed
        - asset_wallet.inbound.confirmations.updated
        - web3_wallet.outbound.created
        - web3_wallet.outbound.pending_authorization
        - web3_wallet.outbound.rejected
        - web3_wallet.outbound.queued
        - web3_wallet.outbound.pending_confirm
        - web3_wallet.outbound.confirmations.updated
        - web3_wallet.outbound.confirmed
        - web3_wallet.outbound.failed
        - web3_wallet.inbound.pending_confirm
        - web3_wallet.inbound.confirmed
        - web3_wallet.inbound.confirmations.updated
        - safe_wallet.outbound.created
        - safe_wallet.outbound.pending_authorization
        - safe_wallet.outbound.rejected
        - safe_wallet.outbound.queued
        - safe_wallet.outbound.pending_signature
        - safe_wallet.outbound.pending_confirm
        - safe_wallet.outbound.confirmations.updated
        - safe_wallet.outbound.confirmed
        - safe_wallet.outbound.failed
        - safe_wallet.inbound.pending_confirm
        - safe_wallet.inbound.confirmed
        - safe_wallet.inbound.confirmations.updated
        - exchange_wallet.inbound.pending_confirm
        - exchange_wallet.inbound.confirmed
        - exchange_wallet.outbound.created
        - exchange_wallet.outbound.pending_authorization
        - exchange_wallet.outbound.rejected
        - exchange_wallet.outbound.pending_confirm
        - exchange_wallet.outbound.confirmed
        - exchange_wallet.outbound.failed
        - exchange_wallet.sub_transfer.created
        - exchange_wallet.sub_transfer.pending_authorization
        - exchange_wallet.sub_transfer.rejected
        - exchange_wallet.sub_transfer.pending_confirm
        - exchange_wallet.sub_transfer.confirmed
        - exchange_wallet.sub_transfer.failed
        - organization_controlled_wallet.outbound.created
        - organization_controlled_wallet.outbound.pending_authorization
        - organization_controlled_wallet.outbound.rejected
        - organization_controlled_wallet.outbound.queued
        - organization_controlled_wallet.outbound.pending_signature
        - organization_controlled_wallet.outbound.pending_confirm
        - organization_controlled_wallet.outbound.confirmations.updated
        - organization_controlled_wallet.outbound.confirmed
        - organization_controlled_wallet.outbound.failed
        - organization_controlled_wallet.inbound.pending_confirm
        - organization_controlled_wallet.inbound.confirmed
        - organization_controlled_wallet.inbound.confirmations.updated
        - user_controlled_wallet.outbound.created
        - user_controlled_wallet.outbound.pending_authorization
        - user_controlled_wallet.outbound.rejected
        - user_controlled_wallet.outbound.queued
        - user_controlled_wallet.outbound.pending_signature
        - user_controlled_wallet.outbound.pending_confirm
        - user_controlled_wallet.outbound.confirmations.updated
        - user_controlled_wallet.outbound.confirmed
        - user_controlled_wallet.outbound.failed
        - user_controlled_wallet.inbound.pending_confirm
        - user_controlled_wallet.inbound.confirmed
        - user_controlled_wallet.inbound.confirmations.updated
      example: asset_wallet.outbound.created
      description: The event type.
    WebhookEventStatus:
      type: string
      enum:
        - Success
        - Retrying
        - Failed
      example: Success
      description: |-
        The event status. Possible values include:
        - `Success`: The event has been delivered, and the webhook endpoint has responded to the event.
        - `Retrying`: The event has been delivered, but the webhook endpoint has not responded. In this case, Cobo will retry delivering the event.
        - `Failed`: The event cannot be delivered and Cobo will stop retrying. This may occur if the number of retries reaches 10, or if the event has been delivered but the webhook endpoint responded with an error.
    WebhookEventLog:
      type: object
      description: The webhook event log.
      required:
        - id
        - created_timestamp
        - status
        - request_headers
        - request_body
        - success
      properties:
        id:
          description: The event log ID.
          type: string
          format: uuid
          example: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
        created_timestamp:
          description: 'The time when the log was created, in Unix timestamp format, measured in milliseconds.'
          type: integer
          example: 1701396866000
        request_headers:
          type: object
          description: The request headers of the webhook event.
          example: '{"Content-Type": "application/json"}'
        request_body:
          $ref: '#/components/schemas/WebhookEvent'
        response_body:
          type: object
          description: The response body of the webhook event.
        response_status_code:
          type: integer
          description: The response status code of the webhook event.
          example: 200
        response_time:
          type: integer
          description: 'The response time of the webhook event, in milliseconds.'
          example: 100
        success:
          type: boolean
          description: Whether the webhook event has been successfully delivered.
          example: true
        failure_reason:
          type: string
          description: The reason why the webhook event fails to be delivered.
          example: Connect Timeout
  parameters:
    sortByParam:
      name: sort_by
      in: query
      description: Field of sort by
      required: false
      schema:
        type: string
        default: ''
      example: timestamp
    directionParam:
      name: direction
      in: query
      description: Direction to sort by
      required: false
      schema:
        type: string
        enum:
          - ASC
          - DESC
        default: ''
      example: ASC
    limitParam:
      name: limit
      in: query
      description: 'The maximum number of objects to return. The value range is [1, 50].'
      required: false
      schema:
        type: integer
        format: int32
        default: 10
        minimum: 1
        maximum: 50
      example: 10
    beforeParam:
      name: before
      in: query
      description: |-
        An object ID which serves as a cursor for pagination. For example, if you specify `before` as `foo`, the request will retrieve a list of data objects that end before the object with the object ID `foo`. You can set this parameter to the value of `pagination.after` in the response of the previous request.
        If you set both `after` or `before`, only the setting of `before` will take effect.
      required: false
      schema:
        type: string
      example: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
    afterParam:
      name: after
      in: query
      description: |-
        An object ID which serves as a cursor for pagination. For example, if you specify `after` as `bar`, the request will retrieve a list of data objects that start after the object with the object ID `bar`. You can set this parameter to the value of `pagination.before` in the response of the previous request.
        If you set both `after` or `before`, only the setting of `before` will take effect.
      required: false
      schema:
        type: string
      example: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
    optionalAssetIdParam:
      name: asset_id
      in: query
      required: false
      description: The asset ID.
      schema:
        type: string
      example: USDT
    optionalAssetIdListParam:
      name: asset_id
      in: query
      required: false
      description: The asset ID list.
      schema:
        type: array
        items:
          type: string
      example:
        - USDT
    requiredAssetIdParam:
      name: asset_id
      in: query
      required: true
      description: The asset ID.
      schema:
        type: string
      example: USDT
    optionalChainIdParam:
      name: chain_id
      in: query
      required: false
      description: The chain ID.
      schema:
        type: string
      example: ETH
    optionalChainIdListParam:
      name: chain_id
      in: query
      required: false
      description: The chain ID.
      schema:
        type: array
        items:
          type: string
      example:
        - ETH
    optionalTokenIdParam:
      name: token_id
      in: query
      required: false
      description: The token ID.
      schema:
        type: string
      example: ETH_USDT
    optionalTokenListIdParam:
      name: token_id
      in: query
      required: false
      description: The token ID list.
      schema:
        type: array
        items:
          type: string
      example:
        - ETH_USDT
    requiredTokenIdParam:
      name: token_id
      in: query
      required: true
      description: The token ID.
      schema:
        type: string
      example: ETH_USDT
    requiredFeeRateParam:
      name: fee_rate
      in: query
      required: true
      description: The fee rate in sats/vByte or fee_price in gwei.
      schema:
        type: string
      example: '0.001'
    requiredWalletSubtypeParam:
      name: wallet_subtype
      in: query
      required: true
      description: |
        The wallet subtype.

        - `Asset`: Custodial Wallets (Asset Wallets)

        - `Web3`: Custodial Wallets (Web3 Wallets)

        - `Main`: Exchange Wallets (Main Account)

        - `Sub`: Exchange Wallets (Sub Account)

        - `Org-Controlled`: MPC Wallets (Organization-Controlled Wallets)

        - `User-Controlled`: MPC Wallets (User-Controlled Wallets)

        - `Safe{Wallet}`: Smart Contract Wallets (Safe{Wallet})
      schema:
        $ref: '#/components/schemas/WalletSubtype'
    optionalWalletTypeParam:
      name: wallet_type
      in: query
      required: false
      description: |
        The wallet type.

        - `Custodial`: Custodial Wallets

        - `MPC`: MPC Wallets

        - `SmartContract`: Smart Contract Wallets

        - `Exchange`: Exchange Wallets
      schema:
        $ref: '#/components/schemas/WalletType'
    optionalWalletSubtypeParam:
      name: wallet_subtype
      in: query
      required: false
      description: |
        The wallet subtype.

        - `Asset`: Custodial Wallets (Asset Wallets)

        - `Web3`: Custodial Wallets (Web3 Wallets)

        - `Main`: Exchange Wallets (Main Account)

        - `Sub`: Exchange Wallets (Sub Account)

        - `Org-Controlled`: MPC Wallets (Organization-Controlled Wallets)

        - `User-Controlled`: MPC Wallets (User-Controlled Wallets)

        - `Safe{Wallet}`: Smart Contract Wallets (Safe{Wallet})
      schema:
        $ref: '#/components/schemas/WalletSubtype'
    walletIdParam:
      name: wallet_id
      in: path
      required: true
      description: The wallet ID.
      schema:
        type: string
        format: uuid
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    optionalWalletIdParam:
      name: wallet_id
      in: query
      required: false
      description: The wallet ID.
      schema:
        type: string
        format: uuid
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    optionalWalletListIdParam:
      name: wallet_id
      in: query
      required: false
      description: The wallet ID list.
      schema:
        type: array
        items:
          type: string
          format: uuid
      example:
        - f47ac10b-58cc-4372-a567-0e02b2c3d479
    addressIdParam:
      name: address_id
      in: path
      required: true
      description: The address ID.
      schema:
        type: string
        format: uuid
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    requiredAddressStrParam:
      name: address_str
      in: query
      required: true
      description: The wallet address.
      schema:
        type: string
        description: The wallet address.
      example: '0x0000000000000000000000000000000000000000'
    requiredSubWalletIdParam:
      name: sub_wallet_id
      in: query
      required: true
      description: Unique id of the wallet
      schema:
        type: string
      example: SPOT
    addressStrParam:
      name: address_str
      in: query
      required: false
      description: The wallet address.
      schema:
        type: string
        description: The wallet address.
      example: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
    toAddressStrParam:
      name: to_address
      in: query
      required: true
      description: The recipient's address.
      schema:
        type: string
      example: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
    fromAddressStrParam:
      name: from_address
      in: query
      required: false
      description: The sender's address.
      schema:
        type: string
      example: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
    optionalUtxoTxHashParam:
      name: tx_hash
      in: query
      required: false
      description: Transaction hash of the UTXO.
      schema:
        type: string
        description: Transaction hash of the UTXO.
      example: dd7e1cecf6bbde1844ee1815b780711a1e306a718bcd23cd64401b48ef88eb83
    keyGroupIdParam:
      name: key_group_id
      in: path
      required: true
      description: Unique id of the tss group
      schema:
        type: string
      example: '880311524363903326'
    optionalKeyGroupTypeParam:
      name: key_group_type
      in: query
      description: The type of key group.
      required: false
      schema:
        $ref: '#/components/schemas/KeyGroupType'
    projectIdParam:
      name: project_id
      in: path
      required: true
      description: Unique id of the mpc project
      schema:
        type: string
        format: uuid
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    optionalProjectIdQueryParam:
      name: project_id
      in: query
      description: Unique id of the mpc project
      schema:
        type: string
        format: uuid
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    optionalProjectIdListQueryParam:
      name: project_id
      in: query
      description: Unique id of the mpc project
      schema:
        type: array
        items:
          type: string
          format: uuid
      example:
        - f47ac10b-58cc-4372-a567-0e02b2c3d479
    requiredTargetKeyGroupIdParam:
      name: target_key_group_id
      in: query
      description: The target key group id of tss request.
      required: true
      schema:
        type: string
      example: '880311524363903326'
    requiredTssRequestActionParam:
      name: tss_request_action
      in: query
      description: The action of tss request.
      required: true
      schema:
        $ref: '#/components/schemas/TSSRequestAction'
    tssRequestIdParam:
      name: tss_request_id
      in: path
      required: true
      description: Unique id of the tss request
      schema:
        type: string
        format: uuid
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    requiredUpdateKeyGroupActionParam:
      name: update_key_group_action
      in: query
      description: The action of update key group
      required: true
      schema:
        type: string
        description: the action of tss request.
        enum:
          - UpgradeToMainKeyGroup
        example: UpgradeToMainKeyGroup
    vaultIdParam:
      name: vault_id
      in: path
      required: true
      description: Unique id of the mpc vault
      schema:
        type: string
        format: uuid
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    optionalVaultIdQueryParam:
      name: vault_id
      in: query
      required: false
      description: The MPC Vault ID.
      schema:
        type: string
        format: uuid
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    optionalVaultIdListQueryParam:
      name: vault_id
      in: query
      required: false
      description: Unique id of the mpc vault
      schema:
        type: array
        items:
          type: string
          format: uuid
      example:
        - f47ac10b-58cc-4372-a567-0e02b2c3d479
    optionalVaultNameParam:
      name: vault_name
      in: query
      required: false
      description: Unique id of the mpc vault
      schema:
        type: string
      example: my vault name
    exchangeIdParam:
      name: exchange_id
      in: path
      required: true
      description: Exchange ID to query
      schema:
        $ref: '#/components/schemas/ExchangeId'
    optionalExchangeIdParam:
      name: exchange_id
      in: query
      required: false
      description: Exchange ID to query
      schema:
        $ref: '#/components/schemas/ExchangeId'
    requiredExchangeIdParam:
      name: exchange_id
      in: query
      required: true
      description: Exchange ID to query
      schema:
        $ref: '#/components/schemas/ExchangeId'
    optionalApikeyParam:
      name: apikey
      in: query
      description: The API Key for the exchange
      required: false
      schema:
        type: string
      example: d8f062da-39f4-4a11-8b9d-12595854237f
    optionalSecretParam:
      name: secret
      in: query
      description: The API Secret for the exchange.
      required: false
      schema:
        type: string
      example: 75B4F636193162488A3728B4A5797708
    optionalPassphraseParam:
      name: passphrase
      in: query
      description: The API passphrase for the exchange wallet.
      required: false
      schema:
        type: string
      example: A3DBHJV
    optionalRequestIdParam:
      name: request_id
      in: query
      required: false
      description: Request ID
      schema:
        type: string
      example: web_send_by_user_327_1610444045047
    optionalCoboIdParam:
      name: cobo_id
      in: query
      required: false
      description: Cobo ID
      schema:
        type: string
      example: '20231213122855000000000000000000'
    optionalTransactionTypeParam:
      name: type
      in: query
      required: false
      description: The type of a transaction
      schema:
        $ref: '#/components/schemas/TransactionType'
    optionalTransactionTypeListParam:
      name: type
      in: query
      required: false
      description: The type of a transaction
      schema:
        type: array
        items:
          $ref: '#/components/schemas/TransactionType'
    optionalTransactionStatusParam:
      name: status
      in: query
      required: false
      description: The status of a transaction
      schema:
        $ref: '#/components/schemas/TransactionStatus'
    optionalTransactionStatusListParam:
      name: status
      in: query
      required: false
      description: The status of a transaction
      schema:
        type: array
        items:
          $ref: '#/components/schemas/TransactionStatus'
    optionalMinCreatedTimestampParam:
      name: min_created_timestamp
      in: query
      required: false
      description: The minimum transaction creation timestamp in Unix epoch seconds
      schema:
        type: integer
      example: 1635744000
    optionalMaxCreatedTimestampParam:
      name: max_created_timestamp
      in: query
      required: false
      description: The maximum transaction creation timestamp in Unix epoch seconds
      schema:
        type: integer
      example: 1635744000
    optionalTransactionSourceTypeListParam:
      name: source_type
      in: query
      required: false
      description: The source type of the transaction
      schema:
        type: array
        items:
          $ref: '#/components/schemas/TransactionSourceType'
    optionalTransactionSourceAddressListParam:
      name: source_wallet_id
      in: query
      required: false
      description: Unique id of the wallet
      schema:
        type: array
        items:
          type: string
          format: uuid
      example:
        - f47ac10b-58cc-4372-a567-0e02b2c3d479
    optionalTransactionSourceWalletIdListParam:
      name: source_address
      in: query
      required: false
      description: The source address of the transaction
      schema:
        type: array
        items:
          type: string
    optionalTransactionDestinationTypeListParam:
      name: destination_type
      in: query
      required: false
      description: The destination type of the transaction
      schema:
        type: array
        items:
          $ref: '#/components/schemas/TransactionDestinationType'
    optionalTransactionDestinationAddressListParam:
      name: destination_wallet_id
      in: query
      required: false
      description: Unique id of the wallet
      schema:
        type: array
        items:
          type: string
          format: uuid
      example:
        - f47ac10b-58cc-4372-a567-0e02b2c3d479
    optionalTransactionDestinationWalletIdListParam:
      name: destination_address
      in: query
      required: false
      description: The destination address of the transaction
      schema:
        type: array
        items:
          type: string
    transactionIdParam:
      name: transaction_id
      in: path
      required: true
      description: Unique id of the transaction
      schema:
        type: string
        format: uuid
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    webhookEventIdParam:
      name: event_id
      in: path
      required: true
      description: 'The event ID. You can obtain a list of event IDs by calling [List all events](/api-references/v2/developers--webhooks/list-all-events).'
      schema:
        type: string
        format: uuid
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
  requestBodies:
    createWalletBody:
      description: The request body to create a wallet
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreatedWallet'
    updateWalletBody:
      description: The request body.
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                example: Example Wallet
                description: The wallet name.
              apikey:
                type: string
                description: The API key of your exchange account. Only needed when updating exchange wallets.
                example: d8f062da-39f4-4a11-8b9d-12595854237f
              secret:
                type: string
                description: The API secret of your exchange account. Only needed when updating exchange wallets.
                example: 75B4F636193162488A3728B4A5797708
              passphrase:
                type: string
                description: The passphrase of your exchange account. Only needed when updating exchange wallets.
                example: sXASDKWKLLsWWEE
              ga_code:
                type: string
                description: The GA code for the exchange.
                example: sXASDKWKLLsWWEE75B4F636193162488A3728B4A5797708
              sub_account_ids:
                type: array
                description: 'The Sub Account ID. It can be an email address, a user name, or a custom account ID. Only needed when updating exchange wallets.'
                items:
                  type: string
                example:
                  - sub01@xx.com
                  - sub02@xx.com
    createAddressBody:
      description: The request body to add address to a wallet.
      content:
        application/json:
          schema:
            type: object
            required:
              - token_id
              - count
            properties:
              token_id:
                type: string
                description: The token ID.
                pattern: '^[A-Z]+(_[A-Z0-9]+)?$'
                example: ETH_USDT
              count:
                type: integer
                maximum: 50
                minimum: 1
                default: 1
                description: The number of addresses to create.
                example: 1
              encoding:
                $ref: '#/components/schemas/AddressEncoding'
    lockSpendablesBody:
      description: The request body to lock/unlock spendable
      content:
        application/json:
          schema:
            type: object
            required:
              - tx_hashes
            properties:
              tx_hashes:
                type: array
                items:
                  type: string
                  example: dd7e1cecf6bbde1844ee1815b780711a1e306a718bcd23cd64401b48ef88eb83
              is_locked:
                type: boolean
                description: 'True if to lock the UTXOs, False to unlock.'
                default: true
                example: true
    createKeyGroupBody:
      description: The request body to create a mpc key group
      content:
        application/json:
          schema:
            type: object
            required:
              - group_type
              - node_count
              - threshold
              - key_holders
            properties:
              group_type:
                $ref: '#/components/schemas/KeyGroupType'
              node_count:
                type: integer
                description: The count of tss node of the key group
              threshold:
                type: integer
                description: The threshold number of tss node required for signature
              key_holders:
                type: array
                items:
                  type: object
                  description: 'When creating MainKeyGroup and SigningKeyGroup, the cobo key holder will be added automatically'
                  properties:
                    name:
                      type: string
                      example: key holder name
                    type:
                      $ref: '#/components/schemas/KeyHolderType'
                    tss_node_id:
                      type: string
                      description: The ID of the tss node.
                      example: cobo5yb7BNEBwwp5XXedbhnzQfvQtp132W4dH4Jz4x4eDp4KA
    createMpcProjectBody:
      description: The request body to create a mpc project
      content:
        application/json:
          schema:
            type: object
            required:
              - type
              - node_count
              - threshold
            properties:
              name:
                type: string
                example: My mpc project name
                description: The name of the mpc project.
              node_count:
                type: integer
                description: Number of tss nodes in the key group
              threshold:
                type: integer
                description: The threshold number of tss node required for signature
    createTssRequestBody:
      description: The request body to create a tss request
      content:
        application/json:
          schema:
            type: object
            required:
              - type
              - target_key_group_id
            properties:
              type:
                $ref: '#/components/schemas/TSSRequestType'
              target_key_group_id:
                type: string
              used_key_group_id:
                type: string
              detail_params:
                description: 'for KeyGen request, this parameters can be null'
                type: object
                properties:
                  used_node_ids:
                    type: array
                    items:
                      type: string
                      example: cobo5yb7BNEBwwp5XXedbhnzQfvQtp132W4dH4Jz4x4eDp4KA
                      description: The IDs of the tss node participating in the reshare tss request
    createMpcVaultBody:
      description: The request body to create a mpc vault
      content:
        application/json:
          schema:
            type: object
            required:
              - name
              - vault_type
            properties:
              project_id:
                type: string
                example: 0111039d-27fb-49ba-b172-6e0aa80e37ec
                description: The id of the mpc project.
              name:
                type: string
                example: My mpc vault
                description: The name of the mpc vault.
              vault_type:
                $ref: '#/components/schemas/MPCVaultType'
    updateProjectBody:
      description: The request body to update a mpc project
      content:
        application/json:
          schema:
            type: object
            required:
              - name
            properties:
              name:
                type: string
                example: My mpc new project name
                description: The name of the mpc project.
    updateVaultBody:
      description: The request body to update a mpc vault
      content:
        application/json:
          schema:
            type: object
            required:
              - name
            properties:
              name:
                type: string
                description: The new name of vault
                example: my mpc vault name
    createTransferBody:
      description: The request body to create a transfer transaction
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Transfer'
    createSmartContractCallBody:
      description: The request body to create a contract call transaction
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ContractCall'
    createMessageSignBody:
      description: The request body to create a message sign transaction
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SignMessage'
    estimateFeeBody:
      description: The request body to estimate fee of transfer or contract call transaction
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EstimateFee'
    feeRequestBody:
      description: The request body of fee to initiate drop/speed_up transactions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TransactionRbf'
    resendTransactionBody:
      description: The request body of fee to initiate resend transaction
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TransactionResend'
  responses:
    badRequestError:
      description: Bad request. Your request contains malformed syntax or invalid parameters.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    unauthorizedError:
      description: Unauthorized. Please provide valid credentials.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    forbiddenError:
      description: Forbidden. You do not have permission to access to the requested resource.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    notFoundError:
      description: Resource not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    tooManyRequestError:
      description: Too many requests.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    serviceUnavailableError:
      description: Unknown internal error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    getChainsResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/ChainInfo'
              pagination:
                $ref: '#/components/schemas/Pagination'
    getAssetsResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/AssetInfo'
              pagination:
                $ref: '#/components/schemas/Pagination'
    getTokensResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  type: object
                  allOf:
                    - type: object
                      properties:
                        can_deposit:
                          type: boolean
                          description: |
                            Whether the token can be deposited.

                            - `true`: The token can be deposited.

                            - `false`: The token cannot be deposited.
                          default: false
                          example: false
                        can_withdraw:
                          type: boolean
                          description: |
                            Whether the token can be withdrawn.

                            - `true`: The token can be withdrawn.

                            - `false`: The token cannot be withdrawn.
                          default: false
                          example: false
                    - $ref: '#/components/schemas/TokenInfo'
              pagination:
                $ref: '#/components/schemas/Pagination'
    getTokenBalancesResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/TokenBalance'
              pagination:
                $ref: '#/components/schemas/Pagination'
    getAssetBalancesResponse:
      description: Successfully listed tokens
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/AssetBalance'
              pagination:
                $ref: '#/components/schemas/Pagination'
    getWalletsResponse:
      description: Successfully listed wallets
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/WalletInfo'
              pagination:
                $ref: '#/components/schemas/Pagination'
    getWalletByIdResponse:
      description: Successful get a wallet info
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/WalletInfo'
    createWalletResponse:
      description: Successfully created wallet
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/WalletInfo'
    updateWalletResponse:
      description: Successfully updated address
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/WalletInfo'
    spendableListResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/UTXO'
    lockSpendableResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: object
            properties:
              executed:
                type: boolean
                example: true
                description: Whether the spendable lock/unlock has been successfully executed.
    maxTransferableValueResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MaxTransferableValue'
    getAddressesResponse:
      description: Successfully listed addresses
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/AddressInfo'
              pagination:
                $ref: '#/components/schemas/Pagination'
    createAddressResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/AddressInfo'
    getAddressValidityResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: object
            properties:
              validity:
                type: boolean
                description: |
                  Whether the address is valid.
                  - `true`: The address is valid.
                  - `false`: the address is invalid.
                example: true
    createKeyGroupsResponse:
      description: mpc vault successfully created
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/KeyGroup'
    createMpcProjectResponse:
      description: mpc project successfully created
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MPCProject'
    createTssRequestResponse:
      $ref: '#/components/responses/createMpcVaultResponse'
    createMpcVaultResponse:
      description: mpc vault successfully created
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MPCVault'
    getCoboKeyHoldersResponse:
      description: Successfully listed mpc tss groups
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/KeyHolder'
    getKeyGroupResponse:
      description: Successfully get mpc tss group
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/KeyGroup'
    getKeyGroupsResponse:
      description: Successfully listed mpc tss groups
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/KeyGroup'
    getMpcProjectResponse:
      description: Successfully listed mpc vaults
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MPCProject'
    getMpcProjectsResponse:
      description: Successfully listed mpc projects
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/MPCProject'
    getTssRequestResponse:
      description: get mpc tss request successfully
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TSSRequest'
    getMpcVaultResponse:
      description: Successfully get mpc vault
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MPCVault'
    getMpcVaultsResponse:
      description: Successfully listed mpc vaults
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/MPCVault'
    deleteKeyGroupResponse:
      description: Successfully deleted mpc tss group
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/KeyGroup'
    putKeyGroupResponse:
      description: Successfully modify mpc tss group
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/KeyGroup'
    putTssRequestResponse:
      description: modify mpc tss request successfully
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TSSRequest'
    putVaultResponse:
      description: Successfully modify mpc vault
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MPCVault'
    getSubAccountIdsResponse:
      description: Successfully list of exchange sub account ids
      content:
        application/json:
          schema:
            type: array
            description: Sub account id list
            items:
              type: string
            example:
              - f47ac10b-58cc-4372-a567-0e02b2c3d479
    getChainFeeResponse:
      description: Successful get chain fee info
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/ChainFeePrice'
    getTransactionsResponse:
      description: Successfully listed transactions
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'
              pagination:
                $ref: '#/components/schemas/Pagination'
    getTransactionByIdResponse:
      description: Successful get a transaction detail
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Transaction'
    estimateFeeResponse:
      description: Successful get the fee estimation result
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/EstimationFee'
    transactionFeeResponse:
      description: Successful get a transaction detail
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TransactionTransferFee'
    createTransactionRequestResponse:
      description: Successful create a smart contract call request
      content:
        application/json:
          schema:
            type: object
            properties:
              request_id:
                type: string
                description: Unique id of the request.
                example: f47ac10b-58cc-4372-a567-0e02b2c3d479
              transaction_id:
                type: string
                description: The transaction id of of the request.
                example: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
              status:
                $ref: '#/components/schemas/TransactionStatus'
  securitySchemes:
    CoboAuth:
      type: apiKey
      in: header
      name: BIZ-API-KEY
      description: The API key.
security:
  - CoboAuth: []
